%!PS-Adobe-2.0 EPSF-2.0
%%Title: xicon.eps
%%Creator: xpick Version 1.00  Rev: 22/03/93 - by Evgeni Chernyaev
%%BoundingBox: 289 379 323 413
%%EndComments
%***********************************************************************
%*                                                                     *
%* Object: Image decoding PS-routine                                   *
%* Author: Evgeni CHERNYAEV (chernaev@vxcern.cern.ch)                  *
%*                                                                     *
%* Function: Display a Lempel-Ziv Welch (LZW) encoded color image.     *
%*           The image is displayed in color on viewers and printers   *
%*           that support color Postscript, otherwise it is displayed  *
%*           as grayscale.                                             *
%*                                                                     *
%***********************************************************************
/CriticalSize 300000 def
systemdict /colorimage known { /incr 3 def } { /incr 1 def } ifelse
/Length 81 81 mul def
/Table Length array def
/Prefix Length array def
/Length Length incr mul def
/String Length string def
%***********************************************************************
/ReadCode                % Read next code from file                    *
%***********************************************************************
{
  { currentfile read pop
    dup dup 42 ge exch 123 lt and { exit } { pop } ifelse
  } loop
  42 sub 81 mul
  currentfile read pop 42 sub add
  /CurCode exch def
} bind def
%***********************************************************************
/DecodeCodeA             % Decode CurCode (fast, but memory demanding) *
%***********************************************************************
{
  ReadCode
  CurCode Ncol eq {
    ReadCode
    /FreeCode Ncol 1 add def
  }{
    //Table FreeCode L incr add string
    dup 0 Table OldCode get putinterval
    dup L Table CurCode FreeCode lt { CurCode } { OldCode } ifelse get
    0 incr getinterval putinterval put
    /FreeCode FreeCode 1 add def
  } ifelse
  /OldCode CurCode def
  Table CurCode get dup length /L exch def
} bind def
%***********************************************************************
/DecodeCodeB         % Decode CurCode (not memory demanding, but slow) *
%***********************************************************************
{
  /iout //Length //incr sub def
  ReadCode
  CurCode Ncol eq {
    /FreeCode Ncol 1 add def
    ReadCode
    /OldCode CurCode def
    /FinChar CurCode def
    String iout Table CurCode get putinterval
  }{
    /InCode CurCode def
    CurCode FreeCode eq {
      /CurCode OldCode def
      String iout Table FinChar get putinterval
      /iout iout //incr sub def
    } if
    iout //incr neg 0 {
      CurCode Ncol lt { exit } if
      String exch Table CurCode get putinterval
      /CurCode Prefix CurCode get def
    } for
    /iout exch def
    /FinChar CurCode def
    String iout Table FinChar get putinterval
    Prefix FreeCode OldCode put
    Table FreeCode Table FinChar get put
    /FreeCode FreeCode 1 add def
    /OldCode InCode def
  } ifelse
  String iout //Length iout sub getinterval
}bind def
%***********************************************************************
/DisplayImage            % Display a LZW-encoded color image           *
%***********************************************************************
{
  gsave
  /buffer 72 string def
  currentfile buffer readline pop
  token { /degrees exch def pop } { } ifelse
  degrees rotate
  currentfile buffer readline pop
  token { /x exch def } { } ifelse
  token { /y exch def pop } { } ifelse
  x y translate
  currentfile buffer readline pop
  token { /x exch def } { } ifelse
  token { /y exch def pop } { } ifelse
  x y scale
  currentfile buffer readline pop
  token { /columns exch def } { } ifelse
  token { /rows exch def pop } { } ifelse
  currentfile buffer readline pop
  token { /Ncol exch def pop } { } ifelse
  systemdict /colorimage known {
    0 1 Ncol 1 sub {
      Table exch
      currentfile 3 string readhexstring pop put
    } for
    columns rows mul CriticalSize lt {
      columns rows 8
      [ columns 0 0 rows neg 0 rows ]
      { DecodeCodeA } false 3 colorimage
    }{
      columns rows 8
      [ columns 0 0 rows neg 0 rows ]
      { DecodeCodeB } false 3 colorimage
    } ifelse
  }{
    /color 3 string def
    0 1 Ncol 1 sub {
      Table exch
      1 string dup 0
      currentfile color readhexstring pop pop
      color 0 get 0.299 mul
      color 1 get 0.587 mul add
      color 2 get 0.114 mul add
      cvi put put
    } for
    columns rows mul CriticalSize lt {
      columns rows 8
      [ columns 0 0 rows neg 0 rows ]
      { DecodeCodeA } image
    }{
      columns rows 8
      [ columns 0 0 rows neg 0 rows ]
      { DecodeCodeB } image
    } ifelse
  } ifelse
  grestore
} bind def
%***********************************************************************
%*                          Image decoding                             *
%***********************************************************************
DisplayImage
0.00
289.00 379.00
34.00 34.00
34 34
256
000000 ffffff 00ffff 9f0028 870022 d18598 460012 ffffff 53559e 474887
b0b1d3 28294c ffffff e1e3bc bfc1a0 f2f3e3 7e7f69 000000 f0b550 cc9a44
f8dfb2 7f602a ffffff 645fa2 55518a b8b5d4 312e50 ffffff b53560 9a2d51
dda2b6 57192e ffffff 7f7f9b 6c6c84 c5c5d2 3f3f4e ffffff 700070 5f005f
ba85ba 320032 ffffff e1e3bc afafaf 7d7d7d 4b4b4b 969696 646464 c8c8c8
e1e1e1 323232 ff00ff ffff00 ff0000 0000ff 00ff00 71725e 7f7f7f f9f9f9
f3f3f3 ededed e7e7e7 dbdbdb d4d4d4 cecece c2c2c2 bcbcbc b6b6b6 b0b0b0
aaaaaa a4a4a4 9e9e9e 989898 929292 8c8c8c 868686 808080 797979 737373
6d6d6d 676767 616161 5b5b5b 555555 4f4f4f 494949 434343 3d3d3d 373737
313131 2b2b2b 242424 1e1e1e 181818 121212 0c0c0c 060606 0000cc 0013cc
0027cc 003acc 004ecc 0061cc 0075cc 0088cc 009bcc 00afcc 00c2cc 00ccc2
00ccaf 00cc9b 00cc88 00cc75 00cc61 00cc4e 00cc3a 00cc27 00cc13 00cc00
13cc00 27cc00 3acc00 4ecc00 61cc00 75cc00 88cc00 9bcc00 afcc00 c2cc00
ccc200 ccaf00 cc9b00 cc8800 cc7500 cc6100 cc4e00 cc3a00 cc2700 cc1300
d9dcc7 f0af3a bc2458 7875b8 00004d 6666ff 9999ff cd950c cd1076 4f94cd
666666 698b22 008b00 008b8b 00007f 0000fe 007f00 007f7f 007ffe 00fe00
00fe7f 00fefe 7f0000 7f007f 7f00fe 7f7f00 7f7ffe 7ffe00 7ffe7f 7ffefe
fe0000 fe007f fe00fe fe7f00 fe7f7f fe7ffe fefe00 fefe7f e0e2bb 1e3730
cc940c 1e3766 cc1076 1ee2bb 4f93cc 1e636b 008a8a 698a22 008a00 cf8396
460013 b85874 f6dcb0 085874 7f602a 805874 eeb150 7e7f69 f0f1e1 0e5874
f7deb1 07f1e1 80f1e1 efb450 070001 800001 07666f 80666f d08497 2e0006
9e0028 460012 b80006 f1f2e2 bec09f 1e0030 1e7200 1ebc00 1efefe b88497
088497 808497 0e8497 070003 800003 07602a 80602a 070004 800004 070000
800000 0d0012 0d97d0 2e97d0 80d084 b8d084 08d084 0ed084 be7f3f be7f7f
be7fbe be7ffe bebe00 bebe3f bebe7f bebebe bebefe befe00 befe3f befe7f
befebe befefe fe0000 fe003f fe007f fe00be
-7*7-8-9-:-;-<-=->-?-@-A-:+o-D-E-F-G-H-I-D-C*+-M-N-O-P-Q-R+o-L-R-V-W-M-K
-9+o-Y*+-\-_-^-a-`-c-b-Z-8-\-]-d-j-b-e-f*7-h-k-q-l-_-n-h-s-w-^-k-Y-T-[-i
-w-v-z-y.+-g-N-r.4-d.*-u.-.7.4-l.8.9.:-a-P-D.B-G-U.0-O-v.8.1-U-x-X.1.1.2
-o.@.N.O-t.Q./.A.N-E-m.W.-.H.I.J-c.?.Y.J._-j-E.F.f.C.6-q.9./-F.Y.[.g-u-p
.r-y.a...t-G.y-r-F-C.v.b///+.L.m/,.P.i.s..-s.c/5/,.h.,/9/<-m/3/@/D/-/?-J
/H/I-L/I/L-I/./M/P/>-B/S/T/U/T
showpage
%%Trailer
