head     1.1;
branch   ;
access   ;
symbols  ;
locks    goossens:1.1; strict;
comment  @% @;


1.1
date     94.06.09.10.05.41;  author goossens;  state Exp;
branches ;
next     ;


desc
@initial entry
@



1.1
log
@Initial revision
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                 %
%   PAW   - Reference Manual -- LaTeX Source                      %
%                                                                 %
%   Chapter 2: General principles                                 %
%                                                                 %
%   EPS file      : pawcom.eps                                    %
%                                                                 %
%   Editor: Michel Goossens / CN-AS                               %
%   Last Mod.: 30 June 1992 10:05 mg                              %
%                                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\chapter{General principles}
\minitoc
\label{sec:PRINCIP}

\section{Access to PAW}
\label{sec:PACCESS}\index{PAW!access}
 
At CERN the PAW program
is interfaced on all systems via a command
procedure which gives access to the three release levels of
the CERN Program Library
(\Lit{PRO}duction, \Lit{OLD} and the \Lit{NEW} areas) and
sets the proper environment if necessary.
Users who are not at CERN or who are using non-central
computer systems should contact their system
administrator for help on PAW.
\index{CERN Program Library!OLD}
\index{CERN Program Library!NEW}
\index{CERN Program Library!PRO}

\subsection{IBM/VM-CMS}
\index{VM-CMS}
\index{IBM}
\index{CMS}
 
There are three versions available:

\begin{DL}{MMMM}
\item[GKS]   For any ASCII graphic terminal capable of emulating
             Tektronix or PG.
\item[GDDM]  For IBM 3192G graphic terminals or its emulators
             (e.g. \Lit{tn3270} on a Mac-II)
\item[X11]   For any X-window display connected to VM
\end{DL}

You need a machine size of at least 7 Mb, that may be defined
either temporarily for the current session 
(command \Ucom{DEFINE STORAGE 7M} followed by an \Ucom{IPL CMS})
or permanently for all
subsequent sessions (command \Ucom{DIRM STOR 7M};
you need to logoff once to make the definition effective).
 
An interface Rexx exec file \Lit{PAW EXEC} is located on the Q-disk
and has the following interface:

\begin{XMP}
      \Ucom{PAW ( ver driver}
\end{XMP}
The first parameter \Lit{ver} can have the
values \Lit{PRO}, \Lit{NEW} and \Lit{OLD} and the second
parameter \Lit{driver} the values \Lit{GKS}, \Lit{GDDM} or \Lit{X11}.
The defaults are: \Lit{PRO GKS}. 
Help is available via {\Ucom{FIND CMS PAW}}.

\subsection{VAX/VMS}
\index{VAX}
\index{VMS}
 
There are two versions available on VXCERN: GKS and X11.
A command file \Lit{CERN_ROOT:\lsb EXE\rsb PAW.COM}
is defined system-wide via the logical
symbol \Lit{PAW}; its interface is:

\begin{XMP}
      \Ucom{PAW/ver/driver}
\end{XMP}
(default is \Lit{PRO GKS}).
You may set the initialization of PAW either as a \Lit{PAWLOGON.KUMAC}
located in your home directory, or through the
logical symbol \Lit{DEFINE PAW$LOGON disk:\lsb user.subdir\rsb file.kumac}
to be defined usually in your \Lit{LOGIN.COM}.
Help is available via {\Ucom{HELP @@CERNLIB PAW}}.

\subsection{Unix systems}
\index{Apollo}
\index{unix}
 
There are three versions available: \Lit{GKS}, \Lit{GPR} and \Lit{X11}.
The driver shell script is located in the file
\Lit{/cern/pro/bin/paw}~.
In order to access it automatically you could add the
directory \Lit{/cern/pro/bin} to your command search path.
\index{path}
\index{command!search path}
\index{HELP}
\index{X windows}
\index{X11}
\index{display}
\index{host}
\index{workstation}
\index{Domain}
\index{GKS}
\index{version}
\index{driver}
\index{GPR}
\index{GDDM}
\index{tn3270}
\index{Tektronix}
\index{PG terminal type}
\index{graphics!terminal}
\index{IBM 3192G graphics terminal}
\index{DECNET}
\index{TCP/IP}
\index{Vaxstation}
\index{PAWLOGON}
The command syntax is:
\begin{XMP}
      \Ucom{paw -v ver -d driver}
\end{XMP}
(default is \Lit{-v PRO -d GKS}).
In the GKS case this shell script sets the proper GKS environment.

\subsection{Note on the X11 version}
 
The X11 version needs to know the X-host where graphics must be
displayed; this can be specified
on each system on the command line:
\begin{XMP}
      VM/CMS:    \Ucom{PAW ( X11 HOST yourhost}
      Vax/VMS:   \Ucom{PAW/X11/host=yourhost}
      Unix:      \Ucom{paw -d X11 -h yourhost}
\end{XMP}
or at the ``\Lit{Workstation}'' prompt in PAW:
\Lit{Workstation type (?=HELP) \lsb CR\rsb =1 : \Ucom{1.yourhost}}
 
On Vax/VMS the default X-window protocol is TCP/IP.
If you want DECNET (e.g. when running
from a Vaxstation) add the \Lit{DECNET} option to the command
as follows:
\begin{XMP}
      \Ucom{PAW/X11/DECNET/host=yourhost}
\end{XMP}

\subsection{Important modes to run PAW}

\begin{UL}
\index{batch}
\item A {\bf batch} version of PAW is available 
      (note that batch implies workstation type \Lit{0}):
\begin{XMP}
 On Unix   do:  \Ucom{PAW -b macroname}
 On VMS    do:  \Ucom{PAW/BATCH=macroname}
 On VM     do:  \Ucom{PAW (BATCH=macroname}
\end{XMP}
\index{PAWLOGON}
\item One can {\bf disable} the automatic execution 
      of the \Lit{PAWLOGON} macro:
\begin{XMP}
 On Apollo do:  \Ucom{PAW -n}
 On VMS    do:  \Ucom{PAW/NOLOG}
 On VM     do:  \Ucom{PAW (NOLOG}
\end{XMP}
\end{UL}

\section{Initialising PAW}
\label{sec:INITIAL}
\index{PAW!initialisation}
 
When PAW is started, a {\bf system} startup
procedure is initiated, which indicates the current
version of PAW and requests the {\bf workstation type} of
the terminal or workstation which you are using.
\index{initialisation}
\index{workstation!type}
\begin{XMP}
$ \Ucom{PAW}
 ******************************************************
 *                                                    *
 *            W E L C O M E    to   P A W             *
 *                                                    *
 *           Version 1.13/00  9 March 1992            *
 *                                                    *
 ******************************************************
 Workstation type (?=HELP) <CR>=10 : ?
 
 List of valid workstation types:
       0:  Alphanumeric terminal
     101:  Tektronix 4010, 4014
     102:  Tektronix 4012
     103:  Tektronix 4014 with enhanced graphics option
     121:  Tektronix 4107, 4207, Pericom MX2000
     122:  Tektronix 4109
     123:  Tektronix 4111
     125:  Tektronix 4113
     127:  Tektronix 4115, Pericom MX8000
    7800:  MG600, MG200
    7878:  Falco, Pericom  Graph Pac (old Pericom)
    1020:  VT240
    1030:  VT340
  8601-6:  Vaxstation GPX
   10002:  Apollo DNXXXX monochrome (GPR)
 10003-4:  Apollo DNXXXX colour (GPR)
  9701-8:  Apollo DNXXXX (GSR)
 32120-9:  X-Window
 
 Metafile workstation types:
    -111:  HIGZ/PostScript (Portrait)
    -112:  HIGZ/PostScript (Landscape)
    -113:  HIGZ/Encapsulated PostScript 
  -777/8:  HIGZ/LaTex
\end{XMP}
Note that if you specify {\Ucom{0}},
PAW will not open a graphics workstation.
This may be appropriate if one wants to use PAW on an alphanumeric
terminal.
 
Before passing control to the user, the system looks for a user-supplied file
\Lit{pawlogon.kumac} or \Lit{PAWLOGON KUMAC (VM/CMS)}.
The latter can contain
commands which the user wants to be executed at PAW startup, e.g.
declaration of files, creation of aliases, definition of HPLOT parameters.
\index{PAWLOGON}
A simple version of this PAW initialisation file, displaying date
and time, can be:

\begin{XMP}
mess '******************************************************'
mess '*                                                    *'
mess '*   Starting PAW session on '//$date//' at '//$time//'     *'
mess '*                                                    *'
mess '******************************************************'
\end{XMP}
 
In order to
only have one version of this file on VAX/VMS the user should define
a {\bf logical name} \Lit{PAW$LOGON} in his
\Lit{LOGIN.COM},
as explained on the previous page.
On a Unix workstation the
file \Lit{pawlogon.kumac}, should be put into the directory.
On IBM/VM-CMS the minidisk file search rule takes
care of finding the file.

\section{Command structure}
\label{sec:COMSTRU}
\index{command!structure}
 
PAW is based on the KUIP\cite{bib-KUIP} User Interface package,
which can provide different types of dialogue styles:

\begin{UL}
\item Command mode,
      where the user enters a command line via the terminal keyboard.
\item Alphanumeric menu mode,
      where the command is selected from a list.
\item Graphics menu modes:\\
\index{menu}
\hspace*{1em}$\bullet$ 
Pull-down menus, fixed layout reflecting the command structure;\\
\index{pull-down menu}
\hspace*{1em}$\bullet$ 
Panels of function keys, interactive user definable multiple layouts.
\index{panel!menu}
\end{UL}

It is possible to change interactively from one style to another.
 
The general format of a PAW command line is:
\begin{XMP}
      \Ucom{command parameters}
\end{XMP}
The first part of the {\bf command} has the format:
\begin{XMP}
      \Ucom{object/verb}
\end{XMP}
where the {\bf object} is the item on which the action is performed
(e.g. \Lit{HISTOGRAM, VECTOR, NTUPLE})
and the \Lit{verb} is the action to be performed (e.g.
\Lit{CREATE, DELETE, PLOT}). 
In some cases the object needs to be
specified further (e.g. \Ucom{GRAPHICS/PRIMITIVE}),
while in other cases the verb's action needs to be clarified further
(e.g. \Ucom{CREATE/1D}).
\index{abbreviation}
\index{command!abbreviation}
All components can be {\bf abbreviated} to their shortest unambiguous form. 
For example the two following
lines will have the same effect of creating a vector \Lit{A} with
nine components:
\begin{XMP}
     \Ucom{VECTOR/CREATE A(9)}
{\rm or}
     \Ucom{VE/CR A(9)}
\end{XMP}
\index{command!parameter!mandatory}
\index{command!parameter!optional}
In the case that the form is ambiguous all possible interpretations
for the given abbreviation are displayed.
 
The second part of a command are its {\bf parameters} and their meaning
is determined by their {\bf position}.
\index{mandatory parameter}
\index{optional parameter}
Some of these can be {\bf mandatory}
with the remaining ones {\bf optional}.
If all mandatory parameters are not provided on the command line,
PAW will prompt the user to specify them, indicating
the default values if defined.
If the user wants
to assign the default value to a parameter from the command line
he can use the {\bf place-holder} character
{\bf exclamation mark (!)} to signify this to PAW.
\index{place-holder!exclamation mark character}
\index{exclamation mark character!place-holder}
In the case of optional parameters, the user {\bf must} provide them
in the correct sequence if he wants to {\bf change} their values,
otherwise the corresponding defaults are taken.
Parameters containing blanks must be enclosed within single quotes.
 
In the example below we create a one-dimensional histogram,
providing the parameters one by one answering the PAW query:
\begin{XMP}
      PAW > \Ucom{histogram/create/1dhisto}
      Histogram Identifier (<CR>= ): \Ucom{10}
      Histogram title (<CR>= ): \Ucom{title1}
      Number of channels (<CR>=100): \Ucom{<CR>}
      Low edge (<CR>=0): \Ucom{10.}
      Upper edge (<CR>=100): \Ucom{20.}
\end{XMP}
On the command below
we provide all parameters on the command line, including
an optional one (\Lit{1000.}),
which by default has the value \Lit{0}.
Note that this parameter {\bf must} be specified
explicitly, since PAW {\bf does not} prompt for it,
as seen in the previous example.
Note also the use of the exclamation mark to take the default for the
number of channels (\Lit{100}).
\begin{XMP}
      PAW > \Ucom{hi/cr/1d 20 title2 ! 10. 20. 1000.}
\end{XMP}

\section{Getting help}
\label{sec:GETHELP}
 
Once inside PAW, one can start entering commands.
An interesting first try would be the \Ucom{HELP} command,
\index{HELP}
which displays a list of items, preceded by a number
and followed by one line of explanation.
In the next example we search for a command to
create a one-dimensional histogram.
\begin{XMP}
\scriptsize      PAW > \Ucom{help}
 
 From  /...
 
  1:   KUIP          Command Processor commands.
  2:   MACRO         Macro Processor commands.
  3:   VECTOR        Vector Processor commands.
  4:   HISTOGRAM     Manipulation of histograms, Ntuples.
  5:   FUNCTION      Operations with Functions. Creation and plotting.
  6:   NTUPLE        Ntuple creation and related operations.
  7:   GRAPHICS      Interface to the graphics packages HPLOT and HIGZ.
  8:   PICTURE       Creation and manipulation of HIGZ pictures.
  9:   ZEBRA         Interfaces to the ZEBRA RZ, FZ and DZ packages.
 10:   FORTRAN       Interface to the COMIS FORTRAN interpreter.
 11:   NETWORK       To access files on remote computers.
 
 Enter a number ('\bs'=one level back, 'Q'=command mode): \Ucom{4}
 
    /HISTOGRAM
 
    Manipulation of histograms, Ntuples.
    Interface to the HBOOK package.
 
 From  /HISTOGRAM/...
 
  1: * FILE           Open an HBOOK direct access file.
  2: * LIST           List histograms and Ntuples in the current directory.
  3: * DELETE         Delete histogram/Ntuple ID in Current Directory (memory).
  4: * PLOT           Plot a single histogram or a 2-Dim projection.
  5: * ZOOM           Plot a single histogram between channels ICMIN and ICMAX.
  6: * MANY_PLOTS     Plot one or several histograms into the same plot.
  7: * PROJECT        Fill all booked projections of a 2-Dim histogram.
  8: * COPY           Copy a histogram (not Ntuple) onto another one.
  9: * FIT            Fit a user defined (and parameter dependent) function
 10:   2D_PLOT        Plotting of 2-Dim histograms in various formats.
 11:   CREATE         Creation ("booking") of HBOOK objects in memory.
 12:   HIO            Input/Output operations of histograms.
 13:   OPERATIONS     Histogram operations and comparisons.
 14:   GET_VECT       Fill a vector from values stored in HBOOK objects.
 15:   PUT_VECT       Replace histogram contents with values in a vector.
 16:   SET            Set histogram attributes.
 
 Enter a number ('\bs'=one level back, 'Q'=command mode): \Ucom{11}
 
    /HISTOGRAM/CREATE
 
    Creation ("booking") of new HBOOK objects.
 
 From  /HISTOGRAM/CREATE/...
 
  1: * 1DHISTO          Create a one dimensional histogram.
  2: * PROFILE          Create a profile histogram.
  3: * BINS             Create a histogram with variable size bins.
  4: * 2DHISTO          Create a two dimensional histogram.
  5: * PROX             Create the projection onto the x axis.
  6: * PROY             Create the projection onto the y axis.
  7: * SLIX             Create projections onto the x axis, in y-slices.
  8: * SLIY             Create projections onto the y axis, in x-slices.
  9: * BANX             Create a projection onto the x axis, in a band of y.
 10: * BANY             Create a projection onto the y axis, in a band of x.
 11: * TITLE_GLOBAL     Set the global title.
 
 Enter a number ('\bs'=one level back, 'Q'=command mode): \Ucom{1}
 
  * /HISTOGRAM/CREATE/1DHISTO  ID TITLE NCX XMIN XMAX \lsb  VALMAX \rsb
 
    ID         C 'Histogram Identifier'
    TITLE      C 'Histogram title' D=' '
    NCX        I 'Number of channels' D=100
    XMIN       R 'Low edge' D=0
    XMAX       R 'Upper edge' D=100
    VALMAX     R 'Valmax' D=0
 
    Creates a one dimensional histogram. The contents are set to zero.
    If VALMAX=0, a full word is allocated per channel, else VALMAX is used as the maximum
    bin content allowing several channels to be stored into the same machine word.
\end{XMP}
The meaning of the notation used in the text displayed by the \Lit{HELP}
command is explained on page \ref{sec:CDFHELP}. 
Moreover an item preceded by a {\bf star} indicates
a {\bf terminal leaf} in the command tree,
i.e. an {\bf executable} command 
(see on Page~\pageref{sec:HCOTREE} for more details).
 
One can also inquire about {\bf creating a one-dimensional histogram}
by typing simply:
\begin{XMP}
      \Ucom{HELP histogram/create/1dhisto}
{\rm or}
      \Ucom{HELP his/cre/1d}
{\rm or even}
      \Ucom{HELP 1}
\end{XMP}
The system will then display the following information:
\begin{XMP}
\footnotesize  * /HISTOGRAM/CREATE/1DHISTO  ID TITLE NCX XMIN XMAX \lsb  VALMAX \rsb
 
    ID         C 'Histogram Identifier'
    TITLE      C 'Histogram title' D=' '
    NCX        I 'Number of channels' D=100
    XMIN       R 'Low edge' D=0
    XMAX       R 'Upper edge' D=100
    VALMAX     R 'Valmax' D=0
 
    Creates a one dimensional histogram. The contents are set to zero.
    If VALMAX=0, a full word is allocated per channel, else VALMAX is used as the maximum
    bin content allowing several channels to be stored into the same machine word.
\end{XMP}

\subsection{Usage}
 
Very often a single line description of the usage of a command 
is sufficient as a reminder. 
This can be obtained by the \Ucom{USAGE} command, e.g.:
\index{USAGE command}
\begin{XMP}
      PAW > \Ucom{USAGE 1d}
 
      * /HISTOGRAM/CREATE/1DHISTO  ID TITLE NCX XMIN XMAX \lsb  VALMAX \rsb
\end{XMP}

\section{Special symbols for PAW}
\label{sec:SPESYMB}
 
\index{symbols}
\index{special symbols}
One should pay attention to the fact that, 
in addition to their common arithmetic meaning,
the symbols in table \ref{tab:KUIPSYS} 
have a special connotation when working with PAW .

\begin{table}[htb]
\begin{center}
\begin{tabular}{|>{\tt}l|l|}
\hline
\multicolumn{1}{|c|}{\bf Symbol} &
\multicolumn{1}{c|}{\bf Meaning}                                        \\
\hline
blank & Separator between command and parameter and between different
        parameters                                                      \\
/     & Separator between command elements                              \\
*     & Comment line (if first character of the command line)           \\
|     & Inline comments                                                 \\
'     & String delimiter                                                \\
\us   & Line continuation in KUIP commands                              \\
\commat& Escape character to be put in front of \Lit{|} and \Lit{'}
         to interpret them as literal                                   \\
!     &  Place-holder for command parameter (i.e. default value is taken)\\
      &  At beginning of command line: Unix C shell-like {\bf history}  \\ 
      &  (e.g. \Lit{!!, !number, !-number, !string})                    \\
\lsqb  \rsqb & Macro argument delimiters                                \\
\num  & Separator between macro file and macro member                   \\
( )   & Vector subscript delimiters                                     \\
:     & Vector subscript range                                          \\
,     & Multi-dimensional vector subscript dimensions delimiter         \\
\hline
\multicolumn{2}{|l|}{{\bf Note:} These special characters
loose their effect when imbedded in single quotes.}                     \\
\hline
\end{tabular}
\end{center}
\caption{Special symbols}
\label{tab:KUIPSYS}
\end{table}

\section{PAW entities and their related commands}
\label{sec:ENTITY}

Relations which exist between various PAW entities as described in section 
\ref{sec:pawstructure} on page~\pageref{sec:pawstructure}
and the operations which can be performed upon them have been
schematically represented in figure \ref{fig:PAWCOM}.
All commands shown in the picture next to the lines connecting the objects
have been abbreviated in a way that
they are unambiguous and can be typed to PAW, which will then
detail the various parameters to be supplied.
 
There are three main input/output formats, namely a simple text
file (e.g. with data points or commands), a direct access ZEBRA RZ file
(used by HBOOK and HIGZ for storing histograms and pictures on a given
machine) and a ZEBRA FZ sequential file, which can be used to transfer
structured ZEBRA data between various computers.
The RZ and FZ representations can be transformed into each other
using the TOALFA and FRALFA commands.
\index{ZEBRA!TOALFA}
\index{ZEBRA!FRALFA}
\index{ZEBRA!RZ file}
\index{ZEBRA!FZ file}
\index{text!data}
 
The three main PAW objects, Ntuples, histograms and vectors, can be
{\bf printed} on an alphanumeric screen (\Ucom{PRINT}
commands) or they can be plotted on a graphics screen (\Ucom{PLOT}
commands). 
The picture can be transformed into a ZEBRA data structure
and stored in a HIGZ database for later reference (e.g. editing by the
HIGZ editor), or an external presentation can be obtained via the
\index{metafile}
creation of a {\bf metafile}. 
This ``metafile'' can for instance consist of GKS
or PostScript commands, which can then be interpreted by the relative
drivers and printed on an output device, if so desired.
\index{PAW!object}
\index{PRINT!commands}
\index{PLOT!commands}
\index{HIGZ}
\index{metafile}
\index{PostScript}
\index{GKS}
\index{PAW!entities}

\begin{figure}[p]
\begin{center}
\mbox{\epsfig{figure=\EPSFIGpath/pawcom.eps,width=14cm}}
\end{center}
\caption{PAW entities and their related commands}
\label{fig:PAWCOM}
\end{figure}
 

@
