%!PS-Adobe-2.0 EPSF-2.0
%%Title: chainlmenu.eps
%%Creator: xpick Version 1.00  Rev: 22/03/93 - by Evgeni Chernyaev
%%BoundingBox: 236 363 375 428
%%EndComments
%***********************************************************************
%*                                                                     *
%* Object: Image decoding PS-routine                                   *
%* Author: Evgeni CHERNYAEV (chernaev@vxcern.cern.ch)                  *
%*                                                                     *
%* Function: Display a Lempel-Ziv Welch (LZW) encoded color image.     *
%*           The image is displayed in color on viewers and printers   *
%*           that support color Postscript, otherwise it is displayed  *
%*           as grayscale.                                             *
%*                                                                     *
%***********************************************************************
/CriticalSize 300000 def
systemdict /colorimage known { /incr 3 def } { /incr 1 def } ifelse
/Length 81 81 mul def
/Table Length array def
/Prefix Length array def
/Length Length incr mul def
/String Length string def
%***********************************************************************
/ReadCode                % Read next code from file                    *
%***********************************************************************
{
  { currentfile read pop
    dup dup 42 ge exch 123 lt and { exit } { pop } ifelse
  } loop
  42 sub 81 mul
  currentfile read pop 42 sub add
  /CurCode exch def
} bind def
%***********************************************************************
/DecodeCodeA             % Decode CurCode (fast, but memory demanding) *
%***********************************************************************
{
  ReadCode
  CurCode Ncol eq {
    ReadCode
    /FreeCode Ncol 1 add def
  }{
    //Table FreeCode L incr add string
    dup 0 Table OldCode get putinterval
    dup L Table CurCode FreeCode lt { CurCode } { OldCode } ifelse get
    0 incr getinterval putinterval put
    /FreeCode FreeCode 1 add def
  } ifelse
  /OldCode CurCode def
  Table CurCode get dup length /L exch def
} bind def
%***********************************************************************
/DecodeCodeB         % Decode CurCode (not memory demanding, but slow) *
%***********************************************************************
{
  /iout //Length //incr sub def
  ReadCode
  CurCode Ncol eq {
    /FreeCode Ncol 1 add def
    ReadCode
    /OldCode CurCode def
    /FinChar CurCode def
    String iout Table CurCode get putinterval
  }{
    /InCode CurCode def
    CurCode FreeCode eq {
      /CurCode OldCode def
      String iout Table FinChar get putinterval
      /iout iout //incr sub def
    } if
    iout //incr neg 0 {
      CurCode Ncol lt { exit } if
      String exch Table CurCode get putinterval
      /CurCode Prefix CurCode get def
    } for
    /iout exch def
    /FinChar CurCode def
    String iout Table FinChar get putinterval
    Prefix FreeCode OldCode put
    Table FreeCode Table FinChar get put
    /FreeCode FreeCode 1 add def
    /OldCode InCode def
  } ifelse
  String iout //Length iout sub getinterval
}bind def
%***********************************************************************
/DisplayImage            % Display a LZW-encoded color image           *
%***********************************************************************
{
  gsave
  /buffer 72 string def
  currentfile buffer readline pop
  token { /degrees exch def pop } { } ifelse
  degrees rotate
  currentfile buffer readline pop
  token { /x exch def } { } ifelse
  token { /y exch def pop } { } ifelse
  x y translate
  currentfile buffer readline pop
  token { /x exch def } { } ifelse
  token { /y exch def pop } { } ifelse
  x y scale
  currentfile buffer readline pop
  token { /columns exch def } { } ifelse
  token { /rows exch def pop } { } ifelse
  currentfile buffer readline pop
  token { /Ncol exch def pop } { } ifelse
  systemdict /colorimage known {
    0 1 Ncol 1 sub {
      Table exch
      currentfile 3 string readhexstring pop put
    } for
    columns rows mul CriticalSize lt {
      columns rows 8
      [ columns 0 0 rows neg 0 rows ]
      { DecodeCodeA } false 3 colorimage
    }{
      columns rows 8
      [ columns 0 0 rows neg 0 rows ]
      { DecodeCodeB } false 3 colorimage
    } ifelse
  }{
    /color 3 string def
    0 1 Ncol 1 sub {
      Table exch
      1 string dup 0
      currentfile color readhexstring pop pop
      color 0 get 0.299 mul
      color 1 get 0.587 mul add
      color 2 get 0.114 mul add
      cvi put put
    } for
    columns rows mul CriticalSize lt {
      columns rows 8
      [ columns 0 0 rows neg 0 rows ]
      { DecodeCodeA } image
    }{
      columns rows 8
      [ columns 0 0 rows neg 0 rows ]
      { DecodeCodeB } image
    } ifelse
  } ifelse
  grestore
} bind def
%***********************************************************************
%*                          Image decoding                             *
%***********************************************************************
DisplayImage
0.00
236.50 363.50
139.00 65.00
139 65
256
000000 ffffff 00ffff 9f0028 870022 d18598 460012 ffffff 53559e 474887
b0b1d3 28294c ffffff e1e3bc bfc1a0 f2f3e3 7e7f69 000000 f0b550 cc9a44
f8dfb2 7f602a ffffff 645fa2 55518a b8b5d4 312e50 ffffff b53560 9a2d51
dda2b6 57192e ffffff 7f7f9b 6c6c84 c5c5d2 3f3f4e ffffff 700070 5f005f
ba85ba 320032 ffffff e1e3bc afafaf 7d7d7d 4b4b4b 969696 646464 c8c8c8
e1e1e1 323232 ff00ff ffff00 ff0000 0000ff 00ff00 71725e 7f7f7f f9f9f9
f3f3f3 ededed e7e7e7 dbdbdb d4d4d4 cecece c2c2c2 bcbcbc b6b6b6 b0b0b0
aaaaaa a4a4a4 9e9e9e 989898 929292 8c8c8c 868686 808080 797979 737373
6d6d6d 676767 616161 5b5b5b 555555 4f4f4f 494949 434343 3d3d3d 373737
313131 2b2b2b 242424 1e1e1e 181818 121212 0c0c0c 060606 0000cc 0013cc
0027cc 003acc 004ecc 0061cc 0075cc 0088cc 009bcc 00afcc 00c2cc 00ccc2
00ccaf 00cc9b 00cc88 00cc75 00cc61 00cc4e 00cc3a 00cc27 00cc13 00cc00
13cc00 27cc00 3acc00 4ecc00 61cc00 75cc00 88cc00 9bcc00 afcc00 c2cc00
ccc200 ccaf00 cc9b00 cc8800 cc7500 cc6100 cc4e00 cc3a00 cc2700 cc1300
d9dcc7 f0af3a bc2458 7875b8 00004d 6666ff 9999ff 666666 698b22 cd950c
cd1076 4f94cd 008b8b 008b00 ff4500 007f00 007f7f 007ffe 00fe00 00fe7f
00fefe 7f0000 7f007f 7f00fe 7f7f00 7f7ffe 7ffe00 7ffe7f 7ffefe fe0000
fe007f fe00fe fe7f00 fe7f7f fe7ffe fefe00 fefe7f f7deb1 072f64 7f602a
802f64 efb450 3f3f00 3f3f3f 3f3f7f 3f3fbe 3f3ffe 3f7f00 3f7f3f 3f7f7f
3f7fbe 3f7ffe 3fbe00 3fbe3f 3fbe7f 3fbebe 3fbefe 3ffe00 3ffe3f 3ffe7f
3ffebe 3ffefe 7f0000 7f003f 7f007f 7f00be 7f00fe 7f3f00 7f3f3f 7f3f7f
7f3fbe 7f3ffe 7f7f00 7f7f3f 7f7fbe 7f7ffe 7fbe00 7fbe3f 7fbe7f 7fbebe
7fbefe 7ffe00 7ffe3f 7ffe7f 7ffebe 7ffefe be0000 be003f be007f be00be
be00fe be3f00 be3f3f be3f7f be3fbe be3ffe be7f00 be7f3f be7f7f be7fbe
be7ffe bebe00 bebe3f bebe7f bebebe bebefe befe00 befe3f befe7f befebe
befefe fe0000 fe003f fe007f fe00be fe00fe
-7*>-8-9-:-;-<-=->-?-@-A-B-C-D-E-F-G-H-I-J-K-L-M*>*?-8*<-R-S-T-U-V-W-X-Y
-Z-[-\-]-^-_-_*?-P*>-`-e-f-g-h-i-j-R-b-Q-k-o-p-q-r-Y-m-d-Z**-x-^-y-s.+-_
-x.*-e./-T-u-V..**-R.1.+.5.8-T.;-k.6-U.?.7.A-z..-W.3.<.?-y.=-r.*.C.@.N.>
.N.1.K-[.=.G-S.M.6.J.A.5.B.Y*<.E-Y./.[.I.:.`.Z.:.h.P.H.O.l.g.j.d.n-U.W.B
.O.h.m.u.^.g.b.a.E._.H.Z/*/1-X.8/4.\.e.o/2.V-c.x.X/7.o.c/6.y-W.J.y/./=.n
.k.r/B/B._/F/:-n/G/*/M/>/9/T.4.C/./5.v/I/K/2/Q/1.[/L.k.t/`.w/R/T/@/]/H/e
/E/].a/+/</_/S/b.F/;/[/8/,.i/z/a/C0*/f/8/?/X/\/^03.i.z.f.d/o-l/v.,0<-].T
/n02-r/d0=0D/W.U.40E.20;0I0L/?0M-g0C0O0R0S-\0Q0T0W0X0:-8-b0\0]0^0_0`0a0b
0c0d0e0f0g0h0i-u-N0l0m0n0o-;0V0Y0s0O0r0t0w0D0v0x1*-s0z1+1.-k1-1/12-f1103
1317.s0K.]-f0?180S/d1=/p1>0x1@.R0907.f1C0Y1E0,/=.I/j1J0T1L0F1N/A1Q0s1S/q
.z161W0R1S01/Q/Y1]1R1:1I050N1N1c1d/P1j1m-S151n171p1q12.t0*1t1r0K1x1]1s2*
1*2,2-0w2/201X1z231>22260W28291?252<1u2>-\1;0I09-w0A241l1g1B2K-`1;1A-i2J
1T-h1_021=2O.x0+0=.M2L141z/Y1G01.Y2N2E/H.w/@2b/72d.r.q002f05092T/l/t2r/E
/I/50.2s/x/\2c/f2w.`2t0Z-v1a.p/i.^/y//2j04/>1I/U1P.u3:/V/^2[191l/l.=34/J
1A/s/g2y/F2R2r/Z37-V2q/N1V1b3M2e3E/h3U3*1O2_.70@/c1e2C3+/y.S2g2U/-2l0-/z
1\2m.]2g351`3R2A2?0S.K2;3u-q3w3t3y0L2C0J2I3l4,2:4+421K4445433D4821-c0j4>
4?4@4A4B4@-O4C4F4G4H4I0e
showpage
%%Trailer
