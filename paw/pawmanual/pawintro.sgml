<?.*****************************************************************>
<?.* PAW   User's Guide - Part 1   --- Introduction chapter        *>
<?.*  Last Mod.   10 Oct 1989  21.35   mg                          *>
<?.*****************************************************************>
<H1 ID=intro>A few words on PAW
<P>
Personal workstations
equipped with a 1 Mbit bitmap display, a speed of more than 4 MIPS,
<I1>workstation
<I1>MIPS
with at least 8 Mbytes of main memory and 150 Mbytes of local disk
space (e.g. APOLLO, SUN, DEC and VAX workstations)
are now becoming available at an affordable price for individual users.
In order to exploit the full functionality of these workstations, at the
beginning of 1986 the <HP2>P</HP2>hysics <HP2>A</HP2>nalysis
<HP2>W</HP2>orkstation project
<HP2>PAW</HP2> was launched at CERN. The first
public release of the system was made at the beginning of 1988. At
present the system runs on most of the computer systems used in the
High Energy Physics (HEP) community
but its full functionality is better exploited on
personal workstations. In addition to its powerful data analysis,
particular emphasis has been put on the
quality of the user interface and of the graphical presentation.
<H2 ID=PAWTERM SUBJECT='PAW terminology'>PAW terminology
<P>
PAW is a system for the interactive analysis of data, which
integrates various data management and data presentation
tools and packages, developed mainly for High Energy
Physics applications over the last few years.
Therefore, a number of terms used in this manual may sound unfamiliar
to the non-HEP user, or they may have a meaning
which is not rigorously the same as used
in other fields.
Several terms used in the next sections are defined below.
<DL TSIZE=11>
<DT>Histogram
<I1>histogram
<DD>A one- or two-dimensional array of data, generated
by HBOOK in batch or in a PAW session. Histograms are (implicitly or
explicitly) declared (booked), filled by explicit entry of data
or can be derived from other histograms. The information stored
about a histogram includes a title, binning and packing definitions,
bin contents and errors, statistic values, possibly an
associated function vector and output attributes.
Some of these items are optional.
The ensemble of this information constitutes an <HP2>histogram</HP2>.
<I1>histogram
<DT>Booking
<I1>book histogram
<DD>The operation of declaring (creating) an histogram.
<DT>Filling
<I1>fill histogram
<DD>The operation of entering data values into a given histogram.
<DT>Fitting
<I1>fit
<DD>Least squares and maximum likelihood fits of
parametric functions to histograms and vectors.
<DT>Projection
<I1>projection
<DD>The operation of projecting two-dimensional
distributions onto both axes.
<DT>Band
<DD>A band is a projection onto the X (or Y) axis
restricted to an interval
<I1>band
along the other Y (or X) axis.
<DT>Slice
<DD>A slice is a projection onto the X (or Y) axis restricted to one bin
<I1>slice
along the other Y (or X) axis.
Hence a slice is a special case of a band, with
the interval limited to one bin.
<DT>Ntuple
<I1>ntuple
<DD>Two-dimensional array, characterised by a
<HP2>fixed</HP2> number N, specifying the number of entries per element,
and by a <HP2>length</HP2>, giving the
total number of elements. An element of a Ntuple can be thought of
as a physics event.
Selection criteria can be applied to each entry of an element and
a complete Ntuple can be analysed in a fast, efficient
and interactive way.
<DT>DST
<I1>DST
<DD>Data Summary Tape, also, Data Summary File. A collection of experimental data,
organized in a sequential way.
<DT>Event
<I1>event
<DD>A subset of data in a DST, related to a particular physics event.
<DT>Cut
<I1>cut
<DD>A selection function used when analysing Ntuples.
<DT>Mask
<I1>mask
<DD>A file containing a bit pattern for each element of a Ntuple
corresponding to the result of selection criteria applied to the Ntuple.
<DT>Macro
<I1>macro
<DD>A text file containing PAW commands and logical constructs to control
the flow of execution. Parameters can be supplied to it when calling
the macro.
<DT>Vector
<I1>vector
<DD>The equivalent of a FORTRAN array supporting up to three dimensions.
The elements of a vector can be stored using a real or an
integer representation;
they can be entered interactively on a terminal or read
from an external file.
<DT>GKS
<I1>GKS
<DD>The <HP2>G</HP2>raphical <HP2>K</HP2>ernel <HP2>S</HP2>ystem is
ISO standard
document ISO&nbsp;8805. It defines a common
interface to interactive computer graphics for application programs.
<DT>Metafile
<I1>metafile
<DD>A file containing graphical information
stored in a device independent format,
which can be replayed on various types of output devices.
(e.g. the GKS Appendix E metafile and PostScript, both used at CERN).
<DT>Picture
<I1>picture
<DD>A graphics object composed of graphics primitives and attributes.
Pictures are generated by
the HIGZ graphics interface and they can be stored in a picture
direct-access database, built with the RZ-package of the
data structure manager ZEBRA.
<DT>PostScript
<I1>PostScript
<DD>A page description language in wide spread use on many laser printers,
e.g. the popular Apple Laserwriter. The pictures and text of this manual
have been produced in that language.
<DT>Function
<I1>function
<DD>Sequence of one or more statements with a FORTRAN-like syntax
entered on the command line or via an external file.
</DL>
<H2 SUBJECT='The structure of the PAW system'>The structure of the PAW system
<I1>structure of PAW
<P>
The PAW system combines different tools and packages, which
can also be used independently and some of which have already
a long history behind them (e.g. HBOOK and
HPLOT, SIGMA, MINUIT). The PAW environment assists
physicists in the analysis and presentation of their data.
It provides interactive graphical presentation, statistical and
mathematical tools. In principle PAW should be useful to any
physicist with only a basic knowledge of computers.
Indeed, to help the novice, extensive online guidance is built into
the user interface and, if needed, a menu based dialogue
can be requested. On the other hand, due to its
extensibility with macros and user functions via the FORTRAN
COMIS interface, PAW can become a powerful and efficient tool in the
hands of a more experienced user.
<P>On the inner front cover <HP2>the various components of PAW</HP2>
<I1>components of PAW
are shown schematically.
All these components are available in a library and can be called
from any user application program either in
<I1>batch
<I1>Interactive mode
batch or interactive mode. A short description of each of them follows.
<H3>KUIP - The user interface package
<I1>KUIP
<I1>Command Definition File (CDF)
<I1>CDF Command Definition File 
<I1>alias
<I1>abbreviation
<I1>macro
<I1>dialogue style
<I1>default setting
<I1>history file
<P>
The purpose of KUIP
(<HP2>K</HP2>it for a <HP2>U</HP2>ser
<HP2>I</HP2>nterface <HP2>P</HP2>ackage) is to handle
the dialogue between the user and the application program (PAW
in our case). It
parses the commands input into the system, verifies them for
correctness and then hands over control to the relevant action
routines.
<P>The syntax for the commands accepted by KUIP is specified using
a <HP2>Command Definition File</HP2> (CDF)
and the information provided is stored in a
ZEBRA data structure, which is accessed not only during the
parsing stage of the command but also when the user invokes the
<I1>online help
<HP2>online help</HP2> command.
<I1>command abbreviation
Commands are grouped in a tree structure and they can be
<HP2>abbreviated</HP2> to their shortest unambiguous
form. If an ambiguous command is typed, then KUIP responds by showing
all the possibilities.
<I1>alias
<HP2>Aliases</HP2> allow the user to abbreviate part or the whole
of commonly used command and parameters.
A sequence of PAW commands can be stored in a text file and, combined
with flow control statements, form a powerful <HP2>macro</HP2> facility.
<I1>macro
<i1>parameter
With the help of <HP2>parameters</HP2>,
whose values can be passed to the macros, general and adaptable
task solving procedures can be developed.
<P>Different <HP2>styles of dialogue</HP2>
(command and various menu modes) are available
<i1>menu
and the user can switch between them at any time.
In order to save typing, <HP2>default values</HP2>,
providing reasonable settings, can be used for most
<i1>history file
parameters of a command. A <HP2>history file</HP2>,
containing the <XPH><HP3>n</HP3></XPH> most recently entered
commands, is automatically kept by KUIP
and can be inspected, copied or re-entered at any time.
The history file of the last PAW session is also kept on disk.
<?.CC 30>
<H3>HBOOK and HPLOT - The histograming and plotting packages
<P>
<I1>HBOOK
<I1>HPLOT
HBOOK and its graphics interface
HPLOT are libraries of FORTRAN callable
subroutines which have been
in use for many years.
They provide the following functionality:
<UL>
<LI>One- and two-dimensional histograms and Ntuples
<LI>Projections and slices of two-dimensional histograms and Ntuples
<LI>Complete control (input and output) of the histogram contents
<LI>Operations and comparison of histograms
<LI>Minimization and parameterization tools
<LI>Random number generation
<LI>Histograms and Ntuples structured in memory (directories)
<LI>Histograms and Ntuples saved onto direct access ZEBRA files
<LI>Wide range of graphics options:
<UL COMPACT>
<LI>Normal contour histograms, bar chart, shaded histograms, error bars, colour
<LI>Smoothed curves and surfaces
<LI>Scatter, lego, contour and surface plots
<LI>Automatic windowing
<LI>Graphics input
</UL>
</UL>
<H3>HIGZ - The graphics interface package
<P>
<I1>HIGZ
A <HP2>H</HP2>igh level
<HP2>I</HP2>nterface to <HP2>G</HP2>raphics and <HP2>Z</HP2>EBRA
(HIGZ) has been developed within the PAW project. This package is
a layer between the application program (e.g. PAW) and the basic
graphics package (e.g. GKS) on a given system. Its basic aims are:
<UL>
<LI>Full transportability of the picture data base.
<LI>Easy manipulation of the picture elements.
<LI>Compactness of the data to be transported and accessibility
of the pictures in direct access mode.
<LI>Independence of the underlying basic graphics package.
Presently HIGZ is interfaced with several GKS packages (GKSGRAL, DECGKS,
PLOT10GKS, MGKS, UNIGKS, SUNGKS, NOVAGKS) as well as with the DI3000 system
and the Apollo GMR3D package.
</UL>
These requirements have been incorporated into HIGZ by exploiting
the data management system ZEBRA.
<P>The implementation of HIGZ was deliberately chosen to be close to
GKS.
<I1>GKS
HIGZ does not introduce new basic graphics features, but introduces
some macroprimitives for frequently used functions
(e.g. arcs, axes, boxes, pie-charts, tables). The system
provides the following features:
<UL>
<LI>Basic graphics functions, interfaced to the local graphics package,
but with calling sequences nearly identical to those of GKS.
<LI>Higher-level macroprimitives.
<LI>Data structure management using an interface to the ZEBRA system.
<LI>Interactive picture editing.
</UL>
These features, which are available simultaneously, are
particularly useful during
an interactive session, as the user is able to
<Q>replay</Q> and
edit previously created pictures, without the need to re-run
the application program. A direct interface to PostScript is also
available.
<?.CC 50>
<H3>ZEBRA - The data structure management system
<P>
<I1>ZEBRA
The data structure management package ZEBRA
was developed at CERN in order to overcome the lack of dynamic
data structure facilities in FORTRAN, the favourite computer language
in high energy physics. It implements the <HP2>dynamic
creation and modification</HP2> of data structures at execution time
and their transport
to and from external media on the same or different computers, memory
to memory, to disk or over the network, at an
<HP2>insignificant cost</HP2> in terms of execution-time overheads.
<P>ZEBRA manages any type of structure, but specifically
supports linear structures (lists) and trees.
ZEBRA input/output is either of a sequential or direct access type.
Two data representations,
<HP2>native</HP2> (no data conversion when transferred to/from the
external medium) and <HP2>exchange</HP2> (a conversion to an
interchange format is made), allow data to be transported between
computers of the same and of different architectures.
The direct access package <HP2>RZ</HP2> can be used
to manage hierarchical data bases. In PAW this facility is exploited
to store histograms and pictures in a hierarchical direct access
directory structure.
<H3>MINUIT - Function minimization and error analysis
<I1>MINUIT
<I1>fit
<I1>statistic analysis
<i1>minimisation
<I1>chisquare
<I1>correlation
<P>
MINUIT is a tool to find the <HP2>minima of a
multi-parameter function</HP2> and
analyse the <HP2>shape around the minimum</HP2>. It can be used for
<HP2>statistical analysis</HP2> of
curve fitting, working on a <F>chi sup <2></F> or log-likelihood function,
to compute the <HP2>best fit</HP2> parameter values, their uncertainties and
correlations. <HP2>Guidance</HP2> can be provided in order to find the
correct solution, parameters can be kept fixed and data points
can be easily added or removed from the fit.
<H3>COMIS - The FORTRAN interpreter
<P>
<I1>COMIS
The COMIS
interpreter allows the user to execute interactively
a set of FORTRAN routines in interpretive mode.
The interpreter implements a large subset of the complete FORTRAN
language. It is an extremely important tool because
it allows the user
to specify his own complex data analysis procedures, for example
selection criteria or a minimisation function.
<H3>SIGMA - The array manipulation language
<P>
<I1>SIGMA
A scientific computing programming language SIGMA
(<HP2>S</HP2>ystem for <HP2>I</HP2>nteractive
<HP2>G</HP2>raphical <HP2>M</HP2>athematical
<HP2>A</HP2>pplications),
which was designed essentially for mathematicians and
theoretical physicists and has been in use at CERN for over 10 years,
has been integrated into PAW.  Its main characteristics are:
<UL>
<LI>The basic data units are scalars and one or more dimensional
rectangular arrays, which are automatically handled.
<LI>The computational operators resemble those of FORTRAN.
</UL>
