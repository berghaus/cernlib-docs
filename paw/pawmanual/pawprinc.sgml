<?.*****************************************************************>
<?.* PAW   User's Guide - Part 1  --- Principles chapter           *>
<?.*  Last Mod.   15 Nov 1989  15.40   mg                          *>
<?.*****************************************************************>
<H1 ID=PRINCIP STITLE="General Principles">General principles
<H2 ID=PACCESS SUBJECT='Access to PAW'>Access to PAW
<P>At <HP2>CERN</HP2> PAW is currently implemented on Apollo,
VAX/VMS and IBM/VM-CMS.
The GKSGRAL package is used on these three systems.
<I1>GKS
<IH1>GKS
<I1>GKSGRAL
<H3>VAX/VMS
<I1>VAX
<I1>VMS
<P>
We suggest that the following is defined
in the <XPH><HP2>LOGIN.COM </HP2></XPH>file:
<XMP>
   $ PAW:==$DISK$DL&colon;&lsqb;PAW&rsqb;PAW
   $! define location of PAWLOGON.KUMAC (see <HDREF REFID=INITIAL>)
   $ PAW$LOGON:==disk:&lsqb;user.subdir&rsqb;file.kumac
</XMP>
<P>Enter <XPH><HP3>PAW</HP3></XPH> to start the program.
<P>Users interested in implementing PAW on another VAX system
are invited to read the file
<XPH><HP2>DISK$DL:&lsqb;PAW&rsqb;README.DOC</HP2></XPH> on the
<XPH><HP2>VXCERN</HP2></XPH> system.
<H3>IBM/VM-CMS
<I1>VM-CMS
<I1>IBM
<I1>CMS
<P>You need a machine size of at least 6M (set permanently with
<XPH><HP2>DIRM STOR 6M</HP2></XPH>, or for the session with
<XPH><HP2>DEF STOR 6M</HP2></XPH> and then <XPH><HP2>IPL CMS</HP2></XPH>).
<P>To start the program, enter:
<XMP>
<HP3>GIME PAW</HP3>    /* Get Access to the minidisk containing PAW */
<HP3>PAW</HP3>         /* Start the program */
</XMP>
<LBLBOX>Warning
When operating PAW make sure that your <XPH><HP2>PROFILE EXEC</HP2></XPH>
contains a statement
'<XPH><HP2>CP&nbsp;TERMINAL&nbsp;LINEND&nbsp;OFF</HP2></XPH>',
otherwise the # character
might be interpreted as end-of-line character.
</LBLBOX>
<P>Users interested in implementing PAW on another IBM system
are invited to read the file <XPH><HP2>README&nbsp;DOC</HP2></XPH>
on the PAW minidisk.
<H3>APOLLO
<I1>Apollo
<I1>Unix
<P>
In your <XPH><HP2>&tilde;/com</HP2></XPH> (Aegis) or <XPH><HP2>&tilde;/bin</HP2></XPH>
(Unix) directory create two files <XPH><HP2>pawlib</HP2></XPH> and <XPH><HP2>paw</HP2></XPH>,
which contain respectively:
<XMP>
     <HP2>pawlib</HP2>:          /cern/gks/pro/com/inlib_gks
                      inlib /user/paw/pawinlib
     <HP2>paw</HP2>   :          /user/paw/paw
</XMP>
<P>Once per process type the command <XPH><HP3>pawlib</HP3></XPH>.
Type <XPH><HP3>paw</HP3></XPH> to run PAW.
<P>Users interested in implementing PAW on another Apollo system
are invited to read the file <XPH><HP2>/user/paw/readme.doc</HP2></XPH>
on the CERN Domain network.
<H3>Non-central systems and non-CERN sites
<P>
Users who are not at CERN or who are using non-central
computer systems should contact their system
administrator for help on PAW.
<H3>Important notes for IBM/VM-CMS and Apollos users
<UL>
<I1>batch
<LI>A <HP2>batch</HP2>
version of PAW is available:
<XMP>
 On Apollo do:  <HP3>PAW -b macroname</HP3>
 On VMS    do:  <HP3>PAW/BATCH=macroname</HP3>
 On VM     do:  <HP3>PAW (BATCH=macroname</HP3>
</XMP>
<I1>PAWLOGON
<LI>One can <HP2>disable</HP2>
the automatic execution of the <XPH>PAWLOGON</XPH> macro:
<XMP>
 On Apollo do:  <HP3>PAW -n</HP3>
 On VMS    do:  <HP3>PAW/NOLOG</HP3>
 On VM     do:  <HP3>PAW (NOLOG</HP3>
</XMP>
</UL>
<H2 ID=INITIAL SUBJECT='Initialising PAW'>Initialising PAW
<P>
When <HP2>PAW</HP2> is started, a <HP2>system</HP2> startup
procedure is initiated, which indicates the current
version of PAW and requests the <HP2>workstation type</HP2> of
the terminal or workstation which you are using.
<I1>initialisation
<I1>workstation type
<XMP SCALE=0.9>
$ <HP3>PAW</HP3>
 ******************************************************
 *                                                    *
 *            W E L C O M E    to   P A W             *
 *                                                    *
 *         Version 1.07/01  10 October 1989           *
 *                                                    *
 ******************************************************
 Workstation type (?=HELP) &lsqb;CR&rsqb;=10002 :
</XMP>
<I1>GKS workstation type
<I1>GKSGRAL implementation
At CERN, with GKSGRAL, the following types
may be used (for more details, see <BIBREF REFID=GRACERN>):
<XMP>
<HP2>       0</HP2>:  Alphanumeric terminal
<HP2>    -111</HP2>:  HIGZ/PostScript driver (Portrait)
<HP2>    -112</HP2>:  HIGZ/PostScript driver (Landscape)
<HP2>     101</HP2>:  Tektronix 4010, 4014
<HP2>     102</HP2>:  Tektronix 4012
<HP2>     103</HP2>:  Tektronix 4014 with enhanced graphics option
<HP2>     121</HP2>:  Tektronix 4107, 4207, Pericom MX2000
<HP2>     122</HP2>:  Tektronix 4109
<HP2>     123</HP2>:  Tektronix 4111
<HP2>     125</HP2>:  Tektronix 4113
<HP2>     127</HP2>:  Tektronix 4115, Pericom MX8000
<HP2>    7800</HP2>:  MG600, MG200
<HP2>    7878</HP2>:  Falco, Pericom Graph Pac (old Pericom)
<HP2>  8601-6</HP2>:  Vaxstation GPX
<HP2> 10001-2</HP2>:  Apollo DNXXXX monochrome (GPR)
<HP2> 10003-4</HP2>:  Apollo DNXXXX colour (GPR)
<HP2>  9701-8</HP2>:  Apollo DNXXXX (GSR)
</XMP>
Note that if you specify <XPH><HP3>0</HP3></XPH>,
PAW will not open a graphics workstation.
This may be appropriate if one wants to use PAW on an alphanumeric
terminal.
<P>Before passing control to the user, the system looks for a user-supplied file
<XPH><HP2>pawlogon.kumac</HP2></XPH> or <XPH><HP2>PAWLOGON&nbsp;KUMAC&nbsp;(VM/CMS)</HP2></XPH>.
The latter can contain
commands which the user wants to be executed at PAW startup, e.g.
declaration of files, creation of aliases, definition of HPLOT parameters.
<I1>PAWLOGON
A simple version of this PAW initialisation file, displaying date
and time, can be:
<XMP>
mess '******************************************************'
mess '*                                                    *'
mess '*   Starting PAW session on '//$date//' at '//$time//'     *'
mess '*                                                    *'
mess '******************************************************'
</XMP>
<P>In order to
only have one version of this file on VAX/VMS the user should define
a <HP2>logical name</HP2> <XPH><HP2>PAW$LOGON</HP2></XPH> in his
<XPH><HP2>LOGIN.COM</HP2></XPH>,
as explained on the previous page.
On the Apollo the
file <XPH><HP2>pawlogon.kumac</HP2></XPH>, should be put into the
directory <XPH><HP2>user_data</HP2></XPH>.
On IBM/VM-CMS the minidisk file search rule takes
care of finding the file.
<?.PA>
<H2 ID=COMSTRU SUBJECT='Command structure'>Command structure
<I1>command structure
<P>
PAW is based on the KUIP<BIBREF REFID=KUIP> User Interface package,
which can provide different types of dialogue styles:
<UL>
<LI>Command mode,
where the user enters a command line via the terminal keyboard.
<LI>Alphanumeric menu mode,
where the command is selected from a list.
<LI>Graphics menu modes:
<I1>menu
<UL COMPACT>
<LI>Pull-down menus, fixed layout reflecting the command structure;
<I1>pull-down menu
<LI>Panels of function keys, interactive user definable multiple layouts.
<I1>panel menu
</UL>
</UL>
It is possible to change interactively from one style to another.
<P>
The general format of a PAW command line is:
<XMP>
     <HP3>command</HP3>  <HP3>parameters</HP3>
</XMP>
The first part of the <HP2>command</HP2> has the format:
<XMP>
     <HP3>object</HP3>/<HP3>verb</HP3>
</XMP>
where the <HP2>object</HP2>
is the item on which the action is performed
(e.g. <XPH><HP2>HISTOGRAM, VECTOR, NTUPLE</HP2></XPH>)
and the <HP2>verb</HP2> is the action to be performed (e.g.
<XPH><HP2>CREATE, DELETE, PLOT</HP2></XPH>). In some cases the object
needs to be
specified further (e.g. <XPH><HP2>GRAPHICS/PRIMITIVE</HP2></XPH>),
while in other cases
the verb's action needs to be clarified further
(e.g. <XPH><HP2>CREATE/1D</HP2></XPH>).
<I1>abbreviation
<I1>command abbreviation
All components can be <HP2>abbreviated</HP2> to their
shortest unambiguous form. For example the two following
lines will have the same effect of creating a vector A with
nine components:
<XMP>
     <HP3>VECTOR/CREATE A(9)</HP3>
or
     <HP3>VE/CR A(9)</HP3>
</XMP>
<IH1>command parameters
<I2>mandatory
<IH1>command parameters
<I2>optional
In the case that the form is ambiguous all possible interpretations
for the given abbreviation are displayed.
<P>The second part of a command are its <HP2>parameters</HP2> and their meaning
is determined by their <HP2>position</HP2>.
<I1>mandatory parameter
<I1>optional parameter
Some of these can be <HP2>mandatory</HP2>
with the remaining ones <HP2>optional</HP2>.
If all mandatory
parameters are not provided on the command line,
PAW will prompt the user to specify them, indicating
the default values if defined.
If the user wants
to assign the default value to a parameter from the command line
he can use the <HP2>place-holder</HP2> character
<HP2>exclamation mark (!)</HP2>
to signify this to PAW.
<I1>place-holder character
<I1>exclamation mark
In the case of optional parameters, the user <HP2>must</HP2> provide them
in the correct sequence if he wants to <HP2>change</HP2> their values,
otherwise the corresponding defaults are taken.
Parameters containing blanks must be enclosed within single quotes.
<P>In the example below we create a one-dimensional histogram,
providing the parameters one by one answering the
PAW query:
<XMP>
 PAW > <HP3>histogram/create/1dhisto</HP3>
 Histogram Identifier (&lt;CR&gt;= ): <HP3>10</HP3>
 Histogram title (&lt;CR&gt;= ): <HP3>title1</HP3>
 Number of channels (&lt;CR&gt;=100): <HP3>&lt;CR&gt;</HP3>
 Low edge (&lt;CR&gt;=0): <HP3>10.</HP3>
 Upper edge (&lt;CR&gt;=100): <HP3>20.</HP3>
</XMP>
On the command below
we provide all parameters on the command line, including
an optional one (<XPH><HP2>1000.</HP2></XPH>),
which by default has the value <XPH>0</XPH>.
Note that this parameter <HP2>must</HP2> be specified
explicitly, since PAW <HP2>does not</HP2> prompt for it,
as seen in the previous example.
Note also the use of the exclamation mark to take the default for the
number of channels (<XPH><HP2>100</HP2></XPH>).
<XMP>
 PAW > <HP3>hi/cr/1d 20 title2 ! 10. 20. 1000.</HP3>
</XMP>
<?.PA>
<H2 ID=GETHELP SUBJECT='Getting help'>Getting help
<P>
Once inside PAW, one can start entering commands.
An interesting first try would be the <XPH><HP2>HELP</HP2></XPH> command,
<I1>HELP command
which displays a list of items, preceded by a number
and followed by one line of explanation.
In the next example we search for a command to
create a one-dimensional histogram.
<XMP SCALE=0.75>
 PAW > <HP3>help</HP3>
 
 From  /...
 
  1:   KUIP          Command Processor commands.
  2:   MACRO         Macro Processor commands.
  3:   VECTOR        Vector Processor commands.
  4:   HISTOGRAM     Manipulation of histograms, Ntuples.
  5:   FUNCTION      Operations with Functions. Creation and plotting.
  6:   NTUPLE        Ntuple creation and related operations.
  7:   GRAPHICS      Interface to the graphics packages HPLOT and HIGZ.
  8:   PICTURE       Creation and manipulation of HIGZ pictures.
  9:   ZEBRA         Interfaces to the ZEBRA RZ, FZ and DZ packages.
 10:   FORTRAN       Interface to the COMIS FORTRAN interpreter.
 11:   NETWORK       To access files on remote computers.
 
 Enter a number ('\'=one level back, 'Q'=command mode): <HP3>4</HP3>
 
    /HISTOGRAM
 
    Manipulation of histograms, Ntuples.
    Interface to the HBOOK package.
 
 From  /HISTOGRAM/...
 
  1: * FILE           Open an HBOOK direct access file.
  2: * LIST           List histograms and Ntuples in the current directory.
  3: * DELETE         Delete histogram/Ntuple ID in Current Directory (memory).
  4: * PLOT           Plot a single histogram or a 2-Dim projection.
  5: * ZOOM           Plot a single histogram between channels ICMIN and ICMAX.
  6: * MANY_PLOTS     Plot one or several histograms into the same plot.
  7: * PROJECT        Fill all booked projections of a 2-Dim histogram.
  8: * COPY           Copy a histogram (not Ntuple) onto another one.
  9: * FIT            Fit a user defined (and parameter dependent) function
 10:   2D_PLOT        Plotting of 2-Dim histograms in various formats.
 11:   CREATE         Creation ("booking") of HBOOK objects in memory.
 12:   HIO            Input/Output operations of histograms.
 13:   OPERATIONS     Histogram operations and comparisons.
 14:   GET_VECT       Fill a vector from values stored in HBOOK objects.
 15:   PUT_VECT       Replace histogram contents with values in a vector.
 16:   SET            Set histogram attributes.
 
 Enter a number ('\'=one level back, 'Q'=command mode): <HP3>11</HP3>
 
    /HISTOGRAM/CREATE
 
    Creation ("booking") of new HBOOK objects.
 
 From  /HISTOGRAM/CREATE/...
 
  1: * 1DHISTO          Create a one dimensional histogram.
  2: * PROFILE          Create a profile histogram.
  3: * BINS             Create a histogram with variable size bins.
  4: * 2DHISTO          Create a two dimensional histogram.
  5: * PROX             Create the projection onto the x axis.
  6: * PROY             Create the projection onto the y axis.
  7: * SLIX             Create projections onto the x axis, in y-slices.
  8: * SLIY             Create projections onto the y axis, in x-slices.
  9: * BANX             Create a projection onto the x axis, in a band of y.
 10: * BANY             Create a projection onto the y axis, in a band of x.
 11: * TITLE_GLOBAL     Set the global title.
 
 Enter a number ('\'=one level back, 'Q'=command mode): <HP3>1</HP3>
 
  * /HISTOGRAM/CREATE/1DHISTO  ID TITLE NCX XMIN XMAX &lsqb; VALMAX &rsqb;
 
    ID         C 'Histogram Identifier'
    TITLE      C 'Histogram title' D=' '
    NCX        I 'Number of channels' D=100
    XMIN       R 'Low edge' D=0
    XMAX       R 'Upper edge' D=100
    VALMAX     R 'Valmax' D=0
 
    Creates a one dimensional histogram. The contents are set to zero.
    If VALMAX=0, a full word is allocated per channel, else VALMAX is used as the maximum
    bin content allowing several channels to be stored into the same machine word.
</XMP>
The meaning of the notation used in the text displayed by the <XPH>HELP</XPH>
command is explained on page <SPOTREF REFID=CDFHELP>. Moreover an
item preceded by a <HP2>star</HP2> indicates
a <HP2>terminal leaf</HP2> in the command tree,
i.e. an <HP2>executable</HP2> command (see <HDREF REFID=HCOTREE> for more details).
<?.PA>
<P>One can also
inquire about <HP2>creating a one-dimensional histogram</HP2>
by typing simply:
<XMP>
    <HP3>HELP histogram/create/1dhisto</HP3>
or
    <HP3>HELP his/cre/1d</HP3>
or even
    <HP3>HELP 1</HP3>
</XMP>
The system will then display the following information:
<XMP SCALE=0.9>
  * /HISTOGRAM/CREATE/1DHISTO  ID TITLE NCX XMIN XMAX &lsqb; VALMAX &rsqb;
 
    ID         C 'Histogram Identifier'
    TITLE      C 'Histogram title' D=' '
    NCX        I 'Number of channels' D=100
    XMIN       R 'Low edge' D=0
    XMAX       R 'Upper edge' D=100
    VALMAX     R 'Valmax' D=0
 
    Creates a one dimensional histogram. The contents are set to zero.
    If VALMAX=0, a full word is allocated per channel, else VALMAX is used as the maximum
    bin content allowing several channels to be stored into the same machine word.
</XMP>
<H3>Usage
<P>
Very often a single line description of the usage of a command is sufficient as
a reminder. This can be obtained by the <XPH><HP2>USAGE</HP2></XPH> command, e.g.:
<I1>USAGE command
<XMP>
PAW > <HP3>USAGE 1d</HP3>
 
  * /HISTOGRAM/CREATE/1DHISTO  ID TITLE NCX XMIN XMAX &lsqb; VALMAX &rsqb;
</XMP>
<H2 ID=SPESYMB SUBJECT='Special symbols for PAW'>Special symbols for PAW
<P>
<I1 CIX1='symbols'>special symbols
One should pay attention to the fact that, in addition to their common arithmetic
meaning,
the symbols in <TREF REFID=KUIPSYS> have a special connotation when working with PAW .
<TABLE ID=KUIPSYS RULES='BOTH' COLS='2cm *' mindepth=p5 align='l l' WIDTH=PAGE FRAME=BOX HP='2 0'>
<TCAP>Special symbols
<THD>
<C>Symbol
<C>Meaning
</THD>
<ROW>
<C>blank
<C>Separator between command and parameter and between different
parameters
<ROW>
<C>/
<C>Separator between command elements
<ROW>
<C>*
<C>Comment line (if first character of the command line)
<ROW>
<C>|
<C>Inline comments
<ROW>
<C>'
<C>String delimiter
<ROW>
<C>_
<C>Line continuation in KUIP commands
<ROW>
<C>&commat;
<C>Escape character to be put in front of | and ' to interpret them as literal
<ROW>
<C>!
<C>Place-holder for command parameter (i.e. default value is taken)
<?.br>
At the beginning of a command line: Unix C shell-like <HP2>history</HP2> list
<?.br>
(e.g. <XPH><HP2>!!, !number, !-number, !string</HP2></XPH>)
<ROW>
<C>&lsqb; &rsqb;
<C>Macro argument delimiters
<ROW>
<C>#
<C>Separator between macro file and macro member
<ROW>
<C>( )
<C>Vector subscript delimiters
<ROW>
<C>:
<C>Vector subscript range
<ROW>
<C>,
<C>Multi-dimensional vector subscript dimensions delimiter
<TNOTE>
These special characters
loose their effect when imbedded in single quotes.
</TNOTE>
</TABLE>
<?.CC 50>
<H2 ID=ENTITY SUBJECT='PAW entities and their related commands'>PAW entities and their related commands
<FIG ID=PAWCOM FRAME=NONE WIDTH=COLUMN PLACE=INLINE>
<FIGCAP>PAW entities and their related commands
<ARTWORK NAME=PAWCOM ALIGN=LEFT DEPTH=15CM WIDTH=14CM>
</FIG>
<P>
Relations which exist
between various PAW entities as described in section <HDREF REFID=PAWTERM PAGE=NO>
and the operations which can be performed upon them have been
schematically represented in <FIGREF REFID=PAWCOM>.
All commands shown in the picture next to the lines connecting the objects
have been abbreviated in a way that
they are unambiguous and can be typed to PAW, which will then
detail the various parameters to be supplied.
<P>There are three main input/output formats, namely a simple text
file (e.g. with data points or commands), a direct access ZEBRA RZ file
(used by HBOOK and HIGZ for storing histograms and pictures on a given
machine) and a ZEBRA FZ sequential file, which can be used to transfer
structured ZEBRA data between various computers.
The RZ and FZ representations can be transformed into each other
using the TOALFA and FRALFA commands.
<IH1>ZEBRA
<I2>TOALFA
<I2>FRALFA
<I2>RZ file
<I2>FZ file
<IH1>text data
<P>The three main PAW objects, Ntuples, histograms and vectors, can be
<HP2>printed</HP2> on an alphanumeric screen (<HP2>PRINT</HP2>
commands) or they can be plotted on a graphics screen (<HP2>PLOT</HP2>
commands). The picture can be transformed into a ZEBRA data structure
and stored in a HIGZ database for later reference (e.g. editing by the
HIGZ editor), or an external presentation can be obtained via the
<I1>metafile
creation of a <HP2>metafile</HP2>. This <Q>metafile</Q> can for instance consist of GKS
or PostScript commands, which can then be interpreted by the relative
drivers and printed on an output device, if so desired.
<IH1>PAW object
<IH1>PRINT commands
<IH1>PLOT commands
<IH1>HIGZ
<IH1>metafile
<IH1>PostScript
<IH1>GKS
