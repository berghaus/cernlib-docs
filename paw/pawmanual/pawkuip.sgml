<?.*****************************************************************>
<?.* PAW   User's Guide - KUIP chapter / Part 2                    *>
<?.*  Last Mod.  12  Nov 1989  13.45   mg                          *>
<?.*****************************************************************>
<H1>User interface - KUIP
<H2 SUBJECT='The PAW command structure' ID=HCOTREE>The PAW command structure
<P>
<I1>KUIP
<I1>command structure
All PAW commands may be seen as a path along the
PAW tree structure:
<FIG ID=TREE PLACE=INLINE FRAME=NONE>
<FIGCAP>Example of the PAW command tree structure
<ARTWORK NAME=TREE WIDTH=17cm ALIGN=CENTER>
</FIG>
<?.PA>
<H2 SUBJECT='Multiple dialogue styles'>Multiple dialogue styles
<P>
<I1>dialogue style
<I1>command mode
<I1>abbreviation
<I1 CIX1='parameter list'>command parameter list
PAW is based on the KUIP<BIBREF REFID=KUIP> User Interface package,
which can provide different types of dialogue styles.
It is possible to change interactively from one style to another using
the command <XPH>STYLE</XPH>.
<H3>Command line mode
<P>
In command mode the user enters a command line via the terminal keyboard.
<P>
The general syntax of an input command line
is a command name optionally followed by a parameter list.
The command name and the parameter list are
separated by one or more blanks (therefore, no blank should appear
within the command name).
The parameters in the parameter list are again separated by one or more
blanks;
no blank should then appear within a parameter, unless the whole parameter
is enclosed in single quotes, like for example
<XPH> 'This parameter has blanks' </XPH>
or a blank parameter <XPH>' '</XPH>.
<P>
The command name is a structured name representing the path along the
tree structure handled by KUIP. Each element of the path,
called command element, is separated from the others by one slash, like
for example in <XPH>/HISTOGRAM/CREATE/2DHISTO</XPH>
(the first slash at
the beginning of a command can always be omitted).
<P>
The rightmost command element of a command name must be a leaf of the tree,
i.e. a terminal command element, while the others are called menus.
<H4>Command abbreviations
<P>
A PAW command can always be abbreviated, as long as it does not become
ambiguous with other PAW commands, by:
<UL COMPACT>
<LI>
Omitting leftmost command elements
<LI>
Omitting rightmost characters of a command element
</UL>
<FIG ID=KSTYLES PLACE=INLINE WIDTH=COLUMN FRAME=BOX>
<FIGCAP>Example of KUIP command line mode
<XMP>
PAW > <HP3>CONT</HP3>
*** Ambiguous command. Possible commands are :
 
/HISTOGRAM/2D_PLOT/CONTOUR
/HISTOGRAM/GET_VECT/CONTENTS
/HISTOGRAM/PUT_VECT/CONTENTS
 
PAW > <HP3>PUT_VECT/CONTENTS</HP3>
Histogram Identifier (&lt;CR&gt;=110): <HP3>100</HP3>
Vector name (&lt;CR&gt;=XYZ): <HP3>VEC</HP3>
PAW > <HP3>P/C</HP3>
*** Ambiguous command. Possible commands are :
 
/HISTOGRAM/PUT_VECT/CONTENTS
/PICTURE/CREATE
/PICTURE/COPY
 
PAW > <HP3>P/CO</HP3>
*** Ambiguous command. Possible commands are :
 
/HISTOGRAM/PUT_VECT/CONTENTS
/PICTURE/COPY
 
PAW > <HP3>PU/C</HP3>
Histogram Identifier (&lt;CR&gt;=100): <HP3>110</HP3>
Vector name (&lt;CR&gt;=VEC): <HP3>VV</HP3>
</XMP>
</FIG>
<P>
The shortest unambiguous abbreviation for any command is not fixed,
but depending on the whole command tree structure: KUIP takes care to list
all possible ambiguities should the user have entered an ambiguous command.
<P>
The list of all executable commands can be obtained just by typing
one slash. This is a command line having a null
command element both to the left and to the right of the separator slash;
by definition a null command element is ambiguous with every non-null
command element, therefore all the available commands will be listed as
possible ambiguities.
<H4>Parameters
<P>
As explained above, a command line consists of a command part optionally
followed by a parameter part.
For example, the PAW command <XPH>NTUPLE/LIST</XPH>
has no parameters, while <XPH>NTUPLE/PRINT</XPH> has one parameter,
i.e. the Ntuple identifier. Using the command <XPH>USAGE</XPH>:
<XMP>
PAW > <HP3>USAGE NTUPLE/LIST</HP3>
 
 * NTUPLE/LIST
 
PAW > <HP3>USAGE NTUPLE/PRINT</HP3>
 
 * NTUPLE/PRINT  IDN
</XMP>
<P>
Parameters can be mandatory or optional. For example the command
<XPH>ZEBRA/DZ/STORE</XPH>
has one optional parameter, i.e. the ZEBRA store number.
An optional parameters always has
a <HP2>default value</HP2>, which is used
when the user does not specify the
parameter. In the above example the default value is <XPH>0</XPH>,
therefore entering just
<XPH>STORE</XPH> is equivalent to <XPH>STORE 0</XPH>.
<P>
On the other hand the command <XPH>ZEBRA/FZ/TOALPHA</XPH>
has one mandatory parameter, i.e. the name of a FZ text file.
If the user enters
just <XPH>TOALPHA</XPH>, he will be prompted also for the file name:
<XMP>
PAW > <HP3>TOALPHA</HP3>
Name of the FZ text file (&lt;CR&gt;=FF.DAT): <HP3>GG.DAT</HP3>
</XMP>
<P>
The <HP2>order</HP2>
of parameters in the command line is important and must match
the semantic definition of the command.
Mandatory parameters are always specified before any
optional parameters.
<P>
<I1>exclamation mark
An <HP2>exclamation</HP2> mark may be used as default value escape character.
As an example consider the following PAW command:
<XMP>
PAW > <HP3>USAGE NTUPLE/PLOT</HP3>
 
 * NTUPLE/PLOT  IDN &lsqb; UWFUNC NEVENT IFIRST NUPD CHOPT &rsqb;
</XMP>
which has one mandatory and five optional parameters.
If for instance only the fourth parameter, <XPH>IFIRST</XPH>, needs to be specified (hence taking the default
values for all other optional parameters), then one may enter:
<XMP>
PAW > <HP3>NTUPLE/PLOT 30 ! ! 1000</HP3>
</XMP>
<H3>Menu modes
<P>
<I1>menu mode
<I1>alphanumeric menu mode
<I1>graphic menu mode
<I1>menu mode
<I1>STYLE AN
<I1>STYLE G
<I1>STYLE GP
<I1>panel
<I1>pull-down menu
<I1>menu mode
<I2>alphanumeric
<I2>graphic
<I3>pull-down
<I3>panel
In addition to the command line mode, KUIP also allows
various menu modes:
<UL>
<IH1>KUIP
<I2>STYLE AN
<I2>alphanumeric mode
<LI><HP2>Alphanumeric</HP2>, entered by <XPH><HP3>STYLE AN</HP3></XPH> or
<XPH><HP3>STYLE AL</HP3></XPH>.
<P>Selection is from a list by number or by letter.
This mode still uses the terminal keyboard as input, but the user, instead of typing
directly the full command, is guided into the tree of the command
structure which is scanned through its branches until a leaf is found. The
resulting path name corresponds then to the command which may be invoked.
<LI><HP2>Graphics</HP2>: This mode
is particularly interesting for workstations.
It should not be used with simple terminals.
<UL>
<I1>graphics modes
<LI>
Pull-down menus, entered by <XPH><HP3>STYLE G</HP3></XPH>;
fixed layout, reflecting the command structure
<LI>
Panels of function keys, entered by <XPH><HP3>STYLE GP</HP3></XPH>;
interactive user definable multiple layouts.
</UL>
</UL>
<?.PA>
<H3>Style G
<P>
<I1>STYLE G
<I1>pull-down menu
Under <XPH>STYLE G </XPH> the user is still guided through
the command tree as for the alphanumeric styles,
but the mouse is used to navigate on pull down menus in the
graphics window.
In the figure below, the shadowed part is
available for the graphics application.
<FIG ID=STYLEG PLACE=INLINE FRAME=NONE>
<FIGCAP>Example of STYLE G
<ARTWORK NAME=STYLEG WIDTH=17cm ALIGN=CENTER TOPMAR=1CM>
</FIG>
<?.PA>
<H3>Style GP
<P>
<I1>STYLE GP
<I1>panel menu
Panels of graphics function keys may be defined with
the command <XPH><HP3>PANEL</HP3></XPH>:
<XMP>
<HP2>
panel 0
panel 1 Edit-     Exec- Shell-     Vector/List  Alias/List -     HELP-   EXIT
panel 2 'Ldir //' Cdir- Histo/List Histo/Plot-  Histo/Plot Lego  Surface Contour
panel 3 Set-      Opt-  Igset-     ' '          Locate     Zone- Next    Null
panel 4 'Histo/Plot $ E | Plot error bars'      'Exec paneldoc--'
</HP2>
</XMP>
Then enter <XPH>STYLE GP</XPH>, move the mouse
to a graphics function key and click the left mouse button;
the text written on the key will be sent for execution as if
it were typed in via the keyboard.
Parameters can also be added interactively by the user.
<FIG ID=STYLEGP PLACE=INLINE FRAME=NONE WIDTH=COLUMN>
<FIGCAP>Example of STYLE GP
<ARTWORK NAME=STYLEGP WIDTH=14.2cm ALIGN=LEFT>
</FIG>
<P>A panel can be redefined from within itself.
For example by selecting the key <XPH>Exec paneldoc--</XPH> and entering
the number <XPH>1</XPH>, the macro file <XPH>paneldoc1.kumac</XPH>
will be used as input and executed. If it contains the following lines:
<XMP>
<HP2>
panel 0
panel 1 'Histo/Plot 1' 'Histo/Plot 2' 'Histo/Plot 3' 'Histo/Plot 4'
panel 2 'Histo/Plot 5' 'Histo/Plot 6' 'Histo/Plot 7' 'Histo/Plot 8'
panel 3 'Cdir //LUN1' 'Cdir //LUN2'
panel 4 'Exec paneldoc | to go back'
</HP2>
</XMP>
then the panel will be modified accordingly.
<?.PA>
<H2 SUBJECT='Macros'>Macros
<P>
<I1>macro
<I1>exec
<I1>macro statements
<I2>READ
<I2>RETURN
<I2>ON ERROR GOTO
<I2>GOTO
<I2>IF
<I1>READ macro statement
<I1>RETURN macro statement
<I1>ON ERROR GOTO macro statement
<I1>GOTO macro statement
<I1>IF macro statement
<I1 CIX1='label'>macro label
A macro is a set of command lines stored in a file,
which can be created/edited with the command <XPH><HP2>EDIT</HP2></XPH>
and executed with <XPH>EXEC</XPH>:
<XMP>
PAW > <HP3>EXEC MNAME</HP3>
</XMP>
executes the command lines contained in the macro file MNAME.
As a macro file can contain several macros, a dash sign (<XPH>#</XPH>)
is used to select a particular macro inside a file:
<UL COMPACT>
<LI>
If <XPH>MNAME</XPH> does not contain the character '<XPH>#</XPH>', the file
<XPH>MNAME.KUMAC</XPH>
is searched and the first macro is executed (it may be an unnamed
macro if a <XPH>MACRO</XPH> statement is not found as first command
line in the file)
<LI>
If <XPH>MNAME</XPH> is of the form <XPH>FILE#MACRO</XPH>,
the file named <XPH>FILE.KUMAC</XPH> is searched and the macro named
<XPH>MACRO</XPH> is executed
</UL>
Examples:
<XMP>
PAW > <HP3>EXEC ABC</HP3>      | Execute first (or unnamed) macro of file ABC.KUMAC
PAW > <HP3>EXEC ABC#M</HP3>    | Execute macro M of file ABC.KUMAC
</XMP>
<P>
In addition to all available commands the following
special 'macro statements' are valid only inside macros
(excepted <XPH>EXEC</XPH>, valid inside and outside):
<TABLE ID=KUIPMAC RULES=NONE COLS='* *' mindepth=p5 align='l l' FRAME=BOX EXPAND>
<TCAP>KUIP Macro Statements
<THD>
<C>Statement
<C>Description
</THD>
<TFT>
<C>
</TFT>
<ROW>
<C><HP2>MACRO</HP2> mname par1=val1 ...
<C>begin macro 'mname'
<ROW>
<C><HP2>EXEC</HP2> mname par1 par2=val2 ...
<C>execute macro 'mname'
<ROW>
<C><HP2>RETURN</HP2>
<C>end of a macro
<ROW>
<C><HP2>READ</HP2> par
<C>read macro parameter 'par' from keyboard
<ROW>
<C>label <HP2>:</HP2>
<C>a label must terminate with a colon
<ROW>
<C><HP2>GOTO</HP2> label
<C>jump to label
<ROW>
<C><HP2>ON ERROR GOTO</HP2> label
<C>resume at label on error condition
<ROW>
<C><HP2>IF</HP2> logical_expression <HP2>GOTO</HP2> label
<C>conditional statement
<ROW>
<C>par <HP2>=</HP2> arithmetic_expression
<C>assignment statement
</TABLE>
<P>
In the last line of above table <XPH>par</XPH> is an argument
passed with the command <XPH>EXEC</XPH>
(either from the command mode or from another macro)
or just a local variable of the macro.
<P>
<XPH>arithmetic_expression</XPH> and
<XPH>logical_expression</XPH> are simple expressions defined
as follows (with '|' standing for 'or' and juxtaposition
standing for 'and'):
<XMP>
<HP2>operand</HP2>                =   <HP2>par</HP2>  |  <HP2>constant</HP2>
<HP2>arithmetic_expression</HP2>  =   <HP2>operand  arithmetic_operator  operand</HP2>
<HP2>arithmetic_operator</HP2>    =   <HP2>+</HP2>  |  <HP2>-</HP2>  |  <HP2>*</HP2>  |  <HP2>/</HP2>
<HP2>logical_expression</HP2>     =   <HP2>operand  logical_operator  operand</HP2>
<HP2>logical_operator</HP2>       =   <HP2>=</HP2>  |  <HP2>&lt;</HP2>  |  <HP2>&lt;=</HP2>  |  <HP2>&gt;</HP2>  |  <HP2>&gt;=</HP2>  |  <HP2>&lt;&gt;</HP2>
</XMP>
<P>
A label is any string in a line that is terminated by a colon
(therefore labels must be alone and not intermixed with commands on
the same line).
Its definition is local to the macro in which the label is contained, therefore
the same label can be used on different macros with no clash problem.
<P>
The <XPH>ON ERROR GOTO</XPH> statement is activated by error conditions of
most PAW commands.
<FN CALLOUT='*'>More precisely,
after the execution of a line inside a macro, the variable
<XPH>IQUEST(1)</XPH> (in <XPH>COMMON /QUEST/ IQUEST(100)</XPH>)
is checked. If it is different than <XPH>0</XPH>, then
the <XPH>ON ERROR GOTO</XPH> logic is triggered.
</FN>
In executing a macro, the latest <XPH>ON ERROR GOTO</XPH> executed is the active one
(i.e. the previous definition is superseded).
<P>
<?.CC 5>
Positional parameters can be passed to a macro, separated by blanks, e.g.
<XMP>
PAW > <HP3>EXEC ABC P1 123 'This is P3'</HP3>
</XMP>
Inside a macro, positional parameters can be retrieved by including
in brackets the number representing their order in the list.
Using the above <XPH>EXEC</XPH> sequence for the following macro:
<XMP SCALE=1.0>
MACRO ABC
  MESSAGE &lsqb;1&rsqb; &lsqb;3&rsqb; &lsqb;2&rsqb;
RETURN
</XMP>
will print:
<XMP SCALE=1.>
P1 This is P3 123
</XMP>
<I1>macro parameter
Macro parameters can be concatenated to anything in the command line:
whenever a parameter number (or name - see below), enclosed in brackets,
is encountered in the command line, it will be substituted by its
value before executing the command line. Example:
<XMP SCALE=1.>
MACRO OPEN
  HISTO/FILE 20 DST&lsqb;1&rsqb;.DAT
RETURN
</XMP>
called by:
<XMP SCALE=1.0>
PAW > <HP3>EXEC OPEN 123TEST</HP3>
</XMP>
will execute the command:
<XMP SCALE=1.0>
HISTO/FILE 20 DST123TEST.DAT
</XMP>
Non-positional (i.e. named) parameters can be passed too.
This is useful when a macro has several parameters associated to it.
Initial values of parameters should be specified in the <XPH>MACRO</XPH> statement.
For example, changing the macro OPEN as:
<XMP SCALE=1.0>
MACRO OPEN LUN=20 NAME=JUNK EXT=DAT LRECL=1024 CHOPT=' '
  HISTO/FILE &lsqb;LUN&rsqb; &lsqb;NAME&rsqb;.&lsqb;EXT&rsqb; &lsqb;LRECL&rsqb; &lsqb;CHOPT&rsqb;
RETURN
</XMP>
Entering now:
<XMP SCALE=1.0>
PAW > <HP3>EXEC OPEN EXT=TEMP LUN=10</HP3>
</XMP>
will execute the command:
<XMP SCALE=1.0>
HISTO/FILE 10 JUNK.TEMP 1024
</XMP>
Parameters can also be read at macro run time. For example:
<XMP SCALE=1.0>
MACRO INP
  READ PPP
  READ 1
  MESSAGE 'The value of the parameter PPP is ... ' &lsqb;PPP&rsqb;
  MESSAGE 'The value of the parameter 1 is ..... ' &lsqb;1&rsqb;
RETURN
</XMP>
will ask the user to set parameters when <XPH>READ</XPH> is being executed.
If just <XPH>&lt;CR&gt;</XPH> is entered, the values remain unchanged.
The order of priority for macro parameters is such that the values given
in the <XPH>EXEC</XPH> statement supersede those given in the
<XPH>MACRO</XPH> statement.
<?.PA>
<H3>Macro flow control
<P>
<I1>macro variable
<I1>IF macro control
<I1>GOTO macro control
The flow of a macro can be controlled by using the <XPH>IF</XPH>
and the <XPH>GOTO</XPH> macro statements. The parameters
of a macro, described above, can be tested and their value modified.
This possibility is valid in general for any macro <HP2>variable</HP2>,
independently from the fact that the variable is a macro parameter passed
to the macro or that the variable is just defined locally
within the macro.
<P>
Inside a macro, variables can be set as in FORTRAN, but the
distinction of their type is irrelevant: an automatic mechanism is
used to distinguish between integer, real or character type variables.
As an example consider the following macro:
<XMP SCALE=1.0>
   MACRO DOC1
      A=10
      NN=1.5
      TOT=A+NN
      IF TOT > 11 GOTO GREAT
      MESSAGE 'KUIP arithmetic is wrong'
      GO TO 10
GREAT:
      MESSAGE Sum of &lsqb;A&rsqb; and &lsqb;NN&rsqb; is &lsqb;TOT&rsqb;
10:
   RETURN
</XMP>
Its execution gives (hopefully!):
<XMP SCALE=1.0>
PAW > <HP3>EXEC DOC1</HP3>
Sum of 10 and 1.5 is 11.5
</XMP>
On the other hand, the macro:
<XMP SCALE=1.0>
   MACRO DOC2
      A=10
      NN=1.5
      TOT=A+XX
      MESSAGE Result of sum is &lsqb;TOT&rsqb;
   RETURN
</XMP>
produces the following result:
<XMP SCALE=1.0>
PAW > <HP3>EXEC DOC2</HP3>
Result of sum is A+XX
</XMP>
i.e. when numeric values cannot be used, the right part
of an assignment statement is left unchanged as a character string.
This because to the undefined variable <XPH>XX</XPH> is not
assigned any numeric value (unlike FORTRAN).
<P>
An example of macro using arithmetic and logical operations
is the following:
<XMP SCALE=1.0>
   MACRO PLOT 1=' ' 2=' '
      IF &lsqb;1&rsqb;&lt;&gt;' ' GOTO first_given
      MESSAGE 'Give starting ID'
      READ 1
first_given:
      IF &lsqb;2&rsqb;&lt;&gt;' ' GOTO second_given
      MESSAGE 'Give ending ID'
      READ 2
second_given:
      ID=&lsqb;1&rsqb;
LOOP:
         HISTO/PLOT &lsqb;ID&rsqb;
         ID=ID+1
         IF ID<=&lsqb;2&rsqb; GOTO LOOP
   RETURN
</XMP>
which, if executed for example by <XPH>EXEC PLOT 4 7</XPH>,
plots the histograms identified by <XPH>4</XPH> to <XPH>7</XPH>
included.
If one or both macro arguments are omitted when calling the macro,
they will be asked for interactively.
Note also that, while a macro variable of
an <XPH>IF</XPH> statement may be without brackets, the positional
arguments must always be enclosed
in brackets, to avoid ambiguity with numeric values.
<?.PA>
The right part of an assignment statement can be a vector name
(with an optional subscript), as in the following:
<XMP SCALE=1.0>
   MACRO DOC3
      A=10
      IF $VEXIST(VV)=0 GOTO NOVEC
      VEC/DEL VV
NOVEC:
      VEC/CRE VV(5)
      VEC/INP VV 10 20 30 2*0
      VECVAR=VV
      MESSAGE First component of vector VV is &lsqb;VECVAR&rsqb;
      VECVAR=VV(2)
      MESSAGE Second component of vector VV is &lsqb;VECVAR&rsqb;
      VECVAR=VV($VLEN(VV,1))
      MESSAGE Last non-zero component of vector VV is &lsqb;VECVAR&rsqb;
      VECVAR=VV($VDIM(VV,1))
      MESSAGE Last component of vector VV is &lsqb;VECVAR&rsqb;
   RETURN
</XMP>
which produces:
<XMP SCALE=1.0>
PAW > <HP3>EXEC DOC3</HP3>
First component of vector VV is 10
Second component of vector VV is 20
Last non-zero component of vector VV is 30
Last component of vector VV is 0
</XMP>
<P>Note that if no subscript is given, the first component of
the vector is used.
<I1 CIX1='component of vector'>vector component
<?.PA>
<H2 SUBJECT='Aliases'>Aliases
<P>
<I1>alias
<I1>abbreviation
Aliases are useful to provide shortcut abbreviations for the input line or
some part of it. An alias name can be any string of characters
(excepted the single quote and the blank) and whenever encountered
in an input line it will be literally replaced by its value (another string
of characters).
Alias substitution does not apply in quoted strings.
Aliases are defined by using the command <XPH><HP3>ALIAS/CREATE</HP3></XPH>.
As an example consider the following PAW session:
<XMP SCALE=1.0>
PAW > <HP3>ALIAS/CREATE M7 'EXEC MACRO7'</HP3>
PAW > <HP3>ALIAS/CREATE PP '10 20 30'</HP3>
PAW > <HP3>ALIAS/LIST</HP3>
M7  =>  EXEC MACRO7
PP  =>  10 20 30
PAW > <HP3>M7PP</HP3>
*** Unknown command
PAW > <HP3>M7 PP</HP3>
   ...   Executing: MACRO7 10 20 30
PAW > <HP3>MESSAGE M7</HP3>
EXEC MACRO7
PAW > <HP3>MESSAGE 'M7'</HP3>
M7
</XMP>
As evident from the <XPH>M7PP</XPH> line in the example above,
aliases need separators
to be recognized in the input line. Possible separators are:
<XMP SCALE=1.0>
<HP2>blank  /  ,  =  :  .  %  (  )</HP2>
</XMP>
A double slash <XPH>//</XPH> can be used
to concatenate aliases without any separator (i.e. to juxtapose them):
<XMP SCALE=1.0>
PAW > <HP3>Alias/Create DIR disk$dl:&lsqb;paw&rsqb;</HP3>
PAW > <HP3>Alias/Create FIL mydatafile</HP3>
PAW > <HP3>HISTO/FILE 3 DIR//FIL</HP3>
   ...   Executing: HISTO/FILE 3 disk$dl:&lsqb;paw&rsqb;mydatafile
</XMP>
<P>
Note also that <HP2>aliases are recursive</HP2>. Example:
<XMP SCALE=1.0>
PAW > <HP3>a/cr aa bb</HP3>
PAW > <HP3>a/cr bb cc</HP3>
PAW > <HP3>mess aa</HP3>
cc
PAW > <HP3>a/cr doc3 'exec doc3'</HP3>
PAW > <HP3>doc3</HP3>
*** Line is too long after alias expansion
</XMP>
<LBLBOX>Note
Another way to invoke a macro without typing the <XPH>EXEC</XPH> command
in front of the macro name
is by issuing once at the beginning of the PAW session
(e.g. by entering it in your <XPH>PAWLOGON</XPH>)
the command <XPH><HP3>DEFAULTS -AUTO</HP3></XPH>.
Then, whenever a command is not found, a macro with the given name is searched.
</LBLBOX>
<?.PA>
<H4>A complex example of the use of aliases
<P>
Consider now the following macro file (containing three macros):
<XMP SCALE=1.0>
macro doc9
  message '   ...   Executing: MACRO DOC9'
return
 
macro m1
  message '   ...   Executing: MACRO DOC9#M1'
  exec m2
return
 
macro m2
  message '   ...   Executing: MACRO DOC9#M2'
return
</XMP>
with the commands:
<XMP SCALE=1.0>
PAW > <HP3>a/cre m1 'exec doc9#m1'</HP3>
PAW > <HP3>m1</HP3>
   ...   Executing: MACRO DOC9#M1
   ...   Executing: MACRO DOC9#M2
PAW > <HP3>a/cre m2 'exec doc9#m2'</HP3>
PAW > <HP3>m2</HP3>
*** Unknown file EXEC.kumac
</XMP>
This happens because when the string <XPH>m2</XPH> is substituted
by its alias value <XPH>exec doc9#m2'</XPH>,
the macro <XPH>m1</XPH> becomes:
<XMP SCALE=1.0>
macro m1
  message '   ...   Executing: MACRO DOC9#M1'
  exec exec doc9#m2
return
</XMP>
To avoid that, one could simply add a character (for example an underscore)
before the macro names, as:
<XMP SCALE=1.0>
macro _doc9
  message '   ...   Executing: MACRO _DOC9'
return
 
macro _m1
  message '   ...   Executing: MACRO _DOC9#_M1'
  exec _m2
return
 
macro _m2
  message '   ...   Executing: MACRO _DOC9#_M2'
return
</XMP>
and then:
<XMP SCALE=1.0>
PAW > <HP3>a/cr m1 'exec doc9new#_m1'</HP3>
PAW > <HP3>m1</HP3>
   ...   Executing: MACRO _DOC9#_M1
   ...   Executing: MACRO _DOC9#_M2
PAW > <HP3>a/cr m2 'exec doc9new#_m2'</HP3>
PAW > <HP3>m2</HP3>
   ...   Executing: MACRO _DOC9#_M2
</XMP>
<?.PA>
<H2 SUBJECT='System functions'>System functions
<P>
<I1>system function
<I1>KUIP system functions
<I2>DATE
<I2>TIME
<I2>CPTIME
<I2>RTIME
<I2>VDIM
<I2>VLEN
<I2>NUMVEC
<I2>VEXIST
<I2>SUBSTRING
<I2>UPPER
<I2>LOWER
<I2>LEN
<I2>SIGMA
<I1>DATE KUIP system function
<I1>TIME KUIP system function
<I1>CPTIME KUIP system function
<I1>RTIME KUIP system function
<I1>VDIM KUIP system function
<I1>VLEN KUIP system function
<I1>NUMVEC KUIP system function
<I1>VEXIST KUIP system function
<I1>SUBSTRING KUIP system function
<I1>UPPER KUIP system function
<I1>LOWER KUIP system function
<I1>LEN KUIP system function
<I1>SIGMA KUIP system function
While aliases have a fixed value, system functions can be seen
as aliases whose value depends on the function name and on its
arguments (if any).
Therefore, also system functions are literally replaced
by their current value whenever encountered in a PAW command line.
System functions, unlike aliases, do not need separators because
they are pre-defined and known by KUIP.
Their names always start with a dollar sign, and some of them
have a parameter list, enclosed in parentheses.
System functions are mainly used inside macros.
<TABLE ID=KSYSFUN RULES=BOTH COLS='5cm * *' mindepth=p5 align='l l l' WIDTH=PAGE FRAME=BOX HP='2 0 0' CONCAT=NO>
<TCAP>System Functions
<THD>
<C>Function name and arguments
<C>Returned value
<C>Example
</THD>
<ROW>
<C>$DATE
<C>Current date in format DD/MM/YY
<C><XPH>$DATE</XPH> ==> <XPH>01/09/89</XPH>
<ROW>
<C>$TIME
<C>Current time in format HH.MM.SS
<C><XPH>$TIME</XPH> ==> <XPH>15.49.22</XPH>
<ROW>
<C>$CPTIME
<C>CP time elapsed since last call (s)
<C><XPH>$CPTIME</XPH> ==> <XPH>10.17811</XPH>
<ROW>
<C>$RTIME
<C>Real time elapsed since last call (s)
<C><XPH>$RTIME</XPH> ==> <XPH>49</XPH>
<ROW>
<C>$VDIM(VNAME,IDIM)
<C>Physical length of vector VNAME
on dimension IDIM (1..3)
<C><XPH><HP3>VECTOR/CREATE MYVEC(3,10)</HP3></XPH>
<XPH>$VDIM(MYVEC,2)</XPH> ==> <XPH>10</XPH>
<ROW>
<C>$VLEN(VNAME,IDIM)
<C>Logical length (stripping trailing 0)
of vector VNAME
<C><XPH><HP3>VEC/CRE VEC(10) R 0 10 20 30</HP3></XPH>
<XPH>$VLEN(VEC,1)</XPH> ==> <XPH>4</XPH>
<ROW>
<C>$NUMVEC
<C>Current number of vectors
<C><XPH>$NUMVEC</XPH> ==> <XPH>2</XPH>
<ROW>
<C>$VEXIST(VNAME)
<C>Index of vector VNAME
(1..$NUMVEC or 0 if not existing)
<C><XPH>$VEXIST(ZZZ)</XPH> ==> <XPH>0</XPH>
<XPH>$VEXIST(VEC)</XPH> ==> <XPH>2</XPH>
<ROW>
<C>$SUBSTRING(STRING,IX,NCH)
<C>STRING(IX:IX+NCH-1)
<C><XPH>$SUBSTRING(ABCDEF,3,2)</XPH> ==> <XPH>CD</XPH>
<XPH>$SUBSTRING('ABCDEF',3,2)</XPH> ==> <XPH>CD</XPH>
<ROW>
<C>$UPPER(STRING)
<C>STRING changed to upper case
<C><XPH>$UPPER(ABCdef123)</XPH> ==> <XPH>ABCDEF123</XPH>
<ROW>
<C>$LOWER(STRING)
<C>STRING changed to lower case
<C><XPH>$LOWER(ABCdef123)</XPH> ==> <XPH>abcdef123</XPH>
<ROW>
<C>$LEN(STRING)
<C>Length of STRING, stripping
leading/trailing blanks
and single quotes
<C><XPH>$LEN(ABCdef123)</XPH> ==> <XPH>9</XPH>
<XPH>$LEN('ABCdef123')</XPH> ==> <XPH>9</XPH>
<XPH>$LEN('   ABCdef123   ')</XPH> ==> <XPH>9</XPH>
<ROW>
<C>$SIGMA(SIGMA_Expression)
<C>Result, as computed by SIGMA,
of SIGMA_Expression
<C><XPH>$SIGMA(1+0.5)</XPH> ==> <XPH>1.5</XPH>
<XPH>$SIGMA(SQRT(2)*PI)</XPH> ==> <XPH>4.442883</XPH>
</TABLE>
<H3>The $SIGMA system function in more detail
<P>
<IH1>SIGMA
<I2>expression
A SIGMA expression (see also <HDREF REFID=H3SIGVE>)
can involve scalar or vector types of operands, and,
according to the type of the result,
the string <XPH><HP2>$SIGMA(Sigma_expression)</HP2></XPH>
will be substituted by either the numerical value of
<XPH><HP2>Sigma_expression</HP2></XPH>, if the result
is a scalar, or the name of a temporary vector (generated by SIGMA)
containing the result of evaluating the
<XPH><HP2>Sigma_expression</HP2></XPH>, e.g.
<XMP SCALE=1.0>
 PAW > <HP3>MESSAGE $SIGMA(SQRT(100)*PI)</HP3>
 31.41593
 
 PAW > <HP3>VEC/CR WWW R 10</HP3>                  | Create vector WWW
 PAW > <HP3>VEC/CR SSS R 10 20 30 40 50</HP3>      | Create vector SSS
</XMP>
<P>SIGMA uses temporary vectors (<XPH>?SIGMA1</XPH>, <XPH>?SIGMA2</XPH>,...).
They are deleted automatically after the execution of the command.
<XMP SCALE=0.9>
 PAW > <HP3>VEC/PRINT WWW</HP3>               PAW > <HP3>VEC/PRINT $SIGMA(WWW*10+PI)</HP3>
 WWW (    1 ) =   10.00000                    ?SIGMA1 (    1 ) =   103.1416
 PAW > <HP3>VEC/PRINT SSS</HP3>               PAW > <HP3>VEC/PRINT $SIGMA(SSS*10+PI)</HP3>
 SSS (    1 ) =   10.00000                    ?SIGMA1 (    1 ) =   103.1416
 SSS (    2 ) =   20.00000                    ?SIGMA1 (    2 ) =   203.1416
 SSS (    3 ) =   30.00000                    ?SIGMA1 (    3 ) =   303.1416
 SSS (    4 ) =   40.00000                    ?SIGMA1 (    4 ) =   403.1416
 SSS (    5 ) =   50.00000                    ?SIGMA1 (    5 ) =   503.1416
</XMP>
<P>
Multiple vector references are possible in the same command line, e.g.
<XMP SCALE=0.9>
 PAW > <HP3>GRAph 100 $SIGMA(SIN(XVEC)) $SIGMA(COS(XVEC))</HP3>
</XMP>
<H2 SUBJECT='On aliases, system functions and macro variables'>On aliases, system functions and macro variables
<P>
<I1>alias
<I1>system function
<I1>function
<I1>macro variable
Alias and system function substitutions
are made <Q>literally</Q>, i.e. <Q>as a character string</Q>
and regardless the type of the parameter.
For example, a system function resulting in a
<HP2>C</HP2>haracter string value
can be inserted in place of a numeric type parameter
(<HP2>I</HP2>nteger or <HP2>R</HP2>eal).
KUIP will complain when
executing that line only if the string cannot be interpreted as
a numeric parameter.
<P>
As an example consider the PAW command
<XPH>/GRAPHICS/PRIMITIVES/ITX  X Y TEXT</XPH> which has
the first two parameters of type <HP2>R</HP2>eal and the third
one of type <HP2>C</HP2>haracter:
<XMP SCALE=0.9>
PAW > <HP3>ITX $SUBSTRING(ABC100,4,2) 15 'Test of ITX'</HP3>
PAW > <HP3>ITX $SUBSTRING(ABC100,1,2) 15 'Test of ITX'</HP3>
*** Error in decoding 'real' parameter: AB
*** Default is taken
*** Default is not defined, unpredictable returned value !
</XMP>
the first call to ITX draws the text string 'Test of ITX' at
coordinates <XPH><HP2>10,15</HP2></XPH>;
the second call ends up with an error.
<H4>Macro variables, aliases and system function resolution
<P>
<UL>
<LI>
Any string within brackets, like <XPH>&lsqb;variable&rsqb;</XPH>,
is replaced <XPH>everywhere</XPH> in a macro
by its 'literal' value. It is left unchanged only when:
<UL COMPACT>
<LI>
it is within a quoted string
<LI>
the variable is undefined,
i.e. <XPH><HP2>variable=value</HP2></XPH> was not executed within the
macro nor <XPH><HP2>EXEC MACRO variable=value</HP2></XPH> was used as
calling sequence
</UL>
<LI>
The only exception where a variable may be put without
brackets is on the right side of an assignement statement, while on
the left side a name without brackets is always needed, e.g.
<XMP SCALE=0.9>
ABC=15
D=ABC+10         | D is set to 25
E=&lsqb;ABC&rsqb;+10       | E is set to 25
</XMP>
<LI>
Variables and aliases are resolved <HP2>before</HP2> system functions,
e.g.
<XMP SCALE=0.9>
ABC=15
D=$SUBSTRING(ABC,2,1)     | D is set to B
D=$SUBSTRING(&lsqb;ABC&rsqb;,2,1)   | D is set to 5
</XMP>
<LI>
System functions cannot be nested, e.g. the following is invalid:
<XMP SCALE=0.9>
D=$LEN($SUBSTRING(ABC,2,1))
</XMP>
<LI>
Macro control statements cannot be aliased., e.g. the following code yields
an error:
<XMP SCALE=0.9>
ALIAS/CREATE JUMP GOTO
IF 1=1 JUMP 10
10:
</XMP>
<LI>
Arguments of EXEC and GOTO may be alias or macro variables. Example:
<XMP SCALE=0.9>
MACRO JUNK
  EXEC &lsqb;1&rsqb;
RETURN
</XMP>
where entering <XPH>EXEC JUNK M1</XPH>
is equivalent to enter <XPH>EXEC M1</XPH>.
</UL>
<?.PA>
<H2 SUBJECT='Recalling previous commands'>Recalling previous commands
<P>
<I1>recalling previous commands
<I1>LAST
<I1>history file
In addition to the host machine local facilities in recalling
previous commands, KUIP allows to:
<UL>
<LI>
Enter the command <XPH><HP3>LAST</HP3></XPH> which writes all (or some)
commands typed in the session into a disk file (by default <XPH>LAST.KUMAC</XPH>)
and invokes the local editor
on the file.
<P>
The history file is updated automatically every 25 commands
(but the rate can be changed with
the command <XPH><HP3>RECORDING</HP3></XPH>) and at the end of a PAW session.
At the beginning of another PAW session the old history file <XPH>LAST.KUMAC</XPH>
is renamed into <XPH>LAST.KUMACOLD</XPH> and a new <XPH>LAST.KUMAC</XPH>
is opened.
In this way the user keeps always track of all the commands entered in
the previous and in the current PAW sessions.
The history files contain also heading
and trailing comment lines, showing the date and
time at which the PAW session was started/stopped.
<P>
The command <XPH><HP3>LAST 0 MYFILE</HP3></XPH> may be put in the user's
<XPH>PAWLOGON.KUMAC</XPH> to define the name of the history files
as <XPH>MYFILE.KUMAC</XPH> and <XPH>MYFILE.KUMACOLD</XPH>.
This is useful to avoid sharing the same <XPH>LAST.KUMAC</XPH> file
by several KUIP-based applications running on the same disk directory
(e.g. PAW, GEANT<BIBREF REFID=GEANT3>, CMZ<BIBREF REFID=CMZ>, etc.)
<P>
<LI>
Use a Unix C-shell-like history mechanism,
starting a command with an exclamation mark followed by:
<P>
<UL>
<LI>
An unsigned integer <XPH><HP2>n</HP2></XPH>,
to re-execute the <HP2>n</HP2>-th command entered
since the beginning of the session (e.g. <XPH><HP3>!3</HP3></XPH>)
<LI>
A negative integer <XPH><HP2>-n</HP2></XPH>,
to re-execute the command
identified by the current command number minus <HP2>n</HP2>
(e.g. <XPH><HP3>!-2</HP3></XPH>)
<LI>
Another exclamation mark,
to re-execute the last command entered (e.g. <XPH><HP3>!!</HP3></XPH>)
<LI>
Anything else (i.e. a non-numeric string),
to re-execute the latest command entered which starts with the
specified string (e.g. <XPH><HP3>!EXE</HP3></XPH>)
<LI>
Nothing else,
to show the list of recallable commands (e.g. just <XPH><HP3>!</HP3></XPH>)
</UL>
<P>
To have the command numbering the prompt string should be defined as
containing an open and closed
brackets (e.g. by the command <XPH><HP3>SET/PROMPT 'MYPAW &lsqb;&rsqb;'</HP3></XPH>),
inside which KUIP will put the command number.
</UL>
<H2 SUBJECT='Exception condition handling'>Exception condition handling
<P>
<I1>break
<I1>interrupt
<I1>exception handling
User breaks (<XPH>CTRL/C</XPH> on VAX,
<XPH>CTRL/Q</XPH> on APOLLO, etc.)
are handled within PAW (IBM excluded):
when a break is issued the execution of the current command
is aborted and PAW is waiting again for the next command.
<P>
Nevertheless, one has to be careful in using this facility, because
it requires that the code underneath must be reentrant (this is not the
case, for example, for some GKS routines).
<P>
Program exception conditions (for example, floating-point overflow,
negative square root, etc.) are also handled (IBM included):
on the occurrence of the exception a warning is issued and
the program flow is restarted again to wait for the next command,
as for user breaks.
