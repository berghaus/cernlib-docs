<?.*****************************************************************>
<?.* PAW   User's Guide - Chapter Sigma                            *>
<?.*  Last Mod.   10 Oct 1989  19.35   mg                          *>
<?.*****************************************************************>
<H1>SIGMA
<H2 ID=H2SIGMA SUBJECT='Access to SIGMA'>Access to SIGMA
<P>
The SIGMA array manipulation package can be accessed in three different ways in PAW:
<H3>Precede the statement by the prefix SIGMA
<I1>SIGMA
<I2>prefix SIGMA
<I1>application
<P>
This is shown in the example:
<FN CALLOUT='*'>Note the use of the predefined constant PI
in SIGMA with the obvious value.</FN>
<XMP>
  PAW > <HP3>SIGMA xvec=array(100,-pi#pi*2)</HP3>
  PAW > <HP3>SIGMA y=sin(xvec)*xvec</HP3>
</XMP>
<H3>The PAW command: APPLication SIGMA
<I1>SIGMA
<I2>APPLication SIGMA
<P>
All commands typed in after this command will be directly processed by
SIGMA. The command <XPH>EXIT</XPH> will return control to PAW, e.g.
<XMP>
  PAW > <HP3>APPLication SIGMA</HP3>
  SIGMA > <HP3>xvec=array(100,-pi#pi*2)</HP3>
  SIGMA > <HP3>sinus=sin(xvec)*xvec</HP3>
  SIGMA > <HP3>cosinus=cos(xvec)*xvec</HP3>
  SIGMA > <HP3>exit</HP3>
  PAW > <HP3>vector/list</HP3>
   Vector Name                    Type    Length    Dim-1    Dim-2    Dim-3
 
   XVEC                              R       100      100
   SINUS                             R       100      100
   COSINUS                           R       100      100
 
   Total of  3 Vector(s)
</XMP>
<H3 ID=H3SIGVE>The PAW system function $SIGMA
<I1>SIGMA
<I2>$SIGMA
<P>
The expression to be evaluated must be
enclosed in parentheses. The function will return the numerical
value of the expression (if the result is a scalar) or the
name of a temporary vector (if the result is a vector).
<P>
Assuming that the computation of the function <XPH>sin(x)*x</XPH>
in the above
example would be only for the purpose of producing a graph, (i.e.
the result is not needed for further calculations), then one could
just have typed the following commands:
<XMP>
  PAW > <HP3>SIGMA xvec=array(100,-pi#pi*2)</HP3>
  PAW > <HP3>GRAph 100 xvec $SIGMA(SIN(XVEC)*XVEC)</HP3>
</XMP>
<?.PA>
<H2 SUBJECT='Vector arithmetic operations using SIGMA'>Vector arithmetic operations using SIGMA
<I1>array
<I1>vector operations
<I1>SIGMA
<I2>vector
<I2>array
<P>A complete and convenient mechanism for the mathematical
manipulation of vectors is provided by SIGMA. In the following,
we use the words "array" and "vector" as synonyms. In both
cases, we refer to PAW vectors, in the sense that SIGMA offers
an alternative way to generate and to manipulate PAW vectors
(see <HDREF REFID=H1PVECT>).
The notation of SIGMA is similar to that of FORTRAN, in the sense
that is based upon formulae and assignment statements.
<P>The special operator <XPH>ARRAY</XPH> is used to generate vectors:
<H4>vname = ARRAY (arg1,arg2)
<P>
<DL TSIZE=9 COMPACT>
<DT>vname
<DD>Name of the vector (array) being created.
<DT>arg1
<DD>Defines the array <HP2>structure</HP2>,
i.e. the Number of COmponents (<HP2>NCO</HP2>) of the array.
<DT>arg2
<DD>Provides the <HP2>numerical values</HP2> filling the array
row-wise.
<P>If arg2 is absent (or does not provide enough
values) the array is filled with 1.
</DL>
<I1>array structure in SIGMA
<I1>operators in SIGMA
<I1>SIGMA
<I2>array structure
<I2>array filling
<H3>Basic operators
<I2>basic operators
<P>
<DL TSIZE=6 COMPACT>
<DT>&plus;
<DD>Add
<DT>-
<DD>Subtract
<DT>*
<DD>Multiply
<DT>/
<DD>Divide
<DT>**
<DD>Exponentiation
<DT>&
<DD>Concatenation
</DL>
<LBLBOX>Note
Note that ill defined operations will give <XPH>0.</XPH> as result. For
instance: a division by zero gives zero as result.
</LBLBOX>
<H3>Logical operators
<I2>logical operators
<I2>boolean values
<P>Logical operators act on entities that have
<HP2>Boolean</HP2> values <XPH>1</XPH> (true) or <XPH>0</XPH> (false).
The result is Boolean.
<DL TSIZE=6 COMPACT>
<DT>AND
<DD>Logical operation AND
<DT>NOT
<DD>Logical operation NOT
<DT>OR
<DD>Logical operation OR
<DT>EQ
<DD>EQual to
<DT>GE
<DD>Greater or Equal to
<DT>GT
<DD>Greater Than
<DT>LE
<DD>Less or Equal to
<DT>LT
<DD>Less Than
<DT>NE
<DD>Not Equal
</DL>
<H3>Control operators
<I2>control operators
<DL TSIZE=10 COMPACT>
<DT>!PRINT
<DD>Provides the automatic printing of every newly created array or scalar.
<DT>!NOPRINT
<DD>Suppresses the automatic printing of every newly created array or scalar.
</DL>
<H3>Examples:
<P>
<XMP>
<HP3>A=ARRAY (6,1#6) </HP3>             1  2  3  4  5  6
<HP3>A=ARRAY (4) </HP3>                 1  1  1  1
<HP3>A=ARRAY (5,2&3&-1&2&1.2) </HP3>    2  3  -1  2  1.2
<HP3>A=ARRAY (3)*PI </HP3>              3.1415927  3.1415927  3.1415927
<HP3>A=ARRAY (1,123E4) </HP3>           1230000.0
</XMP>
<?.PA>
<H2>SIGMA functions
<I2>functions
<P>SIGMA provides some functions which perform a task on a whole array. These
functions have no analogues in FORTRAN because all FORTRAN functions operate on
one or more single numbers. Presently available SIGMA functions
are listed in <TREF REFID=SIGFUN> below.
<TABLE ID=SIGFUN RULES='BOTH' COLS='16MM 15MM *' mindepth=p5 align='l l l' FRAME=BOX HP='2 0' WIDTH=PAGE>
<TCAP>SIGMA functions
<THD>
<C>Name
<C>Result
<C>Explanation
</THD>
<ROW>
<C>ANY
<C>Scalar
<C>The result is a Boolean scalar of value <XPH>1</XPH> (true)
if at least one component of the argument
is true and <XPH>0</XPH> (false) otherwise.
<ROW>
<C>DEL
<C>Vector
<C>Analog to the <HP2>Dirac-DELta Function</HP2>.
V1=DEL(V) sets each element of V1 to <XPH>0.0</XPH> (if corresponding
element in V is <XPH>non-zero</XPH>) or to <XPH>1.0</XPH>
(if corresponding element is <XPH>zero</XPH>).
<ROW>
<C>DIFF
<C>Vector
<C>V2=DIFF(V) <HP2>forward difference</HP2> of V.
The rightmost value in V1 is obtained by quadratic extrapolation over
the last three elements of V.
<ROW>
<C>LS
<C>Vector
<C>V1=LS(V,N) <HP2>shifts</HP2> index of V to the left by N steps (cyclic).
<ROW>
<C>LVMAX
<C>Scalar
<C>S1=LVMAX(V1)
sets S1 equal to the <HP2>index</HP2> (location) of the
<HP2>maximum</HP2> value in vector V1.
<ROW>
<C>LVMIN
<C>Scalar
<C>S1=LVMIN(V1)
sets S1 equal to the <HP2>index</HP2> (location) of the
<HP2>minimum</HP2> value in vector V1.
<ROW>
<C>MAX
<C>Vector
<C>V3=MAX(V1,V2)
sets each element of V3 equal to the <HP2>maximum</HP2>
of the corresponding elements in V1 and V2.
<ROW>
<C>MAXV
<C>Vector
<C>V1=MAXV(V)
sets each element of V1 equal to the <HP2>maximum</HP2> value in V.
<ROW>
<C>MIN
<C>Vector
<C>V3=MIN(V1,V2)
sets each element of V3 equal to the <HP2>minimum</HP2>
of the corresponding elements in V1 and V2.
<ROW>
<C>MINV
<C>Vector
<C>V1=MINV(V)
sets each element of V1 equal to the <HP2>minimum</HP2> value in V.
<ROW>
<C>NCO
<C>Scalar
<C>V1=NCO(V) <HP2>Number of COmponents</HP2> of vector of V.
<ROW>
<C>ORDER
<C>Vector
<C>V1=ORDER(V,V2) finds a permutation that brings
V2 in a non-descending order
and applies it to V to generate V1.
<ROW>
<C>PROD
<C>Vector
<C>V1=PROD(V) V1 is the <HP2>running product</HP2> of V.
<ROW>
<C>QUAD
<C>Vector
<C>V2=QUAD(V1,H)
The quadrature function QUAD numerically integrates each row of
V1 with respect to the scalar step size H.
<ROW>
<C>SUMV
<C>Vector
<C>V2=SUMV(V1)
<HP2>running sum</HP2> of V.
<ROW>
<C>VMAX
<C>Scalar
<C>S1=VMAX(V1)
sets S1 equal to the <HP2>maximum</HP2> value in vector V1.
<ROW>
<C>VMIN
<C>Scalar
<C>S1=VMIN(V1)
sets S1 equal to the <HP2>minimum</HP2> value in vector V1.
<ROW>
<C>VSUM
<C>Scalar
<C>S1=VSUM(V)
<HP2>sum</HP2> of all components of V.
</TABLE>
<?.PA>
<H3>SIGMA functions - A detailed description.
<P>
<?.BR>
In the following description of the SIGMA functions, the letter <HP2>R</HP2> always
denotes the <HP2>result</HP2> and <HP2>arg</HP2> denotes one or more <HP2>arguments</HP2>.
Any argument may itself be
an expression. In that case <HP2>arg</HP2> means the result of this expression. Let <HP2>OP</HP2>
denote any of the above array functions, then the statement:
<H4>R=OP(arg1,arg2,&hellip;)
will produce <HP2>R</HP2> without doing anything to the contents stored under the names
appearing in <HP2>arg1,arg2,&hellip;</HP2>. Thus, although in the description we may say
<Q>&hellip; <HP2>OP</HP2> does such and such to <HP2>arg</HP2> &hellip;</Q>,
in reality it leaves <HP2>arg</HP2> intact and works on
the argument to produce <HP2>R</HP2>.
<H4>R = ANY(arg)
<P>The function <HP2>ANY</HP2> considers the result of the argument expression as a Boolean
array. SIGMA represents <Q>true</Q> by <XPH>1</XPH> and <Q>false</Q> by <XPH>0</XPH>.
Thus the components of <HP2>arg</HP2>
must be either <XPH>0</XPH> or <XPH>1</XPH>, otherwise an error is generated.
<P>If at least one component of the result of the argument expression is <XPH>1</XPH>,
than <HP2>ANY</HP2> returns the scalar <XPH>1</XPH>. If all components of the result of the argument
expression are <XPH>0</XPH> then <HP2>ANY</HP2> returns the scalar <XPH>0</XPH>.
If <HP2>arg</HP2> is a Boolean scalar, <HP2>R = arg</HP2>.
<XMP SCALE=0.80>
  PAW > <HP3>APPL SIGMA</HP3>
  SIGMA > <HP3>!PRINT</HP3>                            | Print newly created vectors and scalars
  SIGMA > <HP3>W=(-2)**ARRAY(10,1#10)</HP3>
  NCO(W       )=   10
  W       =
   -2.000      4.000     -8.000      16.00     -32.00      64.00
   -128.0      256.0     -512.0      1024.
  SIGMA > <HP3>X=W GT 0</HP3>
  NCO(X       )=   10
  X       =
   0.0000      1.000     0.0000      1.000     0.0000      1.000
   0.0000      1.000     0.0000      1.000
  SIGMA > <HP3>R=ANY(X)</HP3>
  NCO(R       )=    1
  R         1.000
</XMP>
<H4>R = DEL(arg)
<I1>Delta function
<P>
<HP2>DEL</HP2> is a discrete analogue of a <HP2>Dirac delta function</HP2>. <HP2>DEL</HP2>
works independently
on each row of the argument array. If the elements of any row of the argument are
denoted by
<F>X sub 1 ,% X sub 2 ,% ellipsis , % X sub i ,% ellipsis ,% X sub n</F>
then the corresponding row of the result of the delta function
operation will be <F>Z sub 1, % Z sub 2 ,% Z sub 3 ,% ellipsis % ,Z sub n</F>
where all <F>Z sub i = 0 </F> except in three cases, in which <F>Z sub i = 1 </F>, namely:
<OL COMPACT>
<LI>When the component <F>X sub i</F> is itself zero.
<LI>When <F>X sub <i - 1> , X sub i </F> are of opposite sign and <F> lor X sub i lor lt lor X sub <i - 1> lor</F>.
If i = 1 then linear extrapolation to the left is used.
<LI>When <F>X sub i , X sub <i + 1> </F> are of opposite sign and <F> lor X sub i lor le lor X sub <i + 1> lor</F>.
If i = 1 then linear extrapolation to the right is used.
</OL>
If <HP2>arg</HP2> is a scalar, the value of <HP2>DEL(arg)</HP2> will be <XPH>1</XPH>
if <HP2>arg</HP2> is zero, and <XPH>0</XPH> otherwise.
<XMP SCALE=0.90>
  SIGMA > <HP3>W=array(11,-1#1)</HP3>
  NCO(W       )=   11
  W       =
   -1.000    -0.8000    -0.6000    -0.4000    -0.2000    -0.2980E-07
   0.2000     0.4000     0.6000     0.8000      1.000
 
  SIGMA > <HP3>X= (W+1.01)*W*(W-.35)*(W-.42)</HP3>
  NCO(X       )=   11
  X       =
  -0.1917E-01 -0.2357    -0.2384    -0.1501    -0.5524E-01-0.4425E-08
   0.7986E-02 -0.5640E-03 0.4347E-01 0.2476     0.7578
 
  SIGMA > <HP3>R=del(x)</HP3>
  NCO(R       )=   11
  R       =
    1.000     0.0000     0.0000     0.0000     0.0000      1.000
   0.0000      1.000     0.0000     0.0000     0.0000
</XMP>
<H4>R = DIFF(arg)
<I1>DIFF
<P>The <HP2>DIFF</HP2> function
generates the <HP2>forward difference</HP2>
of each row of the argument
array, say <F>X sub 1 ,% X sub 2 ,% ellipsis , % X sub i ,% ellipsis ,% X sub n</F>
and creates an array with components equal to the forward difference of X
<F>X sub 2 - X sub 1 , X sub 3 - X sub 2 , %  ellipsis % , X sub < n - 1 > , X sub 0</F>,
where the rightmost value <F>X sub 0 </F> is obtained by quadratic extrapolation over the last
three elements of the result of <HP2>arg</HP2>. Applied to a scalar <HP2>DIFF</HP2> gives a zero result.
<XMP SCALE=0.90>
  SIGMA > <HP3>x=array(6,5#0)</HP3>
  NCO(X       )=    6
  X       =
    5.000      4.000      3.000      2.000      1.000     0.0000
  SIGMA > <HP3>Y=x*x</HP3>
  NCO(Y       )=    6
  Y       =
    25.00      16.00      9.000      4.000      1.000     0.0000
  SIGMA > <HP3>Z=Diff(Y)</HP3>
  NCO(Z       )=    6
  Z       =
   -9.000     -7.000     -5.000     -3.000     -1.000      1.000
</XMP>
<H4>R=LS(arg1,arg2)
<I1>LS
<P>The <HP2>LS</HP2> rearrangement function performs a <HP2>left shift</HP2>.
<HP2>arg1</HP2> is the array to be shifted; <HP2>arg2</HP2> must be a scalar value (rounded
if necessary by the system), interpreted as the number of places the array has to
be shifted to the left. The scalar <HP2>arg2</HP2> can be negative, in which case <HP2>LS</HP2> shifts
to the right a number of places equal to the absolute value of <HP2>arg2</HP2>.
<P>It should be noted the the shift is performed circularly <HP2>modulo N</HP2>,
where N is the number of components in the rows of the array to be shifted. Hence, <HP2>LS(X,N+l)</HP2>
shifts the N component rows of X by 1 to the left, and <HP2>LS(X,-l)</HP2> shifts the rows by
N-1 to the left (or by 1 to the right).
If <HP2>arg1</HP2> is a scalar, <HP2>R = arg1</HP2>.
<XMP SCALE=0.90>
 SIGMA > <HP3>X=array(4&5,array(20,1#20))</HP3>
 NCO(X       )=    4    5
 X       =
   1.000      2.000      3.000      4.000
   5.000      6.000      7.000      8.000
   9.000      10.00      11.00      12.00
   13.00      14.00      15.00      16.00
   17.00      18.00      19.00      20.00
 
 SIGMA > <HP3>y=ls(x,1)</HP3>
 
 NCO(Y       )=    4    5
 Y       =
   2.000      3.000      4.000      1.000
   6.000      7.000      8.000      5.000
   10.00      11.00      12.00      9.000
   14.00      15.00      16.00      13.00
   18.00      19.00      20.00      17.00
 
 SIGMA > <HP3>y=ls(x,-3)</HP3>
 NCO(Y       )=    4    5
 Y       =
   2.000      3.000      4.000      1.000
   6.000      7.000      8.000      5.000
   10.00      11.00      12.00      9.000
   14.00      15.00      16.00      13.00
   18.00      19.00      20.00      17.00
 
 SIGMA > <HP3>X=array(5,1#5)</HP3>
 NCO(X       )=    5
 X         1.000      2.000      3.000      4.000      5.000
 SIGMA > <HP3>z=ls(x,3)</HP3>
 NCO(Z       )=    5
 Z         4.000      5.000      1.000      2.000      3.000
 SIGMA > <HP3>z1=ls(x,-4)</HP3>
 NCO(Z1      )=    5
 Z1        2.000      3.000      4.000      5.000      1.000
</XMP>
<H4>R=LVMAX(arg1) and R=LVMIN(arg1)
<I1>LVMAX
<I1>LVMIN
<P>
<?.BR>
The functions <HP2>LVMAX</HP2> and <HP2>LVMIN</HP2>
returns as a scalar result the index (position) of
the largest or smallest element, respectively,
in the argument array.
<XMP SCALE=0.90>
 
 SIGMA ><HP3>  x=sin(array(10,1#10))</HP3>
 NCO(X       )=   10
 X       =
  0.841     0.909     0.141    -0.757    -0.959    -0.279     0.657
  0.989     0.412    -0.544
 
 SIGMA ><HP3> r=lvmax(x)</HP3>
 NCO(R       )=    1
 R         8.00
</XMP>
 
<H4>R=MAX(arg1,arg2) and R=MIN(arg1,arg2)
<I1>MIN
<I1>MAX
<P>
<?.BR>
The functions <HP2>MAX</HP2> and <HP2>MIN</HP2> work
independently on each element of their arguments.
<HP2>arg2</HP2> can be a scalar.
The result has the same dimension as the argument array <HP2>arg1</HP2> and each element of
the result is set equal to the largest or smallest element, respectively,
of the corresponding element of the argument arrays.
<XMP SCALE=0.90>
 SIGMA ><HP3>  x=sin(array(10,1#10))</HP3>
 NCO(X       )=   10
 X       =
  0.841     0.909     0.141    -0.757    -0.959    -0.279     0.657
  0.989     0.412    -0.544
 
 SIGMA ><HP3>   y=cos(array(10,1#10))</HP3>
 NCO(Y       )=   10
 Y       =
  0.540    -0.416    -0.990    -0.654     0.284     0.960     0.754
 -0.146    -0.911    -0.839
 
 SIGMA ><HP3> z=min(x,y)</HP3>
 NCO(Z       )=   10
 Z       =
  0.540    -0.416    -0.990    -0.757    -0.959    -0.279     0.657
 -0.146    -0.911    -0.839
</XMP>
<H4>R=MAXV(arg) and R=MINV(arg)
<I1>MAXV
<I1>MINV
<P>
<?.BR>
The extrema functions <HP2>MAXV</HP2> and <HP2>MINV</HP2> work
on each element of their argument and
the result has the same dimension as the argument array <HP2>arg1</HP2>. Each element of
of the result is set equal to the largest or smallest element, respectively,
of the corresponding row of the argument array.
<P>All these functions, if applied to a scalar argument, yield <HP2>R=arg</HP2>.
<XMP SCALE=0.90>
  SIGMA > <HP3>x=array(10,0#10)</HP3>
  NCO(X       )=   10
  X       =
   0.0000      1.111      2.222      3.333      4.444      5.556
    6.667      7.778      8.889      10.00
 
  SIGMA > <HP3>s=sin(x)*x</HP3>
  NCO(S       )=   10
  S       =
   0.0000     0.9958      1.767    -0.6352     -4.286     -3.695
    2.494      7.755      4.539     -5.440
 
  SIGMA > <HP3> x=minv(s)</HP3>
  NCO(X       )=   10
  X       =
   -5.440     -5.440     -5.440     -5.440     -5.440     -5.440
   -5.440     -5.440     -5.440     -5.440
</XMP>
<I1>NCO
<?.CC 20>
<H4>R = NCO(arg)
<P>The <Q>Number of COmponents</Q> (<HP2>NCO</HP2>) control
function obtains the <HP2>NCO</HP2>
vector of the <HP2>arg</HP2>. The <HP2>NCO</HP2> vector of a scalar is the scalar 1.
For any argument the <HP2>NCO(NCO(arg))</HP2> gives the number of dimensions of the <HP2>arg</HP2>.
<XMP SCALE=0.80>
 SIGMA > <HP3> x=array(4&3&2,array(24,2#48))</HP3>
 NCO(X       )=    4    3    2
 X       =
   2.000      4.000      6.000      8.000
   10.00      12.00      14.00      16.00
   18.00      20.00      22.00      24.00
 
   26.00      28.00      30.00      32.00
   34.00      36.00      38.00      40.00
   42.00      44.00      46.00      48.00
 
 SIGMA > <HP3> r=nco(x)</HP3>
 NCO(R       )=    3
 R         4.000      3.000      2.000
 SIGMA > <HP3> ndim=nco(nco(x))</HP3>
 NCO(NDIM    )=    1
 NDIM      3.000
</XMP>
<H4>R=ORDER(arg1,arg2)
<I1>ORDER
<P>
<?.BR>
The ordering function <HP2>ORDER</HP2> acts independently on each row
of <HP2>arg1</HP2>. <HP2>arg2</HP2> must have the same row length as <HP2>arg1</HP2>.
<P><HP2>ORDER</HP2> finds the permutation that
brings <HP2>arg2</HP2> into a non-descending sequence
(row-wise) and constructs the result by applying this permutation to <HP2>arg1</HP2>. It
may in some cases be expanded to that structure by using the techniques of the
topological arithmetic. This is particularly useful if <HP2>arg2</HP2> is
a single vector with the length of the rows of <HP2>arg1</HP2>.
<XMP SCALE=0.80>
 SIGMA > <HP3>X = 1&1&2&4&-3&1&3</HP3>
 NCO(X       )=    7
 X       =
   1.00      1.00      2.00      4.00     -3.00      1.00      3.00
 SIGMA > <HP3>P = ORDER(X,X)</HP3>
 NCO(P       )=    7
 P       =
  -3.00      1.00      1.00      1.00      2.00      3.00      4.00
 SIGMA > <HP3>P = ORDER(X,-X)</HP3>
 NCO(P       )=    7
 P       =
   4.00      3.00      2.00      1.00      1.00      1.00     -3.00
 SIGMA > <HP3>Y = ARRAY(7,1# 7)</HP3>
 NCO(Y       )=    7
 Y       =
   1.00      2.00      3.00      4.00      5.00      6.00      7.00
 SIGMA > <HP3>P = ORDER(Y,X)</HP3>
 NCO(P       )=    7
 P       =
   5.00      1.00      2.00      6.00      3.00      7.00      4.00
</XMP>
<H4>R=PROD(arg)
<I1>PROD
<P>The <HP2>PROD</HP2> function generates the <HP2>running product</HP2>
of each row of the argument
array, say <F>X sub 1 ,% X sub 2 ,% ellipsis , % X sub n</F>
and creates an array with components equal to the
running product of the component of the argument:
<F>X sub 1 ,%X sub 1 * X sub 2 ,% ellipsis % X sub 1 * X sub 2 * ellipsis ,X sub  n</F>
<XMP SCALE=0.80>
  SIGMA > <HP3>x=array(6&4,array(24,1#24))</HP3>
  NCO(X       )=    6    4
  X       =
    1.000      2.000      3.000      4.000      5.000      6.000
    7.000      8.000      9.000      10.00      11.00      12.00
    13.00      14.00      15.00      16.00      17.00      18.00
    19.00      20.00      21.00      22.00      23.00      24.00
 
  SIGMA > <HP3>y=prod(x)</HP3>
  NCO(Y       )=    6    4
  Y       =
    1.000      2.000      6.000      24.00      120.0      720.0
    7.000      56.00      504.0      5040.     0.5544E+05 0.6653E+06
    13.00      182.0      2730.     0.4368E+05 0.7426E+06 0.1337E+08
    19.00      380.0      7980.     0.1756E+06 0.4038E+07 0.9691E+08
</XMP>
<H4>R=QUAD(arg1,arg2)
<I1>QUAD
<P>
<?.BR>
The <HP2>quadrature function QUAD</HP2> numerically integrates each row of
<HP2>arg1</HP2> with respect to the scalar step size <HP2>h</HP2> defined by <HP2>arg2</HP2>.
<P>
The result <HP2>R</HP2> has the same dimension as <HP2>arg1</HP2> and the integration constant is
fixed by choosing the first point of the result to be zero.
<P>
The method uses a four-point forward and backward one-strip-formula based
on Lagrange interpolation. We have for the first point of the result:
<DF>
R sub 1 % = % integral from < x sub 1 > to < x sub 1 >  % ( arg sub 1 ) % dx % = 0 
</DF>
<P>
for the second and third points
<DF>
R sub <i+1> % = % R sub i + h over 24 lparen % < 9 f sub i + 19 f sub <i+1> - 5 f sub <i+2>
+ f sub <i+3> > % rparen 
</DF>
<P>
and for all subsequent points
<DF>
R sub i % = % R sub <i-1> + h over 24 lparen % < f sub <i-3> - 5 f sub <i-2> + 19 f sub <i-1>
+ 9 f sub i > % rparen 
</DF>
<P>where the <F>f sub i</F> are elements of <HP2>arg1</HP2> and are assumed to be values of
some functions evaluated at equidistant intervals
with interval width equal to <HP2>h</HP2> (<HP2>h</HP2> being
equal to the value of <HP2>arg2</HP2>).
<?:GRID FRAME='BOX' RULES='NONE' HUNITS='4 8'.>
<?:GRIDSEG.>
<?:GRIDAREA.>
<XMP>
SIGMA > *********************
SIGMA > * SIGMA application *
SIGMA > *  showing use of   *
SIGMA > *   QUAD numeric    *
SIGMA > *   integration     *
SIGMA > *********************
SIGMA > <HP3>x=array(101,0#2*pi)</HP3>
SIGMA > * Function value array
SIGMA > <HP3>y=sin(x)</HP3>
SIGMA > * Step size
SIGMA > <HP3>dx=0.6283186E-01</HP3>
SIGMA > <HP3>print dx</HP3>
 NCO(DX      )=    1
 DX       0.6283186E-01
SIGMA > * Integration of SIN(X)
SIGMA > * in interval 0<=X<+2*PI
SIGMA > <HP3>f=quad(y,dx)</HP3>
SIGMA > * Analytical result
SIGMA > * is   1-COS(X)
SIGMA > <HP3>g=1-cos(x)</HP3>
SIGMA > * Compute the difference
SIGMA > <HP3>erro=(g-f)*10**6</HP3>
SIGMA > * Plot the difference 
SIGMA > *  in units of 10<SUP>-6</SUP>
SIGMA > <HP3>exit</HP3>
PAW > <HP3>opt GRID</HP3>
PAW > <HP3>gra 101 x erro</HP3>
</XMP>
<?:GRIDAREA.>
<ARTWORK NAME=SIGEXA1 WIDTH='11cm' TOPMAR=5MM>
<?:EGRID.>
<?.PA>
<H4>R=SUMV(arg)
<I1>SUMV
<P>The <HP2>SUMV</HP2> function generates the <HP2>running summation</HP2>
of each row of the argument
array, say <F>X sub 1 ,% X sub 2 ,% ellipsis , % X sub i ,% ellipsis ,% X sub n</F>
and creates an array with components equal to the running sum of the
<F>X sub i % </F>:
<F>X sub 1 ,%X sub 1 + X sub 2 ,% ellipsis , % X sub 1 + X sub 2 + ellipsis + X sub i
,% ellipsis , % X sub 1 + X sub 2 + ellipsis + X sub  n</F>&nbsp;.
<XMP SCALE=1.00>
  SIGMA > <HP3> x=array(6&4,array(24,1#24))</HP3>
  NCO(X       )=    6    4
  X       =
    1.000      2.000      3.000      4.000      5.000      6.000
    7.000      8.000      9.000      10.00      11.00      12.00
    13.00      14.00      15.00      16.00      17.00      18.00
    19.00      20.00      21.00      22.00      23.00      24.00
 
  SIGMA > <HP3>y=sumv(x)</HP3>
  NCO(Y       )=    6    4
  Y       =
    1.000      3.000      6.000      10.00      15.00      21.00
    7.000      15.00      24.00      34.00      45.00      57.00
    13.00      27.00      42.00      58.00      75.00      93.00
    19.00      39.00      60.00      82.00      105.0      129.0
</XMP>
 
<H4>R=VMAX(arg) and R=VMIN(arg)
<I1>VMAX
<I1>VMIN
<P>
<?.BR>
The functions <HP2>VMAX</HP2> and <HP2>VMIN</HP2>
return a scalar equal to the largest or smallest element of the array <HP2>arg</HP2>.
<H4>R=VSUM(arg1)
<I1>VSUM
<P>The <HP2>VSUM</HP2> function generates the <HP2> sum</HP2>
of each element of the argument
array, say <F>X sub 1 ,% X sub 2 ,% ellipsis , % X sub i ,% ellipsis ,% X sub n</F>
and creates a scalar whose value is equal to the sum of all the components of X:
<F>%X sub 1 + X sub 2 + X sub 2 + ellipsis + X sub  n</F>&nbsp;.
<XMP SCALE=1.00>
 SIGMA ><HP3> x=array(10)</HP3>
 NCO(X       )=   10
 X       =
   1.00      1.00      1.00      1.00      1.00      1.00      1.00
   1.00      1.00      1.00
 
 SIGMA ><HP3> r=vsum(x)</HP3>
 NCO(R       )=    1
 R         10.0
</XMP>
<?.PA>
<H2>Available library functions
<I1>library functions
<I1>SIGMA library functions
<P>
The library functions available under SIGMA are
listed below. All these functions have a single
argument, unless otherwise indicated.
The number indicated between parentheses corresponds to the
number of the same function in the CERN program library.
<DL TSIZE=10 COMPACT>
<DT>ABS
<DD>ABSolute value
<DT>ACOS
<DD>ArCOSine
<DT>ALOGAM
<DD>LOGarithm of the GAMma Function (C341)
<DT>ASIN
<DD>ArcSINe
<DT>ATAN
<DD>ArcTANgent
<DT>ATAN2
<DD>ArcTANgent2 (2 arguments)
<DT>BESI0
<DD>Mod. Bessel Function I0 (C313)
<DT>BESI1
<DD>Mod. Bessel Function I1 (C313)
<DT>BESJ0
<DD>Bessel Function J0 (C312)
<DT>BESJ1
<DD>Bessel Function J1 (C312)
<DT>BESK0
<DD>Mod. Bessel Function K0 (C313)
<DT>BESK1
<DD>Mod. Bessel Function K1 (C313)
<DT>BESY0
<DD>Bessel Function Y0 (C312)
<DT>BESY1
<DD>Bessel Function Y1 (C312)
<DT>COS
<DD>COSine
<DT>COSH
<DD>Hyperbolic COSine
<DT>COSINT
<DD>COSine INTegral (C336)
<DT>DILOG
<DD>DILOGarithm Function (C304)
<DT>EBESI0
<DD>exp(-|x|)I0(x) (C313)
<DT>EBESI1
<DD>exp(-|x|)I1(x) (C313)
<DT>EBESK0
<DD>exp(x)K0(x) (C313)
<DT>EBESK1
<DD>exp(x)K1(x) (C313)
<DT>ELLICK
<DD>Complete Elliptic Integral K (C308)
<DT>ELLICE
<DD>Complete Elliptic Integral E (C308)
<DT>ERF
<DD>Error Function ERF (C300)
<DT>ERFC
<DD>Error Function ERFC (C300)
<DT>EXP
<DD>EXPonential
<DT>EXPINT
<DD>EXPonential INTegral (C337)
<DT>FREQ
<DD>Normal Frequency Function FREQ (C300)
<DT>GAMMA
<DD>GAMMA Function (C305)
<DT>INT
<DD>takes INTegral part of decimal number
<DT>LOG
<DD>Natural LOGarithm
<DT>LOG10
<DD>Common LOGarithm
<DT>MOD
<DD>Remaindering
<DT>RNDM
<DD>Random Number Generator: <XPH>V1=RNDM(V)</XPH>, with
<XPH>NCO(V1)=NCO(V)</XPH> generates random numbers between <XPH>0</XPH> and <XPH>1</XPH>.
<DT>SIGN
<DD>Transfer of SIGN: V2=SIGN(V,V1), V2=|V|*V1/|V1|
<DT>SIN
<DD>SINe Function
<DT>SINH
<DD>Hyperbolic SINe
<DT>SININT
<DD>SINe INTegral (C336)
<DT>TAN
<DD>TANgent
<DT>TANH
<DD>Hyperbolic Tangent
<DT>SQRT
<DD>SQuare RooT
</DL>
<LBLBOX>Note
Note that ill defined functions will give <XPH>0.</XPH> as result (e.g.
<XPH>SQRT</XPH> of a negative number will return a zero result).
</LBLBOX>
