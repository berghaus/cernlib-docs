<!--############################################################################# 
 |	$Id: using.xml,v 1.3 2001/05/01 17:07:34 rcasellas Exp $
 |- #############################################################################
 |	$Author: rcasellas $
 |														
 |   PURPOSE:
 + ############################################################################## -->

<webpage id="using">
<config param="rcsid" value="$Id: using.xml,v 1.3 2001/05/01 17:07:34 rcasellas Exp $"/>
<config param="rcsdate" value="$Date: 2001/05/01 17:07:34 $"/>
<config param="filename" value="using.html"/>

<head>
<title>Using... </title>
</head>


<chapter>
	<chapterinfo>
		<releaseinfo role="meta">$Id: using.xml,v 1.3 2001/05/01 17:07:34 rcasellas Exp $ </releaseinfo>
		<author>
			<surname>Casellas</surname><firstname>Ramon</firstname>
		</author>
		<copyright><year>2001</year><holder>Ramon Casellas</holder></copyright>
	</chapterinfo>
	<title>Using </title>
	
	
	<!-- Introduction -->
	<sect1><title>Introduction</title>
	<para> In this chapter we will give the basic steps to use the DB2LaTeX XSL Stylesheets.
	<itemizedlist>
		<listitem><para>SGMLBASE corresponds to your SGML root directory. (e.g.
			<filename> /opt/sgml or /usr/lib/sgml)</filename></para></listitem>
		<listitem><para>NWALSHDIR corresponds to the Norman Walsh. (e.g. 
			<filename> /opt/sgml/xsl/nwalsh/docbook)</filename></para></listitem>
	</itemizedlist>
	</para>
	</sect1>
	
	<!-- XSLT Processor -->
	<sect1><title>The XSLT processor</title>
	<para> To transform a XML document using XSL stylesheets you need an XSLT processor. There
	are several commercial/free XSLT processors available. The installation may vary according
	to the processor used. Most processors are written in C++/Java/Perl. In the following 
	sections we will describe hos to use the stylesheets using Java Xalan. Former versions 
	of the stylesheets used to work with XT, but since at the time being the DB2LaTeX XSL
	stylesheets still depend on the Norman Walsh stylesheets and he is considering dropping
	support for XT, DB2LaTeX releases are tested using Xalan for Java Version 2.</para>
	<para> Basically, all XSLT processors start with three parameters: The input XML document,
	the stylesheet to apply and the output filename. The syntaxis depends on your processor.</para>
	
	<sect2><title>Apache Xalan XML</title>
	<para> Xalan is a Java XSLT processor developed by the apache-xml team <ulink
	url="http://xml.apache.orh"> ( Apache XML )</ulink>. There is currently a perl version, a 
	java version and a C++ version. We are getting errors using the C++ version of Xalan, so 
	We use Xalan-J2 instead.</para>

		<sect3><title>Installing the Java Development Kit 1.2-1.3</title>
			<para> To be done. From now on, assume you have a working JDK installation.
			and <filename>java</filename> is in you <filename>PATH</filename>.</para>
			<screen> baldrick(/home/casellas)% which java &#10;/opt/jdk1.3/bin/java&#10;</screen>
			<screen> baldrick(/home/casellas)% java -version &#10;java version "1.3.0"&#10;</screen>
			<screen> Classic VM (J2RE 1.3.0 IBM build cxdev-20000502 (JIT enabled: jitc))&#10;</screen>
		</sect3>
	<itemizedlist>
		<listitem><para> Download and unpack the XalanJ2_0_1. (We have had strange bugs with 
		Strings Ids with previous versions). </para></listitem>
		<listitem><para>The files <filename>xalan.jar, xerces.jar and bsf.jar</filename> will 
		be needed by xalan. Assume there exists a symlink in <filename>$(SGMLBASE)/java</filename>
			</para></listitem>
	</itemizedlist>
	</sect2>
	</sect1>


	<!-- The Norman Walsh Stylesheets -->
	<sect1><title>Norman Walsh XSL stylesheets</title>
		<sect2><title>The DocBook XML DTD 4.1.2</title>
		<para> To Be Done.</para>
		</sect2>

		<sect2><title>NWalsh XSL Stylesheets</title>
		<para><ulink url="http://nwalsh.com/xsl">http://nwalsh.com/xsl</ulink></para>
		</sect2>
	</sect1>

	<!-- DB2LaTeX --> 
	<sect1><title>DB2LaTeX stylesheets</title>
	<para></para>
	</sect1>

	
	<!-- Command Line Interface --> 
	<sect1><title>Applying the stylesheets to yor XML document</title>
	<sect2><title>Command Line Interface</title>
	<screen>
	java -cp $(SGMLBASE)/java/xalan.jar:$(SGMLBASE)/xerces.jar:$(SGMLBASE)l/java/bsf.jar \
	org.apache.xalan.xslt.Process \
	-VALIDATE OFF \
	-IN document.xml \
	-XSL $(NWALSHDIR)/docbook/latex/docbook.xsl \
	-OUT output.tex
	</screen>
	</sect2>

	<sect2><title>Using Makefiles</title>
	<para> It is possible to automate the generation of the LaTeX document by using 
	Makefiles. See the test directory for examples</para>
	</sect2>

	<sect2><title>Precompiled Software</title>
	<para> To be done </para>
	</sect2>
	</sect1>

	<sect1><title>Using PDFLaTeX</title>
	<para> You can use PDFLaTeX to generate you PDF file.</para>
	</sect1>

</chapter>
</webpage>
