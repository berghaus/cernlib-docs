<![CDATA[/* create_transient.cpp */
#include <iostream.h>
#include <iomanip.h> 		// Formatting output string.
#include "HTL/Histograms.h" // Transient histograms.
class Histo_App 
{
public:
  Histo_App() {}
public:
  void run();
  // Create 1D & 2D transient histograms and fill them
  // Print simple properties and global statistics.
private:
  void create1D ();
  void create2D ();
};
//
// Implementation:
//
void Histo_App::run() {
  create1D();
  create2D();
}
void Histo_App::create1D() {
  // Create a histo 1D 
  Histo1D *histo = new Histo1D("Histo_1D", 20, 0.0, 20.0 );
  // Let's fill the histo with 50000 points:
  //
  long i;
  double x, w;
  for( i=0; i<50000; i++ ) {
    x = (i % 22) - 1;
    w = (x-9.5)*(x-9.5)+3;
    histo->fill(x,w);
  }
  // Let's print some properties of the new histo:
  //
  cout << "Histo name: " << histo->name() << endl
       << "Bin count : " << histo->bin_count()
       << " from " << histo->partition().lower_point()
       << " to " << histo->partition().upper_point() << endl << endl;
  // Now display some statistics:
  //
  long in_entries = HStat::in_range_entries_count(*histo);
  long extra_entries = HStat::extra_entries_count(*histo);
  cout << "Entries count: " << (in_entries + extra_entries)
       << " with IN_RANGE: " << in_entries
       << " EXTRA: " << extra_entries << endl;
  //double mean = HStat::mean( *histo );
  //cout << "MEAN (B.C.): " << mean << endl;
  //cout << "RMS  (B.C.): " << HStat::rms(*histo, mean)
  //	<< endl << endl;
  cout << "MEAN (B.C.): " << histo->mean() << endl;
  cout << "RMS  (B.C.): " << histo->rms() << endl;
  // Print histo contents:
  //
  cout << ". UNDERFLOW: " << histo->extra_bin(H_UNDERFLOW).value();
  for( i=0; i<histo->bin_count(); i++ ) {
    cout << endl << ". " << setw(2) << i << ": "
	 << setw(9) << histo->i_bin(i).value() << " +/- "
	 << setw(4) << histo->i_bin(i).error();
  }
  cout << endl << ". OVERFLOW: " << histo->extra_bin(H_OVERFLOW).value();
  cout << endl <<  "TOTAL IN_RANGE: " 
       << HInfo::in_range_value( *histo ) << endl << endl;
  // Print histo with existing HPrinter class from the library:
  //
  HPrinter hp( cout );
  hp.print( *histo );
  delete histo;
}
void Histo_App::create2D()
{
  const int n_bin = 10;
  // Create a 2D histo 
  //
  Histo2D *histo = new Histo2D( "Histo_2D", n_bin, 5., 15., n_bin, 5., 15. );
  // Let's fill the histo with 50000 points:
  //
  double x, w = 0.5;
  for( long i=0; i<50000; i++ ) {
    x = -i*sin(float(i));
    histo->fill(x,x,w);
    histo->fill(20.-x,x,w);
  }
  // Let's print some properties of the new histo:
  //
  cout << "Histo name: " << histo->name() << endl
       << "X: Bin count : " << histo->partition_X().bin_count()
       << " from " << histo->partition_X().lower_point()
       << " to "   << histo->partition_X().upper_point() << endl;
  cout << "Y: Bin count : " << histo->partition_Y().bin_count()
       << " from " << histo->partition_Y().lower_point()
       << " to "   << histo->partition_Y().upper_point() << endl;
  // Now some statistics:
  //
  long in_entries = HStat::in_range_entries_count( *histo );
  long extra_entries = HStat::extra_entries_count( *histo );
  cout << "Entries count: " << (in_entries + extra_entries)
       << " with IN_RANGE: " << in_entries
       << " EXTRA: " << extra_entries << endl;
  cout << "In Range values: " << HInfo::in_range_value( *histo )
       << endl;
  // Print histo contents:
  //
#define EH(h,i,j) 	h->extra_bin(i,j).value()
  cout << endl;
  cout << "(U,O): " << EH( histo, H_UNDERFLOW, H_OVERFLOW )
       << " (I,O): " << EH( histo, H_IN_RANGE, H_OVERFLOW )
       << " (O,O): " << EH( histo, H_OVERFLOW, H_OVERFLOW ) << endl;
  cout << "(U,I): " << EH( histo, H_UNDERFLOW, H_IN_RANGE )
       << " (I,I): " << "XXXXXX"
       << " (O,I): " << EH( histo, H_OVERFLOW, H_IN_RANGE ) <<endl;
  cout << "(U,U): " << EH( histo, H_UNDERFLOW, H_UNDERFLOW )
       << " (I,U): " << EH( histo, H_IN_RANGE, H_UNDERFLOW )
       << " (O,U): " << EH( histo, H_OVERFLOW, H_UNDERFLOW ) << endl;
  cout << endl;
  for( long y=0; y<histo->partition_Y().bin_count(); y++ )
    for( long x=0; x<histo->partition_X().bin_count(); x++ ) {
      if( histo->bin(x,y).value() != 0.0 ) {
	cout << "bin(" << x << "," << y << "): "
	     << histo->bin(x,y).value() << " -/+ "
	     << histo->bin(x,y).error() << endl;
      }
    }
  cout << endl;
  // Print using HPrinter:
  //
  HPrinter hp( cout );
  hp.print( *histo );
  delete histo;
}
int main( int argc, char **argv )
{
  Histo_App app;
  app.run();
}]]>
