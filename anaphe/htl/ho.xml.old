<?xml version="1.0" encoding='ISO-8859-1'?> 
<!-- Changed by: Michel Goossens, 3-Apr-1999 -->
<!-- 	$Id: htl.xml,v 1.4 1999/04/15 11:31:51 goossens Exp goossens $	 -->
<!DOCTYPE document SYSTEM "minilatex.dtd"[
<!ENTITY quot "&#34;">
<!ENTITY percent "!PERCENT!">
<!ENTITY uuml "ü">
<!ENTITY CERNLIB "CERNLIB">
<!ENTITY Excel "Excel">
<!ENTITY GNU  "GNU">
<!ENTITY HBOOK "HBOOK">
<!ENTITY HEP  "HEP">
<!ENTITY HepODBMS "HepODBMS">
<!ENTITY HTL  "HTL">
<!ENTITY LHCPP  "LHC++">
<!ENTITY NICE "Nice">
<!ENTITY OBJ  "Objectivity/DB">
<!ENTITY ODBMS "ODBMS">
<!ENTITY ODMG "ODMG">
<!ENTITY PAW  "PAW">
<!ENTITY SWIG "SWIG">
<!ENTITY UNIX "Unix">
<!ENTITY WNT  "Windows/NT">
<!ENTITY XML  "XML">
<!ENTITY ZEBRA "ZEBRA">
<!ENTITY % misc.new "|minipage">
<!ELEMENT minipage (#PCDATA|includegraphics|caption)*>
<!ENTITY % likepara.new "|texonly|small|footnote">
<!ELEMENT texonly (#PCDATA|par|figure|ref)*>
<!ELEMENT small (#PCDATA|par|emph)*>
<!ELEMENT footnote (#PCDATA|par|emph)*>
<!ENTITY % preformat.new "|alltt|listing|lprout">
<!ELEMENT alltt (#PCDATA|emph|ucom)*>
<!ELEMENT listing (#PCDATA)*>
<!ELEMENT lprout (#PCDATA)*>
<!ENTITY % xref.new "|vref">
<!ELEMENT vref     EMPTY>
<!ATTLIST vref     refid IDREF #REQUIRED>
<!ENTITY % inline.new "|ucom|code|sq">
<!ELEMENT code (#PCDATA)>
<!ELEMENT ucom (#PCDATA)>
<!ELEMENT sq (#PCDATA|code)*>
<!ENTITY % list.new "|descriptiona">
<!ELEMENT descriptiona ((term*,item*)+)>
<!ATTLIST descriptiona width CDATA #REQUIRED>
<!ENTITY nbsp " ">
<!-- External entity files -->
<!ENTITY Histo1Din         SYSTEM "/home/htl/HTLDOC/create_Histo1D.in">
<!ENTITY Histo1Dout        SYSTEM "/home/htl/HTLDOC/create_Histo1D.out">
<!ENTITY Histo1DVarin      SYSTEM "/home/htl/HTLDOC/create_Histo1DVar.in">
<!ENTITY Histo1DVarout     SYSTEM "/home/htl/HTLDOC/create_Histo1DVar.out">
<!ENTITY Histo2Din         SYSTEM "/home/htl/HTLDOC/create_Histo2D.in">   
<!ENTITY Histo2Dout        SYSTEM "/home/htl/HTLDOC/create_Histo2D.out">
<!ENTITY Histo2DVarin      SYSTEM "/home/htl/HTLDOC/create_Histo2DVar.in">   
<!ENTITY Histo2DVarout     SYSTEM "/home/htl/HTLDOC/create_Histo2DVar.out">
<!ENTITY HistoProfilein    SYSTEM "/home/htl/HTLDOC/create_profile.in">
<!ENTITY HistoProfileout   SYSTEM "/home/htl/HTLDOC/create_profile.out">
<!ENTITY HistoTablesin     SYSTEM "/home/htl/HTLDOC/histo_tables.in">
<!ENTITY HistoTablestxt    SYSTEM "/home/htl/HTLDOC/histo.txt">
<!ENTITY HistoTableskumac1 SYSTEM "/home/htl/HTLDOC/histotable.kumac">
<!ENTITY HistoTableskumac2 SYSTEM "/home/htl/HTLDOC/htl2hb.kumac">
<!ENTITY HistoRandomin     SYSTEM "/home/htl/HTLDOC/histo_random.in">
<!ENTITY HistoRandomout    SYSTEM "/home/htl/HTLDOC/histo_random.out">
<!ENTITY NameHistosin      SYSTEM "/home/htl/HTLDOC/name_histos.in">
<!ENTITY NameHistosout     SYSTEM "/home/htl/HTLDOC/name_histos.out">
<!ENTITY Operationsin      SYSTEM "/home/htl/HTLDOC/basic_operations.in">
<!ENTITY Operationsout     SYSTEM "/home/htl/HTLDOC/basic_operations.out">
<!ENTITY ReadHistoin       SYSTEM "/home/htl/HTLDOC/read_histo.in">
<!ENTITY ReadHistoout      SYSTEM "/home/htl/HTLDOC/read_histo.out">
<!ENTITY THistosin         SYSTEM "/home/htl/HTLDOC/create_transient.in">
<!ENTITY THistosout        SYSTEM "/home/htl/HTLDOC/create_transient.out">
<!ENTITY TSliceProjin      SYSTEM "/home/htl/HTLDOC/slice_proj.in">
<!ENTITY TSliceProjout     SYSTEM "/home/htl/HTLDOC/slice_proj.out">
]>
<document class="hepodbms">
<frontmatter>
<title>HepODBMS User Manual</title>
<author><name>Eva Arderiu, Dirk D&uuml;llmann, Romuald Knap, Jamie Shiers</name><inst>CERN IT/ASD</inst>

<thanks>
</thanks>
</author>
</frontmatter>
<bodymatter>

<!--1-->
<chapter>
<stitle>Overview</stitle>

<section>
<stitle>What is HepODBMS?</stitle>
<index item="CERNLIB"/>

<par>
&HepODBMS; is a C++ class library that provides a simplified and consistent
interface to underlying &ODMG;-compliant Object Databases (&ODBMS;).
It provides high-level clustering and locking strategies, simplifies database
session and transaction control and features important to HEP applications,
such as highly scalable event collections and event tags (<sq>Ntuple</sq> replacement).
</par>

<par>
The current implementation of &HepODBMS; is based upon &OBJ;. A basic
knowledge of &OBJ; concepts and terminology is therefore
assumed. Further details regarding &OBJ; can be found via
<url name="http://wwwinfo.cern.ch/asd/lhc++/Objectivity/index.html"/>
</par>

<par>
The goals of &HepODBMS; can be summarised as follows:
</par>

<itemize>
<item>Provide an insulation layer to minimize dependencies to a given
database vendor or release.</item>
<item>Provide high level base classes that encapsulate features such
as clustering and locking strategies, database session and transaction
control, event collections, selection predicates, tagDB access and
calibration.</item>
<item>Achieve the above whilst not introducing any significant
performance or storage overhead penalties.</item>

</itemize>

<par>
&HepODBMS; is composed of a number of packages. These are as follows:
</par>

<descriptiona width="Persistent Helper classes">
<term>Insulation Layer</term>
<item>A set of header files providing a release-independent interface
to the most commonly-used subset of the &OBJ; API.</item>
<term>Transient Helper classes</term>
<item>A high-level, simplified interface to the database.</item>
<term>Persistent Helper classes</term>
<item>Object clustering and naming and other utility classes.</item>
<term>Tags and Collections</term>
<item>Tag, event collections and selection classes.</item>
<term>Miscellaneous</term>
<item>Timers, statistics, TCL application class and so forth.</item>
<term>Conditions DB</term>
<item>A <sq>calibration</sq> DB or <sq>conditions</sq> DB subpackage.</item>
</descriptiona>

<par>
Before we describe these sub-packages in more detail, we first introduce a number of basic concepts.
</par>

</section>

<section>
<stitle>Basic Concepts</stitle>

<par>
In this section, we introduce a few essential concepts that need to be understood
in order to work with an &ODBMS; such as &OBJ;. A more detailed discussion of
&OBJ; can be found in the Objectivity Technical Overview, available via
<url name="http://wwwinfo.cern.ch/asd/lhc++/Objectivity/TechOver/index.htm"/>.
</par>

<par>
An &OBJ; <emph>federated database</emph> consists of:
</par>

<itemize>
<item>A <emph>bootfile</emph></item>
<item>A database catalogue (the <emph>federation</emph>)</item>
<item>One of more database files</item>
</itemize>

<par>
A <emph>bootfile</emph> is simply a small configuration file that points
to the real location of the federation and contains a number of other
parameters, explained later.</par>

<par>
The database catalogue contains the names and locations of all
of the databases making up that particular federated database. 
Each database is specified by the full pathname and filename and hostname on which
it resides. In addition, the catalogue contains the class definition, or <emph>schema</emph>,
of all objects that reside in the database. Before an object can be stored in the database,
the corresponding class definition must be defined in a step called <emph>schema processing</emph>.
</par>

<par>
In fact, each database also has internal structure, but this we defer until the section
concerning object clustering.</par>

<par>
In order to work with a federated database, an application must first
initialise a <emph>database session</emph>. For &CERNLIB; users, this
can be considered equivalent to a call to the &HBOOK; or &ZEBRA;
initialisation rountines, <code>HLIMIT</code> or <code>MZEBRA</code>
respectively.
</par>

<par>
Databases process data in units of work called <emph>transactions</emph>. Transactions
are a fundamental technique for providing consistency. Either all of the changes that
form part of a transaction are made - if the transaction successfully <emph>commits</emph>,
or none are - if it <emph>aborts</emph>. This is true for both reading and writing - a
transaction must be started before a single object is read from the database. This
allows the database to ensure that the application sees a consistent state, regardless
of changes being made concurrently by other users.
</par>

<par>
Thus, the simplest database application would perform the following steps:
</par>

<itemize>
<item>Initialise.</item>
<item>Start a transaction (in read or update mode).</item>
<item>Read or write one or more objects.</item>
<item>Commit the transaction and terminate.</item>
</itemize>

<par>
These steps are shown in the following code fragment.</par>

<verbatim>
#include "HepODBMS/clustering/HepDbApplication.h"
    HepDbApplication myApp("MY_FDB"); 
    // initialize db connection 
    myApp.Init();        // initialise the db session 
    // start an update transaction if you are going to write to a database 
    myApp.startUpdate(); // start an update transaction 
    ---- work with the objects in a database ------------ 

    // commit all changes made during this transaction 
    myApp.commit(); 

</verbatim>

</section>

<section>
<stitle>The Storage Hierarchy of &OBJ;</stitle>

<par>
As described above, &OBJ; supports a so-called <emph>federated
database</emph>, which is a single, logical database composed of up to
65536 <emph>physical databases</emph>.  Each physical database is
simply a file, stored on a specified host. The physical databases - or
files - consist of <emph>database pages</emph> in which the persistent
objects are stored. The size of each database page is constant within
a given federation and can vary between 512 bytes and 64KB. Typical
values are 1KB - 8KB.
</par>

<par>
Between the database and page there is an additional layer, called a
<emph>container</emph>.  Containers are sets of contiguous database
pages within a given file. As the unit of I/O in &OBJ; is always a
multiple of database pages, it is useful - for performance reasons -
to <emph>cluster</emph> objects that are likely to be accessed
together on the same - or adajacent - pages. The concept of a
container provides a mechanism for performing such clustering at a
finer level than would be possible using simply files.
</par>
</section>

<section>
<stitle>Working with Persistent Objects</stitle>

<par>
In a <sq>normal</sq> - i.e. <emph>transient</emph> - C++ application,
objects are defined in C++ header files, created using the <code>new</code>
operator and then accessed using C++ pointers.
</par>

<par>
In a persistent application - that is, one that uses <sq>database objects</sq>,
one works with <emph>schema</emph>, an enhanced (<emph>overloaded</emph>) <code>new</code>
operator and <sq>smart pointers</sq>, or <sq>references</sq>. These are all
used in essentially the same way as in the transient case, as is shown in the following example.
</par>

<verbatim>

// Transient example

// Persistent example

</verbatim>

<par>
In addition to these small changes, it must be stressed that access to persistent
objects <emph>must</emph> take place within a <emph>transaction</emph>,
which in turn must be within an active database session.</par>

<par>
Thus, before creating new persistent objects, or accessing existing ones, an application
must first initialise a database session and start a read or update transaction, as 
appropriate.</par>

<par>
In order for any changes to be made persistent, the corresponding transaction must 
<code>commit</code>. Simply terminating the process will result in an abort of any
outstanding transactions and the changes will <code>not</code> be made to the database.
</par>

</section>

<section>
<stitle>The &HepODBMS; Insulation Layer</stitle>

<par>
As different releases of &OBJ; have small variations in the API, and in order
to provide the possibility of migration between underlying database systems -
an extremely important issue when dealing with timescales of the order of the LHC - 
it is <code>strongly</code> recommended that applications using the &HepODBMS;
insulation layer, rather than make direct calls to the &OBJ; API.
</par>

<par>
The &HepODBMS; insulation layer consists of two parts:
</par>

<itemize>
<item>A set of fixed-length types, as defined by the &ODMG;</item>
<item>High-level interface classes to the database itself, and for
working with persistent objects.</item>
</itemize>

<par>
Fixed-length types are required to support <emph>platform heterogeneity</emph> - that is,
the possibility of storing objects on a machine of one architecture, such as
a Sun, and reading them back on another - perhaps a Digital Unix system.
As the native language types - <code>int, float</code> etc. - do not have
strict definitions, the &ODMG; introduces fixed length types, as shown
in the table below. These types should <code>always</code> be used as
data members of persistent objects, rather than the native types.
</par>

<table id="tab-odmg" loc="h">
<caption>&ODMG; types and their meaning</caption>
<par>
<tabular preamble="ll">
<row><cell><emph>&ODMG; type</emph></cell>
     <cell><emph>Definition</emph></cell></row>
<row><cell><code>d_Short</code></cell><cell>16bit signed integer</cell></row>
<row><cell><code>d_Long</code></cell><cell>32bit signed integer</cell></row>
<row><cell><code>d_Short</code></cell><cell>16bit unsigned integer</cell></row>
<row><cell><code>d_UShort</code></cell><cell>32bit unsigned integer</cell></row>
<row><cell><code>d_ULong</code></cell><cell>32bit IEEE float</cell></row>
<row><cell><code>d_Float</code></cell><cell>64bit IEEE float</cell></row>
<row><cell><code>d_Double</code></cell><cell>16bit signed integer</cell></row>
<row><cell><code>d_Char</code></cell><cell>8bit ASCII character</cell></row>
<row><cell><code>d_Octet</code></cell><cell>8bit - no interpretation</cell></row>
<row><cell><code>d_Boolean</code></cell><cell>0 or 1</cell></row>
</tabular>
</par>
</table>

<par>
The &HepODBMS; interface classes for working with persistent objects are
described in the next section.
</par>

</section>

<section>
<stitle>Working with Persistent Objects</stitle>

<par>
In order to work with persistent objects, classes to handle the database session and
transactions are needed, as well as classes to deal with databases, containers
and persistent objects themselves.
</par>

</section>

<section>
<stitle>Object Clustering</stitle>
</section>

<section>
<stitle>Object Naming</stitle>
</section>

<section>
<stitle>Event Collections</stitle>
</section>

<section>
<stitle>Event Tags</stitle>
</section>

<section>
<stitle>Conditions Database</stitle>
</section>

<section>
<stitle>Examples</stitle>
</section>
</chapter>

</bodymatter>
</document>
