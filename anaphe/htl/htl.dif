3c3
< <!-- 	$Id: htl.xml,v 1.7 1999/04/22 07:36:38 goossens Exp $	 -->
---
> <!-- 	$Id: htl.xml,v 1.4 1999/04/15 11:31:51 goossens Exp goossens $	 -->
128,129c128,129
< years. This manual is written assuming a basic familiarity with the
< &HBOOK; package (see Table <ref refid="tab-hbook"/>).
---
> years. This manual is written assuming a basic familiarity with 
> &HBOOK; (see Table <ref refid="tab-hbook"/>).
132c132
< <table id="tab-hbook" loc="h">
---
> <table id="tab-hbook">
135c135
< <tabular preamble="ll">
---
> <tabular preamble="ll" loc="h">
206d205
< 
219a219,223
> <par>
> These issues, especially the maintainability and high degree of decoupling, are of
> particular importance to very long-term projects, such as those at the LHC, where
> change and migration must be assumed and planned for.
> </par>
229c233
< is based on the use of the non-templated classes that should be used in
---
> is based on the use of the non-templated classes that are recommended for use in
300c304
< such operations has been omitted in the interests of clarify.</par>
---
> such operations has been omitted in the interests of clarity.</par>
305c309
< IDs and is worthy of note. Consider the following code fragment:
---
> IDs and needs further explanation. Consider the following code fragment:
336c340
< network in database pages.  Effective clustering minimises unecessary
---
> network in database pages.  Effective clustering minimises unnecessary
384c388
< histogram to avoid memory leakages.</par>
---
> histogram to avoid memory leaks.</par>
486c490
<  T_Histo1D *histo1 = new Histo1D("A 1D transient histogram",20,0.,40.);
---
> Histo1D *histo1 = new Histo1D("A 1D transient histogram",20,0.,40.);
801c805
< Both the class names and type of vector used depends on whether transient or persisten
---
> Both the class names and type of vector used depends on whether transient or persistent
883c887
< interface.  The first argument, if any, specifies where the histo
---
> interface.  The first argument, if given, specifies where the histogram
885c889
< clustering hint is the container that contains the source histo in the
---
> clustering hint is the container that contains the source histogram in the
887c891
< any, specifies how the histo should be cloned:
---
> any, specifies how the histogram should be cloned:
891,892c895,896
< <item>if it equals 0 then only the structure is cloned;</item>
< <item>otherwise the data is also copied (default).</item>
---
> <item>Specifying a value of 0 will result in a clone of just the structure;</item>
> <item>A non-zero argument, which is also the default, will cause the data to be copied in addition.</item>
895c899
< <par>Example of cloning in the persistent and transient case follow.</par>
---
> <par>An example of cloning in the persistent and transient case follows.</par>
909c913
< T_Histo1D *h1D = new Histo1D( "Histo1: parabolic function", 20,0.,20.); 
---
> Histo1D *h1D = new Histo1D( "Histo1: parabolic function", 20,0.,20.); 
911c915
< T_Histo1D *clone_1D = h1D->clone();   // Clone 'h1D' structure and data
---
> Histo1D *clone_1D = h1D->clone();   // Clone 'h1D' structure and data
958,964c962,964
< <par>
< <code>Ref_Like_Current</code> designates a reference to the real type of
< the current histogram class with all its template arguments.</par>
< <par>
< Notice that operations with another histogram exists with two
< signatures, the first one (Ref_Like_Current) allowing to directly assign the 
< result of an operation.</par>
---
> <par>Notice that operations with another histogram exists with two
> signatures, the first one allowing to directly assign the result of
> an operation.</par>
1007c1007,1010
< The techniques described in this section only apply to persistent &HTL; histograms.
---
> This section describes a number of techniques for handling the naming
> and location of persistent histograms in the database. As such, 
> this section only applies to persistent &HTL; histograms
> as they 
1014,1015c1017,1018
< The Object Database Management Group (&ODMG;) standard specifies that
< persistent objects are created using a <code>new()</code> operator
---
> The Object Database Management Group (&ODMG;) standard for Object Databases 
> specifies that persistent objects are created using a <code>new()</code> operator
1076c1079
< HepRef(PProfileHisto) ProfileHisto (const char *a_title, Size n,
---
> HepRef(PProfileHisto) ProfileHisto1D (const char *a_title, Size n,
1079c1082
< HepRef(PProfileHistoVar) ProfileHistoVar(const char *,
---
> HepRef(PProfileHistoVar) ProfileHisto1DVar(const char *,
1346,1347d1348
< <term><code>virtual void map_point( double a_point, Index &amp;an_index, Extra_Index &amp;an_extra_index )</code></term>
< <item>Bin mapped to point <sq><code>a_point</code></sq>.</item>
1552c1553
< <description>
---
> <descriptiona width="HistoProfile">
1577c1578
< </description>
---
> </descriptiona>
1609c1610,1611
< work at CERN:
---
> work at CERN (replace <emph>pro</emph> by <emph>new</emph> or
> <emph>dev</emph> to get the new or development versions as required):
1615,1616c1617,1618
< setenv HEP_ODBMS_DIR $LHCXXTOP/specific/$PLATF/HepODBMS/dev51
< setenv HISTOODIR $LHCXXTOP/specific/$PLATF/HTL/dev
---
> setenv HEP_ODBMS_DIR $LHCXXTOP/specific/$PLATF/HepODBMS/pro
> setenv HISTOODIR $LHCXXTOP/specific/$PLATF/HTL/pro
1669,1672c1671,1674
< Let us emphasise one more that if you are running in an environment
< created by the LHC++ setup procedure then there is nothing to do,
< otherwise you must modify your shared library path to make sure that
< such libraries are visible.
---
> Provided that your environment is already configured for &LHCPP;, no furher
> setup is required. If not, as a mininum your shared library path must
> include the directory where the &HTL; library (and also &OBJ;, for
> the persistent version) is located.
1711,1712c1713
< occurrences of <code>PHisto</code> to <code>Histo</code> and all occurences of
< <code>HepRef</code> to normal C++ pointers.
---
> occurrences of <code>PHisto</code> to <code>Histo</code>
1851c1852
< defined areas of code.
---
> defined areas of the code.
1857c1858
< efficient approach is to estimate what the critical part of the code is,
---
> efficient approach is to estimate where the critical sections of the code lie,
1867c1868
< The procedure described above was that use in the case of &HTL;. In other words,
---
> The procedure described above was that used in the case of &HTL;. In other words,
1870c1871
< methods, which can be called millions of times. A
---
> methods, that can be called millions of times. A
1874c1875
< the performance was measured and tuned it using a simple code profiler.
---
> the performance was measured and tuned using a simple code profiler.
1881c1882
< can be provided if required.
---
> is available on request.
1893,1896c1894,1899
< each.  The benchmark is focused on filling performance. The I/O part
< is neglected since histograms are pretty small objects. It would be
< anyway difficult to assess the I/O overhead, since &OBJ; transactions
< ensure that buffers are synced on disk, while &HBOOK; I/O does not.
---
> each.  The benchmark is focused on filling performance. 
> 
> The I/O part is more difficult to compare directly and is not included
> in these comparisons. &OBJ;, used by persistent &HTL;, ensures that all data
> is written to disk as part of a transaction. In the case of &HBOOK; 
> buffers are not flushed and so a comparison of the two is not meaningful.
1901c1904
< and thus use more CPU.
---
> and thus use CPU.
