head	1.1;
access;
symbols;
locks
	goossens:1.1; strict;
comment	@# @;


1.1
date	99.09.07.06.58.19;	author goossens;	state Exp;
branches;
next	;


desc
@mods for version 99b
@


1.1
log
@Initial revision
@
text
@<?xml version='1.0'?>
<!-- makehtml.xsl --> 
<!DOCTYPE xsl:stylesheet [
<!ENTITY lt     "<"> 
<!ENTITY gt     ">"> 
<!ENTITY br     "\n">
<!ENTITY nbsp   "&#160;">
]>
<!-- XSL Style sheet, DTD omitted -->
<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/XSL/Transform/1.0"
  xmlns:date="http://www.jclark.com/xt/java/java.util.Date"
  xmlns:xt="http://www.jclark.com/xt"
  extension-element-prefixes="xt">

<xsl:output method="html"/>
<xsl:preserve-space elements="*"/>

<!-- 
  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  + Start of macro templates                                        +
  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
-->

<xsl:template name="footer">
 <hr /><address>
  <xsl:choose>
   <xsl:when test="extension-function-available('date:to-string') and extension-function-available('date:new')">
 Last updated: mg <xsl:value-of select="date:to-string(date:new())"/>
    </xsl:when>
  <xsl:otherwise>
 Last updated: mg 
  </xsl:otherwise>
  </xsl:choose>
 <br />
 </address>
</xsl:template>

<xsl:template name="makeref">
  <xsl:param name="linkend"/>
  <xsl:variable name="targets" select="//node()[@@id=$linkend]"/>
  <xsl:variable name="target" select="$targets[1]"/>
  <xsl:variable name="refelem" select="name($target)"/>

  <xsl:choose>
    <xsl:when test="$refelem=''">
      <xsl:text>[xref to non-existant id: "</xsl:text>
      <xsl:value-of select="$linkend"/>
      <xsl:text>"]</xsl:text>
    </xsl:when>
    <xsl:otherwise>
<!-- set current node to the one containing the id requested -->
      <xsl:apply-templates mode="makerefa" select="$target"/>
<!-- on return we will have the correct filename prepended -->
      <xsl:value-of select="$linkend"/>
<!-- finally we append the relative link end identifier -->
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!-- xref to previous and last articles -->
<xsl:template name="xrefpanel">
  <xsl:param name="home"/>
    <table width="95%" align="center" rules="none">
      <tr valign="top">
        <th class="titlebar" width="75%" colspan="3">
         <xsl:value-of select="//title"/>
        </th>  
      </tr>
      <tr>
        <td>
<!--            <img src="images/back.gif" width=32 height=26 border=0 
              align="left" alt="[Previous slide]">-->
<xsl:if test="preceding-sibling::chapter">
  <a href="{concat($MasterFile,generate-id(preceding-sibling::chapter[1]))}.html"><img src="left.gif" border="0" alt="PREVIOUS"/></a>
</xsl:if>
        </td>
        <td align="center">
  <a href="{concat($MasterFile,generate-id(//chapter[1]))}.html"><img src="up.gif" border="0" alt="FIRST"/></a>
  <a href="{concat($MasterFile,generate-id(//chapter[last()]))}.html"><img src="down.gif" border="0"  alt="LAST"/></a>
        </td>
        <td align="right">
<xsl:if test="following-sibling::chapter">
  <a href="{concat($MasterFile,generate-id(following-sibling::chapter[1]))}.html"><img src="right.gif" border="0"  alt="NEXT"/></a>
<!--            <img src="images/back.gif" width=32 height=26 border=0 
              align="left" alt="[Previous slide]">-->
</xsl:if>
        </td>
     </tr>
    </table>
</xsl:template>

<xsl:template name="makeheading">
  <xsl:choose>
    <xsl:when test="ancestor::appendix">
      <xsl:number count="chapter" format="A."/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:number format="1." count="chapter"/>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:choose>
    <xsl:when test="ancestor::section">
      <xsl:number level="multiple" 
                  count="section|subsection"
                  format="1.1. "/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text> </xsl:text>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template name="sectionhead">
  <xsl:param name="level" select="1"/>
  <xsl:element name="H{$level}">
  <xsl:choose>    
    <xsl:when test="../@@id">
      <A NAME="{../@@id}">
      <xsl:call-template name="makeheading"/>
      </A>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="makeheading"/>
    </xsl:otherwise>
  </xsl:choose>
  </xsl:element>
</xsl:template>

<!-- 
  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
  + Start of template matches                                       +
  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
-->

<xsl:template match="/">
 <xsl:for-each select="//chapter">
  <xsl:variable name="divname" select="concat(@@id,'.html')"/>
  <p><a href="{$divname}">
   <xsl:choose>
     <xsl:when test="ancestor::back">
      <xsl:text>Appendix </xsl:text>
      <xsl:number format="A" level="single" count="chapter"/><xsl:text>. </xsl:text>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>Chapter </xsl:text>
      <xsl:number format="1" level="single" count="chapter"/><xsl:text>. </xsl:text>
     </xsl:otherwise>
   </xsl:choose>
   <xsl:value-of select="stitle"/>
  </a></p>
  <xsl:text>
  </xsl:text>
 </xsl:for-each>
 <xsl:apply-templates/>
</xsl:template>

<!--   ================ Frontmatter element ======================= -->
<xsl:template match="frontmatter">
</xsl:template>

<!-- ===================== Bodymatter element ================= -->

<xsl:template match="chapter">
  <xsl:variable name="file" select="concat(@@id,'.html')"/>
  <xt:document method="html" href="{$file}">
	 <html> 
	 <head>
	 <title><xsl:value-of select="stitle"/></title>
 <STYLE TYPE="text/css">
<xsl:text>body       { background: white; color: black}
 P.CENTERP  { text-align: center}
 TD.LISTING { background: #88FFFF; color: black; white-space: pre}
 tt         { color: red }
</xsl:text>
 </STYLE>
	 </head>
	 <body>
         <xsl:apply-templates/>
	<xsl:call-template name="footer"/>
	</body>
	</html>
  </xt:document>
</xsl:template>

<xsl:template match="bodymatter|part|section|subsection|
                     subsubsection|paragraph|subparagraph">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="appendix">
<H2>Appendices</H2>
  <xsl:apply-templates/>
</xsl:template>

<!-- ========= Section headings ============ -->
<xsl:template match="part/stitle">
<H2>!PART! <xsl:number count="part" format="I. "/>
  <xsl:apply-templates/></H2>
</xsl:template>
<xsl:template match="chapter/stitle">
  <xsl:call-template name="sectionhead">
    <xsl:with-param name="level" select="1"/>
  </xsl:call-template>
</xsl:template>
<xsl:template match="section/stitle">
  <xsl:call-template name="sectionhead">
    <xsl:with-param name="level" select="2"/>
  </xsl:call-template>
</xsl:template>
<xsl:template match="subsection/stitle">
  <xsl:call-template name="sectionhead">
    <xsl:with-param name="level" select="3"/>
  </xsl:call-template>
</xsl:template>
<xsl:template match="subsubsection/stitle">
  <xsl:call-template name="sectionhead">
    <xsl:with-param name="level" select="4"/>
  </xsl:call-template>
</xsl:template>
<xsl:template match="paragraph/stitle">
  <xsl:call-template name="sectionhead">
    <xsl:with-param name="level" select="5"/>
  </xsl:call-template>
</xsl:template>
<xsl:template match="subparagraph/stitle">
  <xsl:call-template name="sectionhead">
    <xsl:with-param name="level" select="6"/>
  </xsl:call-template>
</xsl:template>

<!-- ========= Emphasis ============ -->

<xsl:template match="emph">
<EM><xsl:apply-templates/></EM>
</xsl:template>
<xsl:template match="ucom">
<B><xsl:apply-templates/></B>
</xsl:template>
<xsl:template match="textbf">
<B><xsl:apply-templates/></B>
</xsl:template>
<xsl:template match="textsc">
  <xsl:apply-templates/>
</xsl:template>
<xsl:template match="textsf">
  <xsl:apply-templates/>
</xsl:template>
<xsl:template match="textsl">
<I><xsl:apply-templates/></I>
</xsl:template>
<xsl:template match="texttt|code">
<TT><xsl:apply-templates/></TT>
</xsl:template>
<!-- ====== quotes, footnotes, verbatim ====== -->
<xsl:template match="footnote">
<xsl:text>(</xsl:text><xsl:apply-templates/><xsl:text>)</xsl:text>
</xsl:template>
<xsl:template match="footnote|quote|quotation">
<BLOCKQUOTE>
<xsl:apply-templates/>
</BLOCKQUOTE>
</xsl:template>
<xsl:template match="sq">
<xsl:text>"</xsl:text>
<xsl:apply-templates/>
<xsl:text>"</xsl:text>
</xsl:template>
<xsl:template match="verbatim|alltt">
<TABLE><TR><TD CLASS="PRE"><PRE><xsl:apply-templates/></PRE></TD></TR></TABLE>
</xsl:template>
<xsl:template match="listing">
<TABLE><TR><TD CLASS="LISTING"><PRE><xsl:apply-templates/></PRE></TD></TR></TABLE>
</xsl:template>
<xsl:template match="lprout">
<TABLE><TR><TD CLASS="LPROUT"><PRE><xsl:apply-templates/></PRE></TD></TR></TABLE>
</xsl:template>
<xsl:template match="verb">
<TT><xsl:apply-templates/></TT>
</xsl:template>
<!-- ============ Lists ============== -->
<xsl:template match="description|descriptiona">
<DL>
<xsl:apply-templates/>
</DL>
</xsl:template>
<xsl:template match="description/term | descriptiona/term">
<DT><xsl:apply-templates/></DT>
</xsl:template>
<xsl:template match="description/item | descriptiona/item">
<DD><xsl:apply-templates/></DD>
</xsl:template>
<xsl:template match="enumerate|bibliography">
<OL>
<xsl:apply-templates/>
</OL>
</xsl:template>
<xsl:template match="itemize">
<UL>
<xsl:apply-templates/>
</UL>
</xsl:template>
<xsl:template match="enumerate/item|itemize/item|bibliography/bibitem">
<LI><xsl:apply-templates/></LI>
</xsl:template>
<!-- ======== inline and display math =========== -->
<xsl:template match="inlinemath">
<!--Leave as LaTeX text in tt -->
<xsl:apply-templates/>
</xsl:template>
<xsl:template match="displaymath|equation|eqnarray|array">
<PRE>
<!--Leave as LaTeX text in pre -->
<xsl:apply-templates/>
</PRE>
</xsl:template>
<!-- ===== everything that can go into a paragraph ===== -->
<xsl:template match="par">
<P>
<xsl:apply-templates/>
</P>
</xsl:template>
<!-- ===== tabular ===== -->
<xsl:template match="tabular">
<TABLE>
<xsl:apply-templates/>
</TABLE>
</xsl:template>
<xsl:template match="tabular/row">  
<TR>
<xsl:apply-templates/>
</TR>
</xsl:template>
<xsl:template match="tabular/row/cell">  
<TD>
<xsl:apply-templates/>
</TD>
</xsl:template>
<!-- ======= "floats" and their contents ========= -->
<xsl:template match="figure|table">
<xsl:apply-templates/>
</xsl:template>
<xsl:template match="figure/caption | table/caption">
  <P><B><xsl:apply-templates/></B></P>
</xsl:template>
<xsl:template match="includegraphics">
<!-- <P><OBJECT ID="{ancestor(figure)/@@id}" DATA="{@@file}.gif"
   TYPE="image/gif" /></P> -->
<P CLASS="CENTERP"><A NAME="{ancestor::figure/@@id}"><IMG SRC="{@@file}.gif"/></A></P>
</xsl:template>
<!-- url -->
<xsl:template match="url">
<A HREF="{@@name}">here</A>
</xsl:template>
<!-- Index commands (LaTeX-only) -->
<xsl:template match="index">
</xsl:template>
<!-- small, texonly -->
<xsl:template match="small">
</xsl:template>
<xsl:template match="texonly">
</xsl:template>

<!-- ======== Cross-references ======== -->
<xsl:template match="cite|pageref|ref">
 <a>
 <xsl:attribute name="href">
   <xsl:call-template name="makeref">
     <xsl:with-param name="linkend" select="@@refid"/>
   </xsl:call-template>
 </xsl:attribute>
 <xsl:text>[</xsl:text><xsl:value-of select="@@refid"/><xsl:text>]</xsl:text>
 </a>
</xsl:template>

<xsl:template mode="makerefa" match="*">
  <xsl:variable name="n" select="ancestor::chapter[@@id]/@@id"/>
  <xsl:choose>
    <xsl:when test="ancestor::chapter">
      <xsl:variable name="n" select="concat($n,'.html#')"/>
      <xsl:value-of select="$n"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>Invalid reference</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!--
<xsl:template match="*[@@id]" priority="-1">
  <a name="#{@@id}"><xsl:apply-templates/></a>
</xsl:template>

<xsl:template match="*">
  <xsl:apply-templates/>
</xsl:template>
-->

</xsl:stylesheet>

@
