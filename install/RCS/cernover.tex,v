head     1.1;
branch   ;
access   ;
symbols  ;
locks    jamie:1.1; strict;
comment  @% @;


1.1
date     94.03.09.13.16.05;  author jamie;  state Exp;
branches ;
next     ;


desc
@initial checkin
@



1.1
log
@Initial revision
@
text
@\chapter{Intended audience}

This manual is aimed primarily at those people responsible for the
installation of the CERN Program Library on systems at CERN or
elsewhere. Some of the material is only relevent for the
CERN Program Library section of the CN/ASD group at CERN.

Having read this manual you should be able to:

\begin{enumerate}
\item
Install all or part of the CERN Program Library on one of the 
supported platforms.
\item
Understand how to port the Program Library to a new platform.
\end{enumerate}

Certain sections of this manual will also be of interest
to software developers, such as Appendix \ref{sect-FLAGS},
where the \PATCHY{} flags are described and Appendix \ref{sect-PREFIX},
where reserved routine and common block prefixes are listed.

\chapter{Overview of the CERN Program Library and related environment}
The CERN Program  Library is a large collection  of general purpose programs
maintained  and offered  in both  source and  object code  form on  the CERN
central computers.   Most of these programs  were developed at CERN  and are
therefore  oriented towards  the  needs of  a  physics research  laboratory.
Nearly all, however, are of  a general mathematical or data-handling nature,
applicable to a wide range of problems.
 
\section{Contents and Organization of the Library}
The library contains several thousand subroutines and complete programs which are
grouped  together  by  logical  affiliation into several hundred program
packages. 80\%  of the programs are  written in FORTRAN and  the remainder in
assembly code, or C  usually with  a FORTRAN  version also  available.  The
language supported is currently Fortran 77.
 
Each package is assigned a unique code, consisting of a letter
and three or four digits. The  letter is used to indicate the category
in which the program or package resides. A package  consists of one or more related
subprograms with one package name and one or more user-callable entry names,
all described briefly in a {\tt Short write-up}~\cite{bib-CERNLIB}, and if necessary, an additional
{\tt Long  write-up}.  The terms under which the library material and associated
documentation may be distributed are given below.
 
\section{Availability and Charging}
\begin{itemize}
\item
Network  access  is the  primary distribution method.  
In order to gain  access, users must register the node
name of  their computer with  the Program  Library Office.  This  service is
free of charge.  Distribution on  magnetic tape is possible but discouraged.
This  service is  free for  requests from  institutes in  member states  but
implies  a  handling charge  of  1000  Swiss  Francs otherwise.
\item
Non  HEP academic and  not-for-profit organizations are offered  a choice
between:
\begin{enumerate}
\item
registered network access for one  year for a registration fee of 1000
Swiss Francs. This service is free for physics departments of
institutes in CERN member states.
\item
a one time tape copy for  a handling charge of 2000 Swiss Francs.  
Network access is strongly encouraged and tape distribution
will only be performed if network access is not possible.
\end{enumerate}
\item
Commercial users are offered a choice between
\begin{enumerate}
\item
registered  network access  for 1 year  for a base  fee of  5000 Swiss Francs
\item
a one time  tape copy for a base fee of 20000  Swiss Francs.
\end{enumerate}
These fees are doubled for requests coming from non-member states.
\end{itemize}
 
The  Library  is   not  available  for  any  purpose   related  to  military
applications.
 
Distribution  to  organizations  not  covered  by the  above  rests  at  the
discretion  of  the  Director-General.    Machine  readable  copies  of  the
documentation are provided with the library and recipients are free to make
copies  for  their  users.   Paper  copies of  the  documentation  are  made
available  for  a  charge  which  covers the  printing  and  handling  cost.
Charging is waived for cumulative orders of less than 100 Swiss Francs.
 
If  your organisation is  expected to pay a  fee as
described above,  it will be  billed by CERN after the material
has been shipped. Please include special
billing address and instructions, if any, with the request.
 
As of the  publication date of this  document the member states  of CERN are
Austria, Belgium, Czech Republic, Denmark, Finland, France, Germany, Greece,
Hungary, Italy, The Netherlands, Norway, Poland, Portugal, Slovak Republic, Spain, Sweden,
Switzerland and the United Kingdom.  

States with Observer status are Israel, the Russian Federation, Turkey, Yugoslavia (status
suspended after UN embargo, June 1992), the European Commission and Unesco.  
 
\section{Conditions of Use Outside CERN}
 
Programs  and  documentation are  provided  solely  for  the  use of  the 
organization to which  they are distributed, and may not  be redistributed or
reproduced in  large numbers without the  express agreement of  CERN.  Note
that such agreement may have to be established somewhere else in addition to
or instead of CERN in the case of programs originating from sources outside
CERN.  The  appropriate Short  Write-up gives information  about authorship.
The material cannot be sold.  CERN should be given credit in all references,
library documentation, and publications based on the programs.
 
If the programs are  modified beyond what is necessary to  adapt them to the
local  machine/system  environment,  it  should   be  made  clear  in  local
documentation that they are locally modified versions of the CERN originals.
CERN should be informed of such modifications, and given the possibility of
introducing  the  same modifications  in  the  original version.   If  local
modifications are so  important as to change significantly  the behaviour of
the program, its  name should also be  changed in order to  avoid confusion
with the  original.  CERN welcomes  comments concerning the  Program Library
service, but undertakes  no obligation for the maintenance  of the programs,
nor  responsibility   for  their  correctness,  and   accepts  no  liability
whatsoever resulting from the use of its programs.
 
\chapter{CERNLIB installation environment}
\section{PATCHY}

PATCHY is a source code management system that has been in use
in High Energy Physics for many years. It is used for the maintenance,
distribution and installation of almost all of the routines and packages
that make up the CERN Program Library.

{\tt PATCHY} and the associated auxiliary programs serve in development,
maintenance, and inter-computer transport of source programs. Suitably
structured source files containing several versions of a given program
permit code selection and code modification (down to
single-statement-level) by simple control cards to {\tt YPATCHY}.
Compacting and structuring of card files for efficiency {\tt (YTOBIN)},
maintenance of compacted files at the deck level {\tt (YEDIT)},
creation of machine-independent, transportable files {\tt (YTOCETA)} and
listing of compacted files {\tt (YLIST)} and others are simple auxiliary
operations in this environment.

Each of the PATCHY programs is a self-contained executable module.
On Unix machines at CERN, these are typically found in the directory
{\tt /cern/pro/bin}. \\
\section{FCASPLIT}
{\bf FCASPLIT} is a program that 
splits a file containing a mixture of routines in various
languages, such as Fortran, C and Assembler (from whence
the name is derived), into separate files. The file names
are composed of the routine name with a suffix to identify
the language, such as {\bf .f} for Fortran etc. In addition,
{\bf FCASPLIT} will create both a shell script and a {\bf MakeFile},
either of which may be used to compile the various routines.
The default file extensions, listed below, are machine dependant.

The FCASPLIT header lines are automatically created by
PATCHY on VMS and Unix machines for Fortran and C streams.
The following PATCHY control statement shows how to request
FCASPLIT header lines should they not be generated automatically.

\begin{XMPt}{Requesting FCASPLIT header lines}

+ASM,34,R=! ./*DECK ID>, !.h */

\end{XMPt}

{\bf Default file extensions (most Unix systems):}
\begin{DLtt}{12345}
\item[.c]C code
\item[.f]Fortran code
\item[.s]Assembler code
\end{DLtt}

{\bf Default file extensions (VMS systems):}
\begin{DLtt}{12345}
\item[.c]C code
\item[.for]Fortran code
\item[.mar]Assembler code
\end{DLtt}

{\bf Options:}
\begin{DLtt}{12}
\item[-f]Override the default name for the Fortran compiler
\item[-c]Override the default name for the C compiler
\item[-a]Override the default name for the Assembler
\item[-fo]Override the default options for the Fortran compiler
\item[-co]Override the default options for the C compiler
\item[-ao]Override the default options for the Assembler
\item[+fo]Add additional options to the defaults for the Fortran compiler
\item[+co]Add additional options to the defaults for the C compiler
\item[+ao]Add additional options to the defaults for the Assembler
\end{DLtt}

Each routine must start with an identifying line :

\begin{XMPt}{Header lines for {\bf FCASPLIT}}
   CDECK  ID>,        in cols.  1-12  for Fortran
   /*DECK ID>,        in cols.  1-12  for C
   ;DECK  ID>,        in cols.  1-12  for assembler
    DECK  ID>,        in cols.  2-12  or
     DECK ID>,        in cols.  3-12  for anything else
               name   in cols. 13-40  gives the name
\end{XMPt}

In the last two cases, or if {\it name} contains an
extension,  the file created will be {\it name}
without extension .f, .c or .s added to it
and without an entry into the script.

\begin{XMPt}{Example input file to FCASPLIT}

CDECK  ID>, FMCLR.  
      SUBROUTINE FMCLR
      INTEGER SYSTEMF
      IC = SYSTEMF('clear')
      END

/*DECK ID>, FMH.H*/ 
#define MAXNAME 8
#define MAXJOBN 8 /* Was 16 */
#define MAXHOST 8
#define MAXINFO 8 /* Was 16 */

/*DECK ID>, FAEXIT. */  
void faexit_(icode)
int *icode;
\{
   exit(*icode);
\}

\end{XMPt}

Running {\bf FCASPLIT} on this input file produces the following output 
files:

\begin{XMPt}{Output from FCASPLIT}

::::::::::::::
faexit.c
::::::::::::::
/*DECK ID>, FAEXIT. */
void faexit_(icode)
int *icode;
\{
   exit(*icode);
\}

::::::::::::::
fmclr.f
::::::::::::::
CDECK  ID>, FMCLR.
      SUBROUTINE FMCLR
      INTEGER SYSTEMF
      IC = SYSTEMF('clear')
      END

::::::::::::::
fmh.h
::::::::::::::
#define MAXNAME 8
#define MAXJOBN 8 /* Was 16 */
#define MAXHOST 8
#define MAXINFO 8 /* Was 16 */
 
::::::::::::::
temp.mkfca
::::::::::::::
ROUTINES = fmclr.o faexit.o

.f.o:
        xlf  -c -O -qextname -qcharlen=8192  $*.f

.c.o:
        cc  -c -O  $*.c

.s.o:
        as    $*.s

temp: $(ROUTINES)

::::::::::::::
temp.shfca
::::::::::::::
xlf  -c -O -qextname -qcharlen=8192  fmclr.f
cc  -c -O  faexit.c

\end{XMPt}

\begin{XMPt}{Example of running FCASPLIT on an RS6000}

zfatal:/home/cp/jamie/fatmen (42) fcasplit fmkuip.f
 FCASPLIT executing.
             Input file : fmkuip.f
           Shell script : fmkuip.shfca
              Make file : fmkuip.mkfca
        Fortran    name : xlf  
        Fortran options : -c -O -qextname -qcharlen=8192  
             CC    name : cc  
             CC options : -c -O  
      Assembler    name : as  
      Assembler options :   
  10315 lines written for    63 decks
     16 trailing comment lines ignored.

\end{XMPt}

\begin{XMPt}{Example of running FCASPLIT on an HP}
[csf] (358) /cern/pro/bin/fcasplit fmkuip.f
 FCASPLIT executing.
             Input file : fmkuip.f
           Shell script : fmkuip.shfca
              Make file : fmkuip.mkfca
        Fortran    name : f77  
        Fortran options : -c -O -w +ppu  
             CC    name : cc  
             CC options : -c -O  
      Assembler    name : as  
      Assembler options :   
  10315 lines written for    63 decks
     16 trailing comment lines ignored

\end{XMPt}

\begin{XMPt}{Makefile generated by FCASPLIT on an HP}

[csf] (359) more fmkuip.mkfca
ROUTINES = fatmen.o fmcd.o fmclr.o fmcopc.o fmcpc.o fmdumc.o \
fmedit.o fmexit.o fmextr.o fmfc.o fmfndc.o fmgime.o fminic.o \
fmkadd.o fmkadt.o fmkatt.o fmkcpl.o fmkdst.o fmkend.o fmkloc.o \
fmkmod.o fmkmtp.o fmksrc.o fmkuwd.o fmld.o fmlogc.o fmlogn.o \
fmlsc.o fmmakc.o fmmkdr.o fmmvc.o fmpwd.o fmquit.o fmrmc.o \
fmrmdc.o fmrmtc.o fmrzld.o fmscat.o fmscpl.o fmsdst.o fmseac.o \
fmsloc.o fmsmdk.o fmsmtp.o fmssrc.o fmstat.o fmsuwd.o fmtagc.o \
fmtchc.o fmthrg.o fmtrek.o fmulcc.o fmupdc.o fmzoom.o zabend.o \
fmslcc.o fmlokk.o fmsupd.o fmlnc.o fmrmlc.o fmnikk.o fmskan.o \
fmklcc.o

.f.o:
        f77  -c -O -w +ppu  $*.f

.c.o:
        cc  -c -O  $*.c

.s.o:
        as    $*.s

fmkuip_all: $(ROUTINES)

\end{XMPt}

\begin{XMPt}{Shell script generated by FCASPLIT on an HP}

[csf] (360) more fmkuip.shfca
f77  -c -O -w +ppu  fatmen.f
f77  -c -O -w +ppu  fmcd.f
f77  -c -O -w +ppu  fmclr.f
f77  -c -O -w +ppu  fmcopc.f
f77  -c -O -w +ppu  fmcpc.f
f77  -c -O -w +ppu  fmdumc.f
f77  -c -O -w +ppu  fmedit.f
f77  -c -O -w +ppu  fmexit.f
f77  -c -O -w +ppu  fmextr.f
f77  -c -O -w +ppu  fmfc.f
f77  -c -O -w +ppu  fmfndc.f
f77  -c -O -w +ppu  fmgime.f
f77  -c -O -w +ppu  fminic.f
f77  -c -O -w +ppu  fmkadd.f
f77  -c -O -w +ppu  fmkadt.f
f77  -c -O -w +ppu  fmkatt.f
f77  -c -O -w +ppu  fmkcpl.f
f77  -c -O -w +ppu  fmkdst.f
f77  -c -O -w +ppu  fmkend.f
f77  -c -O -w +ppu  fmkloc.f
...

\end{XMPt}
\section{CMZ}
{\bf CMZ} is a source code management system that is compatible
with {\bf PATCHY} at the level of directives. Whereas {\bf PATCHY}
is oriented more to batch-like execution, {\bf CMZ} provides
also an interactive interface through which one may develop
and install code. Most of the development performed by
the CN/AS group is done using {\bf CMZ}.

\chapter{Space requirements}

\index{disk space}

The complete CERN library requires approximately 200MB of disk
space. Slightly over 50MB may be saved if the sources are not
kept locally.
@
