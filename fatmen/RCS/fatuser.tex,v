head	1.2;
access;
symbols;
locks
	goossens:1.2; strict;
comment	@% @;


1.2
date	93.11.02.17.41.11;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	93.11.02.16.16.11;	author goossens;	state Exp;
branches;
next	;


desc
@ Initial entry
@


1.2
log
@fix citation reference
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                 %
%   FATMEN User Guide and Reference manual                        %
%                                                                 %
%   Fatmen Part 3: User Guide                                     %
%                                                                 %
%   This document needs the following external EPS files:         %
%   none                                                          %
%                                                                 %
%   Editor: Michel Goossens / CN-AS                               %
%   Last Mod.:  7 June 1993 11:55 mg                              %
%                                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\Filename{H1Fatmenuserguide-user-interface}
\chapter{Introduction to the FATMEN File System User Interface}

The user may interface to the file system on one of two ways:
either through FORTRAN callable routines, or by executing commands
at the command line.
It is expected that most access to data
will be via the callable interface, although the command line
interface will be useful for searching through the directory structure.
\par
\index{ZEBRA}
Although the FATMEN file catalogue makes use of ZEBRA for the management
of the data structures, no knowledge of ZEBRA is required to use
the interface routines, unless the user wishes
to override the system defaults
If the user
needs to override default values, or access fields in the FATMEN
catalogue, the PATCHY sequence \Lit{FATPARA} must be included in his routines.
See page~\pageref{EXTRACT-FATPARA} for an example of how to extract
the parameter offsets and page~\pageref{BANK-OFFSETS} for a description of
the parameters and their meanings.
This sequence defines the offsets into the FATMEN banks, e.g.
\begin{XMP}
      CHARACTER*8 CHOST
*
*     Get name of host on which this file is stored
*
      CALL UHTOC(IQ(LFAT+MHSNFA),CHOST,4,8)
*
*     Check file sequence number
*
      ISEQ = IQ(LFAT+MFSQFA)
*
*     That's about as complicated as it gets.
*
\end{XMP}
\Filename{H2Fatmenuserguide-parameter-offsets}
\Section{4cm}{Parameter offsets}
\index{FATPARA}
\index{FATMEN bank}
\index{offsets}
The offsets to the various fields in the FATMEN banks are defined by the
PATCHY sequence \Lit{FATPARA}. This sequence may be extracted as shown in the
following example.
\label{EXTRACT-FATPARA}
\begin{XMPt}{Extracting the sequence FATPARA}
ypatchy fatmen.cards fatpara.f :go <<!
+use,*fatpara.
+exe.
+pam,11,t=c,a. fatmen.cards
+quit
!
\end{XMPt}
\Filename{H2Fatmenuserguide-recent-changes}
\Section{4cm}{Recent changes to FATMEN routines}
\index{Changes}
\index{History}
\par
Changes to the FATMEN code are logged in a patch named HISTORY on the
FATMEN PAM. This patch lists improvements, bug fixes and outstanding
work and can be extracted using the following patchy cradle:
\begin{XMPt}{Extracting the FATMEN history patch}
+USE,HISTORY,T=LIS.
+PAM.
+QUIT.
\end{XMPt}
\Filename{H2Fatmenuserguide-calling-sequences}
\Section{4cm}{Calling sequences and return codes}
\par
\index{Return codes}
\index{errors}
\index{IQUEST}
In all the routines listed below, a return code of zero indicates
success and non-zero returns codes indicate failure. Some routines
use the IQUEST vector to return error information. To test on results
returned via IQUEST, the following definition should be added to the
calling routine.
\begin{XMP}
      COMMON/QUEST/IQUEST(100)
\end{XMP}
\par
In the following descriptions, the generic name argument \Rarg{GENAM}
or path name PATH
should be declared as {\tt CHARACTER*255}.
All other arguments are of type INTEGER
unless otherwise specified. Arguments followed by an asterisk (*)
are output parameters. Arguments both preceeded and followed by
asterisks are input parameters which are overwritten on output. All
other arguments are input only.
Optional arguments are specified by passing an INTEGER
zero or a blank character, depending on the datatype.
\Subsection{4cm}{Generic names and path names}
\par
Given the generic name 
\Lit{//CERN/DELPHI/P01\_ALLD/CDST/S2PR/Y91V02/E091.3/L0678/R023808F01C1}
the path name is 
\Lit{//CERN/DELPHI/P01\_ALLD/CDST/S2PR/Y91V02/E091.3/L0678}.
That is, the path name contains only the names of the directories
where a file resides, whereas the generic name contains the full
name.
\Filename{H1Fatmenuserguide-fortran-callable-interface}
\chapter{The FATMEN Fortran callable interface routines}
\Filename{H2Fatmenuserguide-novice-interface}
\Section{4cm}{Novice interface routines}
\par
These routines require no knowledge of Zebra to use FATMEN.
They may be used in conjunction with the other FATMEN
routines, provided that the same Zebra store is used.
\Subsection{4cm}{Initialise FATMEN system}
\Shubr{FMSTRT}{(LUNRZ,LUNFZ,CHFAT,IRC*)}
\begin{DLtt}{1234567}
\item[LUNRZ]Integer variable specifying the FORTRAN logical unit for the
FATMEN RZ file.
\item[LUNFZ]Integer variable specifying the FORTRAN logical unit to be used
to send updates to the FATMEN server.
\item[CHFAT]
Character variable to specify the database and group name
in the form {\tt//database/group}, e.g. {\tt//CERN/DELPHI}.
\item[IRC]Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine initialises ZEBRA, unless it has already been
initialised, and then the FATMEN system.
The store {\tt/FAT/} in sequence FAT is used for this purpose.
LUNRZ and LUNFZ are the logical
units that will be used to access the database for reading and writing.
If read-only access is required, LUNFZ should be set to 0.
The database name CHFAT
is a character string indicating the name of the database that is to be
accessed. This field must be of the form '{\tt//CERN/experiment}' for
CERN experiments, '{\tt//DESY/experiment}' for DESY experiments and so on.
\par
On VM systems, the virtual card punch is used to communicate updates
with the service machine that handles the database.
As the punch may
be in use for other purposes, both positive and negative values of
LUNFZ are foreseen.
If {\tt LUNFZ > 0}, the punch will be used directly,
which implies that it cannot be used by the calling programme for
any other purpose.
If {\tt LUNFZ < 0}, a temporary file will be created and
sent via SENDFILE to the server.
The disk with most free space
that is accessed in WRITE mode will be used for this purpose.
If {\tt LUNFZ > 0}, FATMEN will assume that it can write directly to the
PUN device.
\begin{XMPt}{Example of using the \protect\Rind{FMSTRT} routine}
*     Initialise FATMEN for group CPLEAR
      CALL FMSTRT(1,2,'//CERN/CPLEAR',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMSTRT'
\end{XMPt}
\Subsection{4cm}{Access a dataset}
\Shubr{FMFILE}{(LUN,GENAM,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item [LUN]Integer variable specifying the FORTRAN logical unit to be used
to access the dataset.
\item [GENAM]Character variable specifying the generic name of the file to be
accessed.
\item [CHOPT]Character variable to specify the required options, as for
the routine \Rind{FMOPEN} (see on Page~\pageref{FMOPEN}.)
\item[IRC]Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine accesses the dataset referenced by GENAM on
FORTRAN unit LUN.
\begin{XMPt}{Example of using the \protect\Rind{FMFILE} routine}
      CALL FMFILE(11,
     +'//CERN/CPLEAR/REAMS/M2T3/RAWD/NONE/NONE/R08288',' ',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMFILE'
\end{XMPt}
 
\Subsection{4cm}{Deaccess a dataset}
\Shubr{FMFEND}{(LUN,GENAM,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[LUN]Integer variable specifying the FORTRAN logical unit used
to access the dataset.
\item [GENAM]
Character variable specifying the generic name of the file
accessed.
\item [CHOPT]
Character variable to specify the required options, as for
the routine \Rind{FMCLOS} (see on Page~\pageref{FMCLOS}.)
\item[IRC]Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine deaccesses the dataset referenced by GENAM on
FORTRAN unit LUN.
\begin{XMPt}{Example of using the \protect\Rind{FMFEND} routine}
      CALL FMFEND(11,
     +'//CERN/CPLEAR/REAMS/M2T3/RAWD/NONE/NONE/R08288',' ',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMFEND'
\end{XMPt}
\Subsection{4cm}{Add a tape file}
\Shubr{FMADDT}{(GENAM,VSN,VID,FSEQ,DSN,FFORM,CPLEV,HOST,RECFM,LRECL,LBLOCK,
 FSIZE,MEDIA,COMM,IVECT,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item [GENAM]Character variable specifying the generic name of the file
to be added.
\item[VSN]Character variable specifying the volume serial number or
magnetically recorded label of the tape on which the file resides.
\item[VID]Character variable specifying the visual identifier or the
'sticky' or external label of the tape on which the file resides.
This field may also be given in the 'extended VID' form,
e.g. IN2P3.EP1234 if a VID prefix is required.
\item[FSEQ]
Integer variable specifying the file sequence number on
the specified tape volume of the file to be added.
\item[DSN]Character variable specifying the dataset name of the file
to be added.
\item[FFORM]Character variable specifying the logical format of the file
to be added, such as FX, EP, RZ etc.
\item[CPLEV]
Integer variable specifying the copy level (or data representation
type) of the file to be added.
\item[HOST]
Character variable specifying the name of the host through which
the dataset is to be accessed. For tape volumes this is typically the
same as the node on which the dataset was created as it is not
used to check access to the data.
\item[RECFM]Character variable specifying the record format of the file to be
\item[LRECL]
Integer variable specifying the record length of the file to be
added, in units of 32 bit words.
\item[LBLOCK]Integer variable specifying the block size of the file to be
added, in units of 32 bit words.
\item[FSIZE]
Integer variable specifying the size of the file in Megabytes.
\item[MEDIA]
Integer variable specifying the media type, where 2=3480, 3=3420,
4=8200 etc. For tapes which are known to the TMS, this information
is ignored.
\item[COMM]
Character variable containing the user comment for this entry.
\item[IVECT]
Integer array of length 10 containing the user words for this entry.
\item[CHOPT]
Character variable specifying the required options (none at present).
\begin{DLtt}{12}
\item[ ]the entry is added using \Rind{FMPUT} (see Page \pageref{FMPUT}).
\item[M]the entry is added using \Rind{FMMOD} (see Page \pageref{FMMOD}).
\item[N]the entry is not added to the catalogue but may
be further manipulated with the \Rind{FMPEEK}/\Rind{FMPOKE} routines described below.
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine adds an entry to the FATMEN catalogue.
\begin{XMPt}{Example of using the \protect\Rind{FMADDT} routine}
      CALL FMADDT('//CERN/CNDIV/JAMIE/TEST','I29021','I29021',1
     +'FATMEN.CARDS','AS',0,'CERNVM','FB',20,800,1,2,
     +'Backup of source to FATMEN',IVECT,' ',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMADDT'
\end{XMPt}
\Subsection{4cm}{Add a disk file}
\Shubr{FMADDD}{(GENAM,DSN,FFORM,CPLEV,HOST,RECFM,LRECL,LBLOCK,
 FSIZE,COMM,IVECT,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable specifying the generic name of the file
to be added.
\item[DSN]
Character variable specifying the dataset name of the file
to be added.
\item[FFORM]
Character variable specifying the logical format of the file
to be added, such as FX, EP, RZ etc.
\item[CPLEV]
Integer variable specifying the copy level (or data representation
type) of the file to be added.
\item[HOST]
Character variable specifying the name of the host on which the
dataset resides.
\item[RECFM]
Character variable specifying the record format of the file to be
\item[LRECL]
Integer variable specifying the record length of the file to be
added, in units of 32 bit words.
\item[LBLOCK]
Integer variable specifying the block size of the file to be
added, in units of 32 bit words.
\item[FSIZE]
Integer variable specifying the size of the file in Megabytes.
\item[COMM]
Character variable containing the user comment for this entry.
\item[IVECT]
Integer array of length 10 containing the user words for this entry.
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[ ]the entry is added using \Rind{FMPUT} (see Page \pageref{FMPUT}).
\item[M]the entry is added using \Rind{FMMOD} (see Page \pageref{FMMOD}).
\item[N]the entry is not added to the catalogue but may
be further manipulated with the \Rind{FMPEEK}/\Rind{FMPOKE} routines described below.
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine adds an entry to the FATMEN catalogue.
\begin{XMPt}{Example of using the \protect\Rind{FMADDD} routine}
      CALL FMADDD('//CERN/CNDIV/JAMIE/VAX2',
     +'DISK$CERN:[JAMIE.ZFTP]FXFILE.DAT',
     +'FX',0,'VXCERN','F',8100,8100,10,
     +'Test Zebra exchange format file for ZFTP',IVECT,' ',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMADDD'
\end{XMPt}

\Subsection{4cm}{Return information on FATMEN entry}
\Shubr{FMPEEK}{(GENAM,IVECT,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable specifying the generic name of the file
on which information is to be returned.
\item[IVECT]
Integer array of length NWDSFA in which the FATMEN information is
returned.
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[ ]the last bank created by a call to \Rind{FMADDT} and \Rind{FMADDD}
is returned.
\item[G]the information is obtained from
the FATMEN catalogue using the default FATMEN selection.
(Note that there may be no entry with the current selection
criteria - see the description of \Rind{FMGET} on page \pageref{FMGET} 
for details).
\item[A]the first entry found in the catalogue is returned.
\item[N]the next entry found in the catalogue is returned,
which may be the first if no previous call with CHOPT = 'A' has been
issued.
\item[D]Drop bank after unpacking
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns in the vector IVECT the contents of the
FATMEN bank associated with the specified generic name.
\begin{XMPt}{Example of using the \protect\Rind{FMPEEK} routine}
CALL FMPEEK('//CERN/CNDIV/JAMIE/VAX2',IVECT,'N',IRC)
IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMPEEK'
\end{XMPt}
 
\Subsection{4cm}{Add entry to catalogue}
\Shubr{FMPOKE}{(GENAM,IVECT,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable specifying the generic name of the file.
\item[IVECT]
Integer array of length NWDSFA in which the FATMEN information is
contained.
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[ ]the information is simply copied into this bank.
\item[N]the vector IVECT is ignored. This is useful if the
bank has been modified using the \Rind{FMPUTC}/I/V routines.
\item[M]the information is added to the catalogue using \Rind{FMMOD}.
(see on Page \pageref{FMMOD}).
\item[R]the entry is replaced using \Rind{FMMOD} (see on Page \pageref{FMMOD}).
\item[P]the information is added to the catalogue using \Rind{FMPUT}. (see Page \pageref{FMPUT}).
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine copies the vector IVECT into the FATMEN bank
reserved for manipulation with \Rind{FMADDD}/\Rind{FMADDT}, \Rind{FMPEEK}/\Rind{FMPOKE}.
\begin{XMPt}{Example of using the \protect\Rind{FMPOKE} routine}
      CALL FMPOKE('//CERN/CNDIV/JAMIE/VAX2',IVECT,'M',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMPOKE'
\end{XMPt}
 
\Filename{H2Fatmenuserguide-catalogue-manipulating-routine}
\Section{8cm}{Routines that manipulate the FATMEN catalogue}
\Subsection{4cm}{Initialise FATMEN system}
\Shubr{FMINIT}{(IXSTOR*,LUNRZ,LUNFZ,DBNAME,IRC*)}
\begin{DLtt}{1234567}
\item[IXSTOR]
Integer variable to return the number of the store initialised
for FATMEN.
\item [LUNRZ]
Integer variable specifying the FORTRAN logical unit for the
FATMEN RZ file.
\item [LUNFZ]
Integer variable specifying the FORTRAN logical unit to be used
to send updates to the FATMEN server.
\item[DBNAME]
Character variable to specify the database and group name
in the form //database/group, e.g. //CERN/DELPHI.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine initialises the FATMEN system.
LUNRZ and LUNFZ are the logical
units that will be used to access the database for reading and writing.
If read-only access is required, LUNFZ should be set to 0.
The database name DBNAME
is a character string indicating the name of the database that is to be
accessed. This field must be of the form '//CERN/experiment'.
\par
On VM systems, the virtual card punch is used to communicate updates
with the service machine that handles the database.
As the punch may
be in use for other purposes, both positive and negative values of
LUNFZ are foreseen.
If {\tt LUNFZ > 0}, the punch will be used directly,
which implies that it cannot be used by the calling programme for
any other purpose.
If {\tt LUNFZ < 0}, a temporary file will be created and
sent via SENDFILE to the server.
The disk with most free space
that is accessed in WRITE mode will be used for this purpose.
If {\tt LUNFZ > 0}, FATMEN will assume that it can write directly to the
PUN device.
\begin{XMPt}{Example of using the \protect\Rind{FMINIT} routine}
*     Initialise FATMEN for group CPLEAR
      CALL FMINIT(IXSTOR,1,2,'//CERN/CPLEAR',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMINIT'
\end{XMPt}
\Subsection{4cm}{Terminate FATMEN package}
\Shubr{FMEND}{(IRC*)}
\begin{DLtt}{1234567}
\item[IRC*]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine should be called when no further access to the FATMEN file
catalogue is required, normally at program termination.
This routine automatically calls the routine \Rind{FMUPDT} to
ensure that any outstanding updates are sent to the server.
\begin{XMPt}{Example of using the routine \protect\Rind{FMEND}}
      CALL FMEND(IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMEND'
\end{XMPt}
\par
After a call to \Rind{FMEND}, a further call to \Rind{FMINIT} may be made, to
look at the same or different FATMEN catalogue.
\Subsection{4cm}{Set logging level of FATMEN package}
\Shubr{FMLOGL}{(LEVEL)}
\begin{DLtt}{1234567}
\item[LEVEL]
Integer variable to set the level of logging required.
\begin{DLtt}{12}
\item[-3]Suppress all log messages
\item[-2]Error messages
\item[-1]Terse logging
\item[0]Normal (\Rind{FMINIT}, \Rind{FMEND} etc.)
\item[1]Log calls to FATMEN routines (FORTRAN callable interface)
\item[2]Log to monitor FATMEN internal decisions, such as selection of a
dataset.
\item[3]Debug messages
\end{DLtt}
\end{DLtt}
\par
This routine establishes the LEVEL of diagnostic printing from the FATMEN
package. 
\begin{XMPt}{Example of using the routine \Rind{FMLOGL}}
*     Set maximum logging level to monitor FATMEN progress
      CALL FMLOGL(3)
\end{XMPt}
 
\Subsection{4cm}{Control updating mode}
\Shubr{FMUPDT}{(MAX,NGROUP,IFLAG,IRC*)}
\begin{DLtt}{1234567}
\item[MAX]
Integer variable specifying the maximum number of updates
that may be performed. If this number is exceeded, the program
will be terminated by a call to the Zebra routine \Rind{ZFATAM}.
\item[NGROUP]
Integer variable specifying the number of updates that are
to be grouped together.
\item[IFLAG]
Integer variable which allows outstanding updates to be sent
or purged, or to reset the system defaults.
\item[IRC ]
Integer variable specifying the return code.
\end{DLtt}
\par
This routine controls the updating mode of the FATMEN package.
MAX is the maximum number of updates that may be issued by a single
job. NGROUP is the number of updates to send together.
If IFLAG=-1, the system defaults of MAX=999, NGROUP=0 (send each
update separately) will be applied. If IFLAG=0, MAX and NGROUP
will be reset as specified, with any outstanding updates sent
immediately. If IFLAG=1, MAX and NGROUP will be reset as specified,
with any outstanding updates purged.
\begin{XMPt}{Example of using the \protect\Rind{FMUPDT} routine}
*     Reset updating mode to the system defaults
      CALL FMUPDT(MAX,NGROUP,-1,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMUPDT
*     Cancel any outstanding updates and limit future updates to 10
      CALL FMUPDT(10,NGROUP,1,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMUPDT
\end{XMPt}
 
\Subsection{4cm}{Purge old entries from catalogue}
\Shubr{FMPURG}{(PATH,KEYSEL,MAXSIZ,MINACC,MAXDAYS,MINCPS,LUNPUR,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[PATH]
Character variable specifying the path name to be purged.
\item[KEYSEL]
Integer array of length 10 specifying the KEY selection to be
applied.
\item[MAXSIZ]
Integer variable specifying the file size threshold, in Megabytes.
Files with size {\tt <= MAXSIZ} escape deletion.
\item[MINACC]
Integer variable specifying the number of accesses.
Files with accessed {\tt => MINACC} escape deletion.
\item[MAXDAYS]
Integer variable specifying the number of number of days permitted
since last access.
Files with accessed {\tt <= MAXDAYS} ago escape deletion.
\item[MINCPS]
Integer variable specifying the minimum number of copies required
for a file to be candidate for deletion.
Files with {\tt <= MINCPS} escape deletion.
\item[LUNPUR]
Integer variable specifying the FORTRAN logical unit to be used
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[P]print usage statistics on these files
\item[K]write a FATMEN KUMAC on LUNPUR to remove these entries
\item[R]remove these entries
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine searches for files matching the specified path
and KEYSEL selection for entries eligible for deletion.
A check may be bypassed by coding a -1 for the corresponding
parameter. Thus, to purge files without checking on the number
of accesses, specify a -1 for MINACC.
\begin{XMPt}{Example of using the routine \protect\Rind{FMPURG}}
      DIMENSION KEYSEL(10)
*     Restrict search to 3480s
      KEYSEL(MKMTFA) = 2
*     Restrict search to location code 1
      KEYSEL(MKLCFA) = 1
*     Make no check on Copy Level
      KEYSEL(MKLCFA) = -1
*
*     Print all files eligible for purge that are 80 MB or larger,
*     have been accessed less than 10 times, have not been accessed
*     in the last 60 days, and for which at least 3 copies exist.
*
      CALL FMPURG('//CERN/CNDIV/J*',KEYSEL,80,10,60,3,0,'P',IC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMPURG'
\end{XMPt}
 
\Subsection{4cm}{Get information on named file}
\Shubr{FMGET}{(GENAM,LBANK*,KEYS*,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns the address of the bank LBANK
and the keys vector KEYS
for the specified generic name GENAM. Should multiple entries exist for
the given generic name GENAM, the FATMEN system will choose the most
appropriate, according to a simple algorithm. Should a specific
copy be required, the routine \Rind{FMGETK} should be used.
{\bf Warning: any bank at the address \Lit{LBANK} will be dropped by this
routine on input.
See the example on page
\pageref{LAREA} for an example of using a link area
to save the address of multiple banks, e.g. when calling this
routine in a loop.}
\index{Link area}
The procedure for selecting a given copy of a dataset is as follows:

\begin{UL}
\item
The routine \Rind{FMSELK} is used to select disk files residing at the current
location which match the specified generic name.
\item
The first dataset which resides on the current node is taken.
\item
Should no such dataset exist, the procedure is repeated for datasets
residing on 3480 cartridges.
\item
The first matching dataset residing on a cartridge in an accessible
tape robot is taken.
\item
Should no such dataset exist, the first matching dataset on
a manually mounted 3480, if any, will be taken.
\end{UL}

\index{remote access}
\index{remote disks}
\index{remote tapes}
Where access to remote data is available, the procedure will then
continue, searching for datasets on remote disks, in remote
robots and finally on remote manually mounted tapes.
\begin{XMPt}{Example of using the \protect\Rind{FMGET} routine}
*     Select a copy of a dataset using default FATMEN selection.
      CALL FMGET('//CERN/CNDIV/CHRIS/TAPE8',LBANK,KEYS,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMGET'
\end{XMPt}
\Subsection{4cm}{Get information on named file with key selection}
\Shubr{FMGETK}{(GENAM,LBANK*,*KEYS*,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name. The keys vector is also used
to select a particular copy of a dataset.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns the address of the bank LBANK for the
combination of the generic name GENAM
and key vector KEYS specified. This allows the user
to select a particular copy of a file.
{\bf Warning: any bank at the address LBANK will be dropped by this
routine on input.
See the example on page
\pageref{LAREA} for an example of using a link area
to save the address of multiple banks, e.g. when calling this
routine in a loop.}
\index{Link area}
\begin{XMPt}{Example of using the \protect\Rind{FMGETK} routine}
      Select a given copy of a dataset.
*     The vector MYKEYS was obtained from FMSELK.
      CALL FMGETK('//CERN/CNDIV/CHRIS/TAPE8',LBANK,MYKEYS(1,1),IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMGETK'
\end{XMPt}
 
\Subsection{4cm}{Add entry to FATMEN catalogue}
\Shubr{FMPUT}{(GENAM,LBANK,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to input the address of the bank corresponding
to the generic name specified.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine enters the information in the bank with address LBANK
for the specified generic name GENAM in the database.
If a matching dataset already exists for this generic name, nothing
will be added to the database. In all other cases a new entry will
be made.
Before the entry is sent to the FATMEN server, the routine \Rind{FMVERI}
is automatically called. Should \Rind{FMVERI} return a non-zero return
code, the entry will not be sent to the server. This is to ensure
that the FATMEN catalogue is correctly updated and that the data
can be successfully retrieved.
See the description of the \Rind{FMCOMP} routine on 
page \pageref{FMCOMP} for details of the association
of generic names and datasets.
\begin{XMPt}{Example of using the \protect\Rind{FMPUT} routine}
 
      CALL FMPUT('//CERN/CHARM2/TEST/DST1/ELEC/HO20/NOM/E02/FILE1',
     +LBANK,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMPUT'
\end{XMPt}
 
\Subsection{4cm}{Modify existing entry}
\Shubr{FMMOD}{(GENAM,LBANK,IFLAG,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to input the address of the bank corresponding
to the generic name specified.
\item[IFLAG]
Integer variable to control the mode of operation.
\begin{DLtt}{12}
\item[0]the entry for the generic name GENAM will
be added if it does not exist, or replaced if it does.
\item[1]the entry will be replaced if it exists
but otherwise not added.
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine is similar top the routine \Rind{FMPUT}, except
that it also allows an existing entry to be modified.
Before the entry is sent to the FATMEN server, the routine \Rind{FMVERI}
is automatically called. Should \Rind{FMVERI} return a non-zero return
code, the entry will not be sent to the server. This is to ensure
that the FATMEN catalogue is correctly updated and that the data
can be successfully retrieved.
See the description of the \Rind{FMCOMP} routine on 
page \pageref{FMCOMP} for details of the association
of generic names and datasets.
\begin{XMPt}{Example of using the \protect\Rind{FMMOD} routine}
*
*     Update an existing entry with the number of Megabytes written
      IQ(LBANK+MFSZFA) = 200
      CALL FMMOD('//CERN/CNDIV/CHRIS/TAPE8',LBANK,1,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMMOD
\end{XMPt}
\Subsection{4cm}{Create a new FATMEN bank}
\Shubr{FMBOOK}{(GENAM,KEYS*,LADDR*,*LSUP*,JBIAS,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
\item[LADDR]
Integer variable to return the address of the bank created.
\item[LSUP]
if {\tt JBIAS < 0}: address of the supporting up bank \\
if {\tt JBIAS = 0}: address of the supporting previous bank \\
if {JBIAS > 0}: link bias in the supporting bank
\item[JBIAS]
if {\tt JBIAS < 1}: link bias in the supporting bank \\
if {\tt JBIAS = 1}: create top-level bank  \\
if {\tt JBIAS = 2}: create stand-alone bank
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine will create a new ZEBRA bank for the specified
generic name GENAM and fill in default values.
The user may then modify these before
committing the changes via \Rind{FMPUT}.
If IRC is non-zero, the \Lit{IQUEST} vector will contain the error condition
signaled by \Rind{MZBOOK}. 
See the description of \Rind{MZBOOK} in the ZEBRA manual.

The address of the bank lifted is the
users responsibility and should be saved in a link area.
\begin{XMPt}{Example of using the \protect\Rind{FMBOOK} routine}
*
      CALL FMBOOK(GNAME,KEYS,LUSRBK,LSUP,JBIAS,IRC)
\end{XMPt}

\Rind{FMBOOK} returns warning conditions using the IQUEST vector.
The following conditions may be reported:
\begin{DLtt}{1234567}
\item[IQUEST(11)]
0 if this generic name does not exist, 1 otherwise.
\item[IQUEST(12)]
0 if the corresponding directories already exist, 1 otherwise.
\end{DLtt}

\Subsection{4cm}{Create a link to an existing catalogue entry}
\Shubr{FMLN}{(CHSRCE,CHTRGT,CHCOMM,IVECT,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[CHSRCE]
Character variable of maximum length 255 to specify the generic name of
the link to an existing object.
\item[CHTRGT]
Character variable of maximum length 255 specifying an existing generic name.
\item[CHCOMM]
Character variable of maximum length 80 specifying the comment to 
be associated to the link. 
\item[IVECT]
Vector of 10 user words to be associated to the link.
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[C]set the comment field to the string specified in {\tt CHCOMM}
\item[U]set the user words to the values in the vector {\tt IVECT}
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
Use the \Rind{FMLN} routine to make a link to an existing catalogue entry.

In Unix parlence, the {\tt sourcefile} is the real file and the
{\tt targetfile} the link that points to it. To avoid even further
confusion, the same terminology is adopted here.

If the existing entry is itself a link, the link will point to the
source of that link.

A link is identified by having location code 0. The source file name
is stored in the FATMEN bank at the offset {\tt MFQNFA}.

Links can be useful in the following scenario. DELPHI write single
file 3480 cassettes which contain more than one run. There is a generic name
for each run that points to the same file. Additionally, there is also
a so-called {\tt SUMT} entry (for summary tape). This
can cause house keeping problems, particularly when making copies
for data export.

A solution to the above problem is to make the run specific generic
names {\it links}. Only the {\tt SUMT} entries are copied, moved or
deleted. When a file is accessed via a link, the link is automatically
resolved. The FATMEN selection then procedes as if the {\tt sourcefile}
name had been given.

A limitation of the current implementation is that it does not cater for
the situation when a single run is copied to {\tt hotter} media,
e.g. disk. This would involve some reworking of the selection logic
and remains pending demand from actual usage.

\Subsection{4cm}{Remove entry from FATMEN catalogue}
\Shubr{FMRM}{(GENAM,LBANK*,KEYS,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to input the address of the bank corresponding
to the generic name specified.
\item[KEYS]
Integer array of length 10 to pass the keys vector associated
with the specified generic name.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine marks the entry generic name GENAM
for deletion.
An entry is uniquely identified
by the following information: Host name, DSN (for disk files), Location,
VID, VSN, File sequence number (for tape files), contained in the bank
at address LBANK. Files may only be deleted by the creator.
If a non-zero key vector KEYS
is input, KEYS(1) will be used to select
a specific copy of a file for deletion. If only one match for the
specified name exists, KEYS(1) may be zero. If more than one
entry for the specified generic name exists, KEYS(1) must specify
the copy that is to be deleted.

\begin{XMPt}{Example of using the \protect\Rind{FMRM} routine}
      DIMENSION KEYS(10)
      CALL VZERO(KEYS,10)
      LBANK = 0
      CALL FMRM('//CERN/CHARM2/TEST/DST1/ELEC/HO20/NOM/E02/FILE1',
     +LBANK,KEYS,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMRM'
\end{XMPt}

\Subsection{4cm}{Remove a link from a FATMEN catalogue}
\Shubr{FMRMLN}{(CHLINK,LUN,CHFILE,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[CHLINK]Character variable specifying the path to be searched
for dangling links, containing wild-cards as necessary
\item[LUN]Unit number on which the file {\tt CHFILE} is written,
with option {\tt F}
\item[CHFILE]
Character variable specifying the name of the file to be written,
with option {\tt F}.
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[P]Print the names of dangling links
\item[D]Write the names of dangling links in the form {\tt rm generic-name ksn}
\item[R]Remote dangling links
\item[F]Redirect output to the file {\tt CHFILE} on the unit {\tt LUN}
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

\Subsection{4cm}{Make directory}

\Shubr{FMKDIR}{(CHDIR,IRC*)}

\begin{DLtt}{1234567}
\item[CHDIR]
Character variable of maximum length 255 to specify the name of the
directory to be created.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine creates the specified directory CHDIR.
\begin{XMPt}{Example of using the routine \protect\Rind{FMKDIR}}
      CALL FMKDIR('//CERN/ALEPH/MC/TEST',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMKDIR
\end{XMPt}

\Rind{FMKDIR} returns warning conditions using the IQUEST vector.
The following conditions may be reported:
\begin{DLtt}{1234567}
\item[IQUEST(12)]
0 if the specified directory already exists, 1 otherwise.
\end{DLtt}

\Filename{H2Fatmenuserguide-modify-contents-routines}
\Section{4cm}{Routines to modify the contents of the FATMEN banks}
\Subsection{4cm}{Set contents of FATMEN bank}

\Shubr{FMFILL}{(GENAM,*LBANK*,*KEYS*,CHOPT,IRC*)}

\begin{DLtt}{1234567}
\item[GENAM]Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the input generic name GENAM. If LBANK is non-zero, the bank
at this address will be used.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name. If the keys vector is non-zero,
it will be used by \Rind{FMGETK} to return the bank corresponding to
a particular copy of a dataset.
\item[CHOPT]
Character variable to specify the options desired.
\begin{DLtt}{12}
\item[A]set all fields
\item[C]clear comment field
\item[F]zero file attributes, such as start/end record and block
\item[K]reset keys to match generic name, default copy level, media type, location
\item[L]clear logical attributes, such as FATMEN file format
\item[M]clear media attributes, such as VSN, VID, file sequence number for tape
files, set host type and operating system for disk files.
\item[N]clear dataset name on disk/tape of this file
\item[O]set owner, node and job of creator etc.
\item[P]clear physical attributes, such as record format etc.
\item[S]clear security details of this file (protection)
\item[T]set date and time of creation, last access etc.
\item[U]clear user words.
\item[Z]display ZEBRA bank with FMSHOW.
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine sets the contents of the FATMEN bank corresponding to
the input generic names GENAM, or at the address LBANK if non-zero.
This routine either sets fields that can be automatically obtained,
such as the date and time or current node, or sets them to zero or
blanks as appropriate (user comment, vsn, vid etc.)
\begin{XMPt}{Example of using the \protect\Rind{FMFILL} routine}
*     Update owner information and time fields.
*     Z option causes the resultant bank to be displayed
*     via the routine \protect\Rind{FMSHOW}.
*
      CALL FMFILL('//CERN/L3/PROD/DATA/SDSUEE/CC00DCVY',
     +LBANK,KEYS,'OTZ',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMFILL'
\end{XMPt}

\Subsection{4cm}{Insert character data into FATMEN bank}

\Shubr{FMPUTC}{(LBANK,STRING,ISTART,NCH,IRC*)}

\begin{DLtt}{1234567}
\item [LBANK]
Integer variable containing the address of the bank to be updated,
or -1, when called from
the novice interface.
\item[STRING ]
Character variable containing the data to be inserted into the bank.
\item[ISTART]
Offset at which this data should be written, e.g. MUSCFA
\item[NCH]
Number of characters to write.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine updates the FATMEN bank at address LBANK with the
character data in the string STRING. Attempts to write outside of
bank boundaries will generate an error and a non-zero value of the
return code IRC.

When called from the novice interface, LBANK should be set to -1.
\begin{XMPt} {Example of using the \protect\Rind{FMPUTC} routine}
      CALL FMPUTC(LBANK,'I28901',MVSNFA,6,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMPUTC'
\end{XMPt}

\Subsection{4cm}{Read character data from FATMEN bank}

\Shubr{FMGETC}{(LBANK,STRING*,ISTART,NCH,IRC*)}

\begin{DLtt}{1234567}
\item[LBANK ]
Integer variable containing the address of the bank from which
information is to be retrieved,
or -1, when called from
the novice interface.
\item[STRING]
Character variable in which the character data is returned.
\item[ISTART]
Offset at which this data should be read, e.g. MUSCFA
\item[NCH]
Number of characters to read.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine returns character information from
the FATMEN bank at address LBANK
in the string STRING. Attempts to read outside of
bank boundaries will generate an error and a non-zero value of the
return code IRC.
\par
When called from the novice interface, LBANK should be set to -1.
\begin{XMPt}{Example of using the \protect\Rind{FMGETC} routine}
      CALL FMGETC(LBANK,VSN,MVSNFA,6,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMGETC'
\end{XMPt}

\Subsection{4cm}{Insert integer vector into FATMEN bank}

\Shubr{FMPUTV}{(LBANK,IVECT,ISTART,NWORDS,IRC*)}

\begin{DLtt}{1234567}
\item[LBANK]
Integer variable containing the address of the bank to be updated,
or -1, when called from
the novice interface.
\item[IVECT ]
Integer vector containing the data to be inserted into the bank.
\item[ISTART]
Offset at which this data should be written, e.g. MUSWFA
\item[NCH]
Number of words to write.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine updates the FATMEN bank at address LBANK with the
data in the vector IVECT. Attempts to write outside of
bank boundaries will generate an error and a non-zero value of the
return code IRC.
\par
When called from the novice interface, LBANK should be set to -1.
\begin{XMPt}{Example of using the \protect\Rind{FMPUTV} routine}
*     Insert user words vector into FATMEN bank
      CALL FMPUTV(LBANK,IWORDS,MUSWFA,10,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMPUTV'
\end{XMPt}
\Subsection{4cm}{Read integer vector from FATMEN bank}
\Shubr{FMGETV}{(LBANK,IVECT*,ISTART,NWORDS,IRC*)}
\begin{DLtt}{1234567}
\item[LBANK]
Integer variable containing the address of the bank from which
information is to be retrieved, or -1, when called from
the novice interface.
\item[IVECT]
Integer vector in which the data is returned.
\item[ISTART]
Offset at which this data should be read, e.g. MUSWFA
\item[NCH]
Number of characters to read.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns the information from
the FATMEN bank at address LBANK
in the vector IVECT. Attempts to read outside of
bank boundaries will generate an error and a non-zero value of the
return code IRC.
\par
When called from the novice interface, LBANK should be set to -1.
\begin{XMPt} {Example of using the \protect\Rind{FMGETV} routine}
      CALL FMGETV(LBANK,IWORDS,MUSWFA,10,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMGETV'
\end{XMPt}
\Subsection{4cm}{Insert integer value into FATMEN bank}
\Shubr{FMPUTI}{(LBANK,IVAL,IOFF,IRC*)}
\begin{DLtt}{1234567}
\item[LBANK]
Integer variable containing the address of the bank to be updated,
or -1, when called from
the novice interface.
\item[IVAL]
Integer variable containing the data to be inserted into the bank.
\item[IOFF]
Offset at which this data should be written, e.g. MUSWFA
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine updates the FATMEN bank at address LBANK with the
data in the variable IVAL. Attempts to write outside of
bank boundaries will generate an error and a non-zero value of the
return code IRC.
\begin{XMPt} {Example of using the \protect\Rind{FMPUTI} routine}
*     Insert use count into FATMEN bank
      CALL FMPUTI(LBANK,NUSE,MUSCFA,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMPUTI'
\end{XMPt}
\Subsection{4cm}{Read integer value from FATMEN bank}
\Shubr{FMGETI}{(LBANK,IVAL*,IOFF,IRC*)}
\begin{DLtt}{1234567}
\item[LBANK]
Integer variable containing the address of the bank from which
information is to be retrieved,
or -1, when called from
the novice interface.
\item[ IVAL]
Integer variable in which the data is returned.
\item[ISTART]
Offset at which this data should be read, e.g. MUSWFA
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns the information from
the FATMEN bank at address LBANK
in the variable IVAL. Attempts to read outside of
bank boundaries will generate an error and a non-zero value of the
return code IRC.
\par
When called from the novice interface, LBANK should be set to -1.
\begin{XMPt} {Example of using the \protect\Rind{FMGETI} routine}
      CALL FMGETI(LBANK,NUSE,MUSCFA,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMGETI'
\end{XMPt}
\Filename{H2Fatmenuserguide-data-access-providing-routines}
\Section{4cm}{Routines that provide access to the data}
\Subsection{3cm}{Find existing dataset and associate with logical unit}
\Shubr{FMFIND}{(GENAM,DDNAME,*LBANK*,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[DDNAME ]
Character variable of maximum length 8 to specify the FORTRAN logical
unit.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine returns the bank address LBANK of the most
suitable copy of the data referenced by the specified
generic name GENAM.
{\bf N.B. if LBANK is non-zero, the bank at this address
will be used. This allows the user to make their own
selection, e.g. by first calling \Rind{FMGET}, \Rind{FMGETK} or \Rind{FMSELM}, or to override
some parameters in the Zebra bank for the specified generic name.
If you do not wish to use this facility, you must drop the
bank at LBANK using MZDROP.}

When the calling program receives control, it may open the file on
the logical unit corresponding to the DDNAME
specified and read the data.
Should the required data reside on
tape, the FATMEN system will check access to the tape using the Tape
Management System and STAGE the data on to disk.

The ddname, of type CHARACTER, may be specified as 'nn', e.g. 1
or 99, or as any valid logical unit such as FT93F005, IOFILE11, FOR003,
fort.20 etc.
If a one or two digit character is specified, it will be
converted to the format used by FORTRAN on the host machine.
(For files in EP or FX format on VM/CMS systems, the format IOFILEnn will
be used).
If the input bank-address is non-zero, the information in the
bank to which it points
will be used to accessed the data. If the bank-address is zero,
\Rind{FMLIFT} will automatically call \Rind{FMGET}.

\index{NOWAIT}
On VM/CMS systems only, a DDNAME of NOWAIT will result in a
STAGE request with the NOWAIT option. This may be used to
initialise the input staging of the tape {\bf i+1}
while tape {\bf i} is being processed. See the tutorial section
of this manual for an example of using the NOWAIT option.
\begin{XMPt} {Example of using routine \protect\Rind{FMFIND}}
*     Find a dataset using the default FATMEN selection
      CALL FMFIND('//CERN/CNDIV/CHRIS/TAPE8','IOFILE13',LFAT,IRC)
      IF(IRC.NE.0) PRINT *,'Return code',IRC,' from FMFIND.'
\end{XMPt}

\Subsection{4cm}{Create new dataset}
\Shubr{FMMAKE}{(GENAM,DDNAME,*LBANK*,IRC*)}

\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[DDNAME]
Character variable of maximum length 8 to specify the FORTRAN logical
unit.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
\item[IRC]
Integer variable
\end{DLtt}

This subroutine creates a new disk or tape dataset, according to the
contents of the bank passed at LBANK
Before calling \Rind{FMMAKE}, the user should call
\Rind{FMBOOK} (see on Page~\pageref{FMBOOK}) 
and then set the various fields as required.

See the description of the \Rind{FMFIND} routine for information on the DDNAME
parameter.
{\bf N.B. if LBANK is non-zero, the bank at this address
will be used. This allows the user to make their own
selection, e.g. by first calling \Rind{FMGET}, \Rind{FMGETK} or \Rind{FMSELM}, or to override
some parameters in the Zebra bank for the specified generic name.
If you do not wish to use this facility, you must drop the
bank at LBANK using MZDROP.}
\begin{XMPt} {Example of using the routine \protect\Rind{FMMAKE}}
*     Create dataset on IOFILE11.
*     The bank at address LBANK was created by FMLIFT
      CALL FMMAKE('//CERN/ALEPH/MDST/KELLNER/RUN123','IOFILE11',LBANK,IRC)
\end{XMPt}
\Subsection{4cm}{Open a dataset for read or write}
\Shubr{FMOPEN}{(GENAM,DDNAME,*LBANK*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[DDNAME]
Character variable to specify the FORTRAN logical unit to be opened.
\item[LBANK]
Integer variable to input the address of the bank corresponding
to the generic name specified.
\item[CHOPT]
Character variable to specify the options desired.
\item[IRC ]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine accesses a dataset via its generic name GENAM and opens it
on the logical unit specified by the character DDNAME.
The following values are allowed for {\bf CHOPT}.
\begin{DLtt}{12}
\item[D]Make a duplicate into the SMCF robot (CERN only)
\item[E]When used with option T, add END option to SETUP command
\item[F]Issue call to \Rind{FZFILE}
If option \Lit{F} is specified, \Lit{IQUEST(10)} may be set to indicate 
which form of I/O should be used. The default is FORTRAN I/O.
\begin{XMP}
IQUEST(10) = 1 : C I/O
                 Corresponds to option L in FZFILE
IQUEST(10) = 2 : VM only : VMIO
                 (via \Rind{FZHOOK} to FATMEN routine)
IQUEST(10) = 3 : Package I/O, i.e. IOPACK on VM or MVS systems
                 Corresponds to option Y in \Rind{FZFILE}
\end{XMP}
\item[H]Stage wHole tape. This option is ignored unless running 
on a VAX/VMS system using the {\tt VAXTAP}~\cite{bib-VAXTAP}
package.
\item[K]KEEP option on STAGE OUT
\item[L]Override DCB (record format, record length, block length)
in tape label with information in FATMEN bank/catalogue.
(Default on output and for VM disk files, should only be used
on input if tape labels are bad).
\item[N]Do not specify DSN or FILEID on STAGE or LABELDEF command
\item[O]Override SIZE information with value specified in IQUEST(11)
\item[P]AutoPut option in STAGE OUT
\item[Q]Queue stage request (e.g. {\tt NOWAIT} option for {\tt VMSTAGE}).
This option queues the staging request and then returns
without waiting for the staging operation to complete. 
\item[R]Read access
\item[S]Update FATMEN catalogue with file size, as obtained from staging system
if filesize field is zero and return code from staging system is zero.
\item[T]Read/write directly to tape (i.e. do not use STAGE).
\item[U]OPEN will be performed by User
\item[V]As S, but even if file size is non-zero. If the file size
in the catalogue and that returned by VMSTAGE disagree, a warning
message will be issued, but the information obtained from VMSTAGE
will nevertheless be used to update the catalogue.
\item[W]Write access
\item[X]Direct access file
\item[Y]Do not issue STAGE command, but write to file on unit DDNAME
\item[Z]Issue RZOPEN and RZFILE
\end{DLtt}
{\bf N.B. if LBANK is non-zero, the bank at this address
will be used. This allows the user to make their own
selection, e.g. by first calling \Rind{FMGET}, \Rind{FMGETK} or \Rind{FMSELM}, or to override
some parameters in the Zebra bank for the specified generic name.
If you do not wish to use this facility, you must drop the
bank at LBANK using MZDROP.}
\begin{XMPt} {Example of using the \protect\Rind{FMOPEN} routine}
      CALL FMOPEN('//CERN/CHARM2/TEST/DST1/ELEC/HO20/NOM/E02/FILE3',
     +            '3',LBANK,'R',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMOPEN
\end{XMPt}
\par
Option D, when used with option R, will call the routine \Rind{FMSMCF}
to automatically copy the data into the robot. Note that this facility
is currently CERNVM specific, and requires that
\begin{OL}
\item
The dataset resides on tape and is successfully STAGEd in by \Rind{FMOPEN} (i.e.
option T not allowed).
\item
No dataset with the specified generic name currently exists in the
robot.
\item
A pool of tapes {\tt gg\_FAT1} exists (i.e. {\tt WS\_FAT1}).
\end{OL}

Option Y is valid for stage operations only. Instead of issuing the
stage command, it will be written to the file specified by the
\Lit{DDNAME} parameter. No further action will be taken.

\subsubsection{Shift/CORE specific considerations}
\index{SHIFT}
\index{CORE}
\index{DPMUSER}
\index{SFGET}
\index{XYOPEN}
\index{RFIO}
When running on systems that have the SHIFT/CORE software installed,
the default access method for ZEBRA FZ files is via the
\Rind{XYOPEN}/\Rind{XYREAD} interface to {\bf RFIO}. FATMEN calls the
FZ routine \Rind{FZHOOK} to channel I/O through a special routine
that interfaces to {\bf RFIO}. Alternatively, one may select
the C I/O option as described above. In this case, the {\bf CFIO} routines will be
used. On SHIFT/CORE systems, these are compiled in such a way
as to interface to {\bf RFIO}.

To ensure that all staged files are placed in a common directory,
one should set the environmental variables {\bf DPMUSER} and {\bf STAGE\_USER}
as shown below.

\begin{XMPt}{Example of setting the Shift environmental variables}

setenv DPMUSER pubxx
setenv STAGE_USER pubxx

\end{XMPt}


\Subsection{4cm}{Close file opened via FATMEN}
\Shubr{FMCLOS}{(GENAM,DDNAME,LBANK,CHOPT,IRC*)}
\par
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[DDNAME]
Character variable to specify the name of the logical unit to be
closed. The DDNAME is specified as for the routines \Rind{FMOPEN}, 
\Rind{FMFIND} and \Rind{FMMAKE}.
\item[LBANK]
Integer variable to specify the address of the bank to be written
to the FATMEN catalogue.
\item[CHOPT]
Character variable to specify the required options.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
This routine closes a file IUNIT previously opened via \Rind{FMOPEN}.
If LBANK is non-zero, the information concerning the specified
generic name GENAM is written back to the database.
This would typically be used
by a production job, which would update the bank information with
the number of records and total amount of data written, before
updating the file catalogue.
The following values are allowed for {\bf CHOPT}.
\begin{DL}{M}
\item[C]The data, if STAGEd, is cleared.
\item[D]DROP the Staging or maxi-disk (VM), Dismount the tape volume (option
T on \Rind{FMOPEN}) or Deassign the logical name created by \Rind{FMOPEN} (VMS).
\item[E]Call the appropriate Zebra termination routine for this file.
If the file was opened via a call to \Rind{FMOPEN}, \Rind{FMCLOS} will
automatically call \Rind{FZENDI}, \Rind{FZENDO} or \Rind{RZEND} as 
appropriate.
\item[F]Update the bank at LBANK with the file size as obtained from FZINFO.
\item[N]Do not issue close (FORTRAN, VMIO or other) for output file
\item[P]For output staging only: request that the writing of the data
to tape begins (STAGE PUT).
\item[U]Update FATMEN catalogue with bank at LBANK
\item[Z]Drop bank at LBANK with MZDROP
\end{DL}
\begin{XMPt}{Example of using the routine \Rind{FMCLOS} }
*
      CALL FMCLOS('//CERN/CNDIV/CHRIS/TAPE8','FT11F002',LBANK,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMCLOS'
\end{XMPt}
\Subsection{4cm}{Copy a dataset and update the FATMEN catalogue}
\Shubr{FMCOPY}{(GN1,*LBANK1*,*KEYS1*,GN2,*LBANK2*,*KEYS2*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GNn]
Character variable of maximum length 255 to specify the generic names
of the files to be copied.
\item[LBANKn]
Integer variable(s) to return the addresses of the banks
corresponding to GN1 and GN2.
\item[KEYSn]
Integer array of length 10 to return the keys vectors associated
with the specified generic names.
\item[CHOPT]
Character variable specifying the required options.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine copies the dataset pointed to by the generic
name GN1 to the location pointed to by GN2.
(Typically GN1 will be the same as GN2).
If either LBANK1 or LBANK2 is non-zero,
the bank(s) at the corresponding address will be used.
If either LBANK1 or LBANK2 are zero, the routine \Rind{FMGETK} will
be used to obtain the corresponding bank. Should KEYS1(1) or KEYS2(1)
be zero, the default FATMEN selection will apply.
If CHOPT='S', the input file will first be STAGEd and then the
STAGE CHANGE command used to write the output tape (assuming
that input and output media are tape). In all other cases,
the copy will be performed using the VMIO package.
\par
The following options may be specified:
\begin{DL}{M}
\item[A]Input data is already STAGEd.
\item[C]Use STAGE CHANGE / stagewrt/ WRTAPE to write the output file.
\item[F]Copy file using FZIN/FZOUT (permits change of FZ formats)
\item[K]Queue copy for transfer by {\tt CHEOPS} using \Rind{FMCOPQ}
\item[R]Skip Zebra start of run / end of run records (with F)
\item[S]Stage the input file
\item[Z]Stage the output file
\end{DL}
\begin{XMPt}{Example of using the \protect\Rind{FMCOPY} routine }
*     In this example, both datasets are already catalogued
*     IN points to the FATMEN source (FATMEN CARDS)
*     OUT points to a robot tape. FMCOPY copies IN to OUT
*     converting RECFM F to RECFM FB (due to catalogue entries)
      CALL FMCOPY('//CERN/CNDIV/JAMIE/IN' ,LBANK1,KEYS1,
     +            '//CERN/CNDIV/JAMIE/OUT',LBANK2,KEYS2,'S',IRC)
\end{XMPt}
{\bf N.B.}The \Rind{FMCOPY} routine allocates FORTRAN logical units
to perform the copy using the routine \Rind{FMGLUN} (see
on Page~\pageref{FMGLUN}).
These are freed
immediately after use by \Rind{FMFLUN}. For \Rind{FMCOPY} to work, first allocate
some units for use by FATMEN using the routine \Rind{FMSETU} (see
on Page~\pageref{FMSETU}).
\par
On VM systems, FATMEN uses the VMIO logical units corresponding to
the two units declared in \Rind{FMSTRT} (see on Page~\pageref{FMSTRT}) or
\Rind{FMINIT} (see on Page~\pageref{FMINIT}). For example, if \Rind{FMINIT}
is called with logical units 1 and 2, \Rind{FMCOPY} will use \Lit{VM01F001}
and \Lit{VM02F001}.
\par
When the copy is performed by STAGE CHANGE (stagewrt on Cray,
WRTAPE on VAX), no additional logical units are required.
\Subsection{4cm}{Queue a copy request}
\Shubr{FMCOPQ}{(GN1,*LBANK1*,*KEYS1*,GN2,*LBANK2*,*KEYS2*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GNn]
Character variable of maximum length 255 to specify the generic names
of the files to be copied.
\item[LBANKn]
Integer variable(s) to return the addresses of the banks
corresponding to GN1 and GN2.
\item[KEYSn]
Integer array of length 10 to return the keys vectors associated
with the specified generic names.
\item[CHOPT]
Character variable specifying the required options.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine is called by \Rind{FMCOPY} when option K is specified.
Rather than perform the copy directly, it is queued for transfer
by {\tt CHEOPS}. This is performed by writing a request file
in a special queue directory. \Rind{FMCOPQ} may only be used
at sites that are {\tt CHEOPS} partners.

\Subsection{4cm}{Copy a dataset over the network and update the FATMEN catalogue}
\Shubr{FMRCOP}{(GN1,*LBANK1*,*KEYS1*,GN2,*LBANK2*,*KEYS2*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GNn]
Character variable of maximum length 255 to specify the generic names
of the files to be copied.
\item[LBANKn]
Integer variable(s) to return the addresses of the banks
corresponding to GN1 and GN2.
\item[KEYSn]
Integer array of length 10 to return the keys vectors associated
with the specified generic names.
\item[CHOPT]
Character variable specifying the required options.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine is called by \Rind{FMCOPY} when it determines that a
network copy is required.
\Filename{H2Fatmenuserguide-list-select-entry-routines}
\Section{4cm}{Routines to select or list catalogue entries}
\Subsection{4cm}{Check whether generic name already exists}
\Shubr{FMEXST}{(GENAM,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[IRC]
Integer variable in which the number of occurances of GENAM
are returned.
\end{DLtt}
\par
This routine returns the number of occurances of the input generic name
GENAM in the FATMEN database. A return code of 0 indicates, therefore
that no matches are found, whereas a return code of 3 would indicate
that 3 copies were found.
Routine \Rind{FMSELK} (see on Page~\pageref{FMSELK}) can be used
to count the number of files with certain characteristics, such
as location code or media type.
\begin{XMPt}{Example of using the \protect\Rind{FMEXST} routine}
      CALL FMEXST('//CERN/CNDIV/JAMIE/IN',IRC)
      PRINT *,IRC,' occurances in FATMEN database'
\end{XMPt}

\Subsection{4cm}{List files in specified directory}
\Shubr{FMLS}{(GENAM,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[CHOPT]
Character variable to specify the options desired.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine lists the files according to the specified generic name GENAM.
Examples of valid generic-names are:
\begin{XMP}
//cern/cndiv/goossens/*,
//cern/cndiv/goossens/dcf/m%%%,
//cern/cndiv/chris/tape8.
\end{XMP}
The generic-name may also contain
numeric ranges specified as (mm:nn), such as (13:147) in the field
following the last delimiter (/).
See on Page~\pageref{FMATCH} for more details.
If {\tt IRC < 0}, then the specified pathname does not
exist or is invalid. Otherwise, IRC returns the number of files found
(which may be 0).
\begin{XMPt}{Example of using the \protect\Rind{FMLS} routine}
*     List media details of files M%%% in //CERN/CNDIV/GOOSSENS/DCF
      CALL FMLS('//CERN/CNDIV/GOOSENS/DCF/M%%%','M',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMLS'
\end{XMPt}
\par
The allowed values of CHOPT and their meanings are as follows:
\begin{DLtt}{12}
\item[A]list all attributes, except DZSHOW (option Z).
\item[B]brief (80) column listing
\item[C]display comment field associated with file
\item[D]to be used to generate a KUMAC file to remove (delete) the entry
\item[E]extended (132) column listing
\item[F]list file attributes, such as start/end record and block
\item[G]list the full generic name of each file
\item[H]write header line]useful in the case of output redirection 
\item[I]sort generic names in Increasing order
\item[J]Just show entries that are accessible
\item[K]list keys associated with this file (copy level, media type, location)
\item[L]list logical attributes, such as FATMEN file format
(ZEBRA exchange etc.)
\item[M]list media attributes, such as VSN, VID, file sequence number for tape
files, host type and operating system for disk files.
\item[N]lists dataset name on disk/tape of this file
\item[O]list owner, node and job of creator etc.
\item[P]list physical attributes, such as record format etc.
\item[Q]obtain volume information from Tape Management System (TMS)
if the entry corresponds to a tape file, and if the TMS
option is installed.
\item[R]display where the data Reside. 
\begin{DLtt}{1234567890}
\item[Disk files]Displays if the file is accessible and the access method, if
known. (e.g. local disk, NFS, AFS, DFS etc.)
\item[Tape files]Displays if the associated volume is in an active library,
i.e. not archived, whether it is staged, and whether a device of the appropriate
type exists on the local node or is served.
\end{DLtt}
\item[S]lists security details of this file (protection)
\item[T]list date and time of creation, last access etc.
\item[U]list user words.
\item[X]display only one entry per generic name (implies I)
\item[W]list generic names across the page (default is one name per line)
\item[Z]dump ZEBRA bank with DZSHOW.
\end{DLtt}

\Subsection{4cm}{Display contents of FATMEN bank}
\Shubr{FMSHOW}{(GENAM,*LBANK*,*KEYS*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the input generic name GENAM. LBANK can have the following values:
\begin{DLtt}{12}
\item[>0]The bank at this address will be used.
\item[0]The corresponding bank will be retrieved from the FATMEN catalogue
\item[<0]The last bank referenced by one of the novice interface routines
will be used.
\end{DLtt}
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name. If the keys vector is non-zero,
it will be used by \Rind{FMGETK} to return the bank corresponding to
a particular copy of a dataset.
\item[CHOPT]
Character variable to specify the options desired.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine displays the contents of the FATMEN bank corresponding to
the input generic names GENAM, or at the address LBANK if non-zero.
See the description of the {\bf ls} command for a description of
the CHOPT argument.
It is envisaged that this routine will be tailored to suit the
 requirements of individual experiments.
\begin{XMPt}{Example of using the \protect\Rind{FMSHOW} routine}
*
      CALL FMSHOW('//CERN/CNDIV/GOOSENS/DCF/M123',LBANK,KEYS,'M',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMSHOW'
\end{XMPt}
\par
The allowed values of CHOPT and their meanings are
\begin{DLtt}{1234567}
\item[A]list All attributes, except DZSHOW (option Z).
\item[B]Brief (80) column listing
\item[C]display Comment field associated with file
\item[D]to be used to generate a KUMAC file to remove (Delete) the entry
\item[E]Extended (132) column listing
\item[F]list File attributes, such as start/end record and block
\item[G]list the full Generic name of each file
\item[H]write Header line - useful in the case of output redirection 
\item[I]sort generic names in Increasing order
\item[J]Just show entries that are accessible
\item[K]list Keys associated with this file (copy level, media type, location)
\item[L]list Logical attributes, such as FATMEN file format
(ZEBRA exchange etc.)
\item[M]list Media attributes, such as VSN, VID, file sequence number for tape
files, host type and operating system for disk files.
\item[N]lists dataset Name on disk/tape of this file
\item[O]list Owner, node and job of creator etc.
\item[P]list Physical attributes, such as record format etc.
\item[Q]obtain volume information from Tape Management System (TMS)
if the entry corresponds to a tape file, and if the TMS
option is installed.
\item[R]display where the data Reside. 
\begin{DLtt}{1234567890}
\item[Disk files]Displays if the file is accessible and the access method, if
known. (e.g. local disk, NFS, AFS, DFS etc.)
\item[Tape files]Displays if the associated volume is in an active library,
i.e. not archived, whether it is staged, and whether a device of the appropriate
type exists on the local node or is served.
\end{DLtt}
\item[S]lists Security details of this file (protection)
\item[T]list date and time of creation, last access etc.
\item[U]list user words.
\item[X]display only one entry per generic name (implies I)
\item[W]list generic names across the page (default is one name per line)
\item[Z]dump ZEBRA bank with DZSHOW.
\end{DLtt}

\Subsection{4cm}{Count file names}
\Shubr{FMFILC}{(GENAM,NFILES*,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic
name of  interest.
\item[NFILES]
Integer variable in which the number of matching files is returned.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns the number of files that match the specified
generic name. The generic name is interpreted as for the
\Rind{FMLS} routine (see on Page~\pageref{FMLS}. That is,
any characters following the last slash are assumed to be
the filename, those preceeding the last slash are the pathname.
\begin{XMPt}{Example of using the \protect\Rind{FMFILC} routine}
      CALL FMFILC('//CERN/DELPHI'//
     +            '/ALLD/RAWD/CERN/V00%/E09%.00/P01R*/NONE/RUN*',
     +            NFILES,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMFILC'
\end{XMPt}
\Subsection{4cm}{Scan FATMEN directory structure}
\Shubr{FMSCAN}{(PATH,NLEVEL,UROUT,IRC*)}
\begin{DLtt}{1234567}
\item[PATH]
Character variable of maximum length 255 to specify the path name of
interest.
\item[NLEVEL]
Integer variable specified the number of levels to descend in the directory
structure. 
\item[UROUT]
Address of a user routine that is called for each matching directory.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine scans the directory names
in the directory tree specified by PATH.
The directory tree may contain wild-cards (* or \%) in any position,
or numeric ranges specified as (mm:nn), such as (13:147).
See on Page~\pageref{FMATCH} for more details.
The path name
PATH may also contain the wild-cards {\tt<} or {\tt>}. These wild cards
may be used to find, for example, the highest PASS of a run.
Assuming that, at a given level, the generic name has a field
containing PASSn, e.g. PASS3, PASS1, specifying PASS{\tt>} will
cause \Rind{FMSCAN} to follow {\bf ONLY} the PASS3 subdirectory

For each matching directory, \Rind{FMSCAN} will call the specified user routine
with the matching directory name. Upon exit from the user routine, a non-zero
return code will cause \Rind{FMSCAN} to stop the search.
\par
On entry to the user routine, IQUEST contains the following
information:
\begin{DLtt}{1234567890}
\item[IQUEST(10)]number of elements in path passed to \Rind{FMSCAN}
\item[IQUEST(12)]number of subdirectories
\item[IQUEST(13)]number of elements in current path
\item[IQUEST(14)]number of keys
\item[IQUEST(15)]number of elements per key
\end{DLtt}
\par
In addition, on return from \Rind{FMSCAN}, IQUEST(11) contains the
total number of directories processed.
\begin{XMPt}{Example of calling the routine \protect\Rind{FMSCAN}}
      EXTERNAL FUSCAN
*
*     This should follow the path PASS5/GPMH/P5
*
      ICONT = 0
 1    CONTINUE
      CALL FMSCAN('//CERN/OPAL/PROD/PASS>/GPMH/P<',99,FUSCAN,IRC)
\end{XMPt}
\begin{XMPt}{Example of a user exit routine}
      SUBROUTINE UROUT(PATH,IRC)
      CHARACTER*(*) PATH
      COMMON/QUEST/IQUEST(100)
      IRC = 0
*
*     Set IRC^=0 to stop directory scan
*
      PRINT *,'<< ',PATH(1:LENOCC(PATH))
      END
\end{XMPt}
\Subsection{4cm}{Loop through FATMEN file names}
\Shubr{FMLOOP}{(GENAM,NLEVEL,UROUT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name of
interest.
\item[NLEVEL]
Integer variable specified the number of levels to descend in the directory
structure. 
\item[UROUT]
Address of a user routine that is called for each matching file.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine is similar to \Rind{FMSCAN}, but expects a complete generic name
on input, rather than just a path name.

For each matching generic name, \Rind{FMLOOP} will call the 
specified user routine with the generic name and keys vector.
Upon exit from the user routine, a non-zero
return code will cause \Rind{FMLOOP} to stop the search.

Upon entry to the user routine, \Lit{IQUEST} will contain the following
information.

\begin{DLtt}{1234567890}
\item[IQUEST(10)]number levels in initial path
\item[IQUEST(11)]number of directories found
\item[IQUEST(12)]number of subdirectories at this level
\item[IQUEST(13)]number of elements in path name
\item[IQUEST(14)]number of keys
\item[IQUEST(15)]number of words per key
\item[IQUEST(16)]incremental count of number of keys selected
\item[IQUEST(17)]number of this key vector
\end{DLtt}

This routine respects the values set for medium type, location code
and copylevel by the routines \Rind{FMSETM}, \Rind{FMSETL} and \Rind{FMSETC} respectively.

Upon return from the user routine, IRC < 0 will cause \Rind{FMLOOP} to skip
to the next directory, IRC > 0 will cause \Rind{FMLOOP} to return. 
\begin{XMPt}{Example of calling the routine \protect\Rind{FMLOOP}}
      EXTERNAL      UROUT
*
*     List all files in all directories beginning with a J
*     down to the maximum (99) number of levels 
*
      CALL FMLOOP('//CERN/CNDIV/J*/*',99,UROUT,IRC)
\end{XMPt}
\begin{XMPt}{Example of a user exit routine}
      SUBROUTINE UROUT(GENAM,KEYS,IRC)
      CHARACTER*(*) GENAM 
      PARAMETER     (LKEYFA=10)
      DIMENSION     KEYS(LKEYFA)
      IRC = 0
      PRINT *,'Generic name = ',GENAM(1:LENOCC(GENAM))
      PRINT *,'Keys: '
      CALL FMPKEY(KEYS,LKEYFA)
      END
\end{XMPt}

\Subsection{6cm}{Return directory names in directory structure}
\Shubr{FMLDIR}{(PATH,DIRS*,NFOUND,MAXDIR,*ICONT*,IRC*)}
\begin{DLtt}{1234567}
\item[PATH]
Character variable of maximum length 255 to specify the path name of
interest.
\item[DIRS ]
Character array of length 255 characters and dimension MAXFIL
to return the names of the directories found.
\item[NFOUND]
Integer variable to return the actual dimension of DIRS.
\item[MAXFIL]
Integer constant to specify the dimension of DIRS.
\item[ICONT]
Integer variable to indicate whether this is a continuation
of a previous call, or a new call.
If more directories are found than can be returned in a single
call, ICONT will be set to 1.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns the directory names
in the directory tree specified by PATH.
The directory tree may contain wild-cards (* or \%) in any position,
or numeric ranges specified as (mm:nn), such as (13:147).
See on Page~\pageref{FMATCH} for more details.
The path name
PATH may also contain the wild-cards {\tt<} or {\tt>}. These wild cards
may be used to find, for example, the highest PASS of a run.
Assuming that, at a given level, the generic name has a field
containing PASSn, e.g. PASS3, PASS1, specifying PASS{\tt>} will
cause \Rind{FMLDIR} to follow {\bf ONLY} the PASS3 subdirectory
structure. Although the method used by \Rind{FMLDIR} is slightly slower
for a complete directory scan than \Rind{FMLIST}, it normal cases
it will be much faster as it follows only the paths which match
the input path name.
NFOUND returns the actual number of directories returned.
IRC = -1 : more directories found than can be returned in DIRS(MAXDIR)
\Rind{FMLDIR} should be called again with ICONT=0 to get the next MAXDIR
batch of DIRS.
\begin{XMPt}{Example of using the \protect\Rind{FMLDIR} routine}

      PARAMETER     (LKEYFA=10)
      PARAMETER     (MAXDIR=1000)
      CHARACTER*255 DIRS(MAXDIR)
*
*     This should follow the path PASS5/GPMH/P5
*
      ICONT = 0
 1    CONTINUE
      CALL FMLDIR('//CERN/OPAL'//
     +            '/PROD/PASS>/GPMH/P<',
     +            DIRS,NFOUND,MAXDIR,IRC)
      IF(IRC.EQ.-1) THEN
         ICONT = 1
      ELSE
         ICONT = 0
         IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMLDIR'
      ENDIF
\end{XMPt}

\Subsection{6cm}{Return file names in directory structure}
\Shubr{FMLFIL}{(GENAM,FILES*,KEYS*,NFOUND,MAXFIL,JCONT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name of
interest.
\item[FILES ]
Character array of length 255 characters and dimension MAXFIL
to return the names of the files found.
\item[KEYS  ]
Integer matrix of first dimension LKEYFA and second dimension MAXFIL.
\item[NFOUND]
Integer variable to return the actual dimension of FILES and
then actual second dimension of KEYS.
\item[MAXFIL]
Integer constant to specify the second dimension of KEYS.
\item[JCONT]
Integer variable to indicate whether this is a continuation
of a previous call, or a new call.
If more directories are found than can be returned in a single
call, JCONT will be set to 1.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine returns the file names
in the directory tree specified by GENAM. 
The directory tree may contain wild-cards (* or \%) in any position,
or numeric ranges specified as (mm:nn), such as (13:147).
See on Page~\pageref{FMATCH} for more details.
The generic name
GENAM may also contain the wild-cards {\tt<} or {\tt>}. These wild cards
may be used to find, for example, the highest PASS of a run.
Assuming that, at a given level, the generic name has a field
containing PASSn, e.g. PASS3, PASS1, specifying PASS{\tt>} will
cause \Rind{FMLFIL} to follow {\bf ONLY} the PASS3 subdirectory
structure.
NFOUND returns the actual number of files returned.
IRC = -1 : more files found than can be returned in FILES(MAXFIL)
\Rind{FMLDIR} should be called again with ICONT=0 to get the next MAXFIL
batch of FILES.
{\it N.B. This routine returns ALL file names in
in the order in which they were added to the catalogue.}
See the routine on Page~\pageref{FMSORT} for details of how to
sort the FILES array.

\begin{XMPt}{Example of using the \protect\Rind{FMLFIL} routine}

      PARAMETER     (LKEYFA=10)
      PARAMETER     (MAXFIL=1000)
      CHARACTER*255 FILES(MAXFIL)
*
*     This should follow the path PASS5/GPMH/P5
*
*     Indicate that this is a new call
*
      JCONT = 0
 1    CONTINUE
      CALL FMLFIL('//CERN/OPAL/PROD/PASS>/GPMH/P<',
     +            FILES,KEYS,NFOUND,MAXFIL,JCONT,IRC)
      IF(IRC.EQ.-1) THEN
         JCONT = 1
      ELSE
         JCONT = 0
         IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMLFIL'
      ENDIF
*
*     Process this batch of files...
*
*     ...
*
*     Get next batch of files...
*
      IF(JCONT.NE.0) GOTO 1
\end{XMPt}

\Subsection{4cm}{Sort file names and keys}
\Shubr{FMSORT}{(FILES,KEYS,NFILES,JSORT*,IRC*)}
\begin{DLtt}{1234567}
\item[FILES]
Character array of maximum length 255 containing the file names
to be sorted.
\item[KEYS]
Integer matrix of size (10,NFILES) containing the keys
vectors associated with the file names in FILES.
\item[NFILES]
Integer variable containing the size of the array FILES.
\item[JSORT]
Integer array of length NFILES to return the sorted indices
into FILES and KEYS.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns in JSORT the sorted indices into FILES
and KEYS in ascending order of FILES.
\begin{XMPt}{Example of using the \protect\Rind{FMSORT} routine}
      PARAMETER     (LKEYFA=10, MAXFIL=1000)
      CHARACTER*255 FILES(MAXFIL)
      INTEGER       KEYS(LKEYFA,MAXFIL),JSORT(MAXFIL)
*
      CALL FMSORT(FILES,KEYS,NFILES,JSORT,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMSORT'
*
*     Print sorted files and associated keys
*
      DO 10 I=1,NFILES
      PRINT *,FILES(JSORT(I))
10    CALL FMPKEY(KEYS(1,JSORT(I))),LKEYFA)
\end{XMPt}

\Subsection{4cm}{Rank generic names by tape volume and file sequence number}
\Shubr{FMRANK}{CHFILES,KEYS,NFILES,JSORT,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[CHFILES]
Character array of maximum length 255 containing the file names
to be ranked.
\item[KEYS]
Integer matrix of size (10,NFILES) containing the keys
vectors associated with the file names in CHFILES.
\item[NFILES]
Integer variable containing the size of the array CHFILES.
\item[JSORT]
Integer array of length NFILES to return the sorted indices
into CHFILES and KEYS.
\item[CHOPT]
Character variable specifying the required options
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine returns a index into the arrays {\tt CHFILES}
and {\tt KEYS} ranked by tape volume ({\tt MVIDFA}) and
file sequence number ({\tt MFSQFA}). A maximum of 100
entries can be processed in one call.

It is foreseen that this routine be used prior to calling
\Rind{FMOPEN} with the {\tt Q} option.

\Subsection{4cm}{Match file name against pattern}
\Shubr{FMATCH}{(CHFILE,MATCH,IRC*)}
\begin{DLtt}{1234567}
\item[CHFILE]
Character variable of maximum length 255 containing the
file name to match.
\item[MATCH]
Character variable of maximum length 255 to specify the
pattern to match against.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine matches the input file name CHFILE against the
pattern specified in MATCH and returns 1 in IRC if no match
is found. MATCH may include wild-cards as in VAX/VMS or
VM/CMS file names, where a ``\%'' will match any single character
and a "*" will match any number of characters.
In addition, numeric ranges may be specified using the syntax
(mm:nn), such as (1:135). This form can be useful for specifying
a set of runs, LEP files etc.
Note that if {\it mm} is shorter than {\it nn}, it will
be left-padded with zeroes, thus (1:135) is equivalent to (001:135).
CHFILE and MATCH are character variables and may be as long as 255
characters each.
\begin{XMPt}{Example of using the routine \protect\Rind{FMATCH}}
      CHARACTER*255 CHFILE,MATCH
*     Match against files RUN1-9 (or RUNx)
      CALL FMATCH(CHFILE(1:LENOCC(CHFILE)),'RUN%',IRC)
      IF(IRC.EQ.0) THEN
         PRINT *,'Matching dataset found - ',CHFILE(1:LENOCC(CHFILE))
      ELSE
         PRINT *,'Dataset ',CHFILE(1:LENOCC(CHFILE)),' does not match'
      ENDIF
\end{XMPt}
\Subsection{4cm}{Match multiple names against pattern}
\Shubr{FMMANY}{(MATCH,FILES,NFILES,NMATCH*,IRC*)}
\begin{DLtt}{1234567}
\item[MATCH ]
Character variable of maximum length 255 to specify the
pattern to match against.
\item[FILES]
Character array of maximum length 255 containing a list of file
names to match.
\item[NFILES]
Integer variable specifying the number of files in FILES.
\item[NMATCH]
Integer variable returning the element of FILES which matches.
\item[IRC ]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine performs the same wild-card matching as \Rind{FMATCH}
described above. In addition, if a {\tt<} or {\tt>} is specified in the
MATCH pattern, it will return in NMATCH the element of the
character array FILES which matches.
\begin{XMPt}{Example of using the routine \protect\Rind{FMMANY}}
      CHARACTER*255 FILES(9),MATCH
      FILES(1) = 'PASS3'
      FILES(2) = 'TEST3'
      FILES(3) = 'RUN13'
      FILES(4) = 'HOTP'
      FILES(5) = 'STUFF'
      FILES(6) = 'PASS3'
      FILES(7) = 'PASS5'
      FILES(8) = 'PAZS9'
      FILES(9) = 'POSS9'
      MATCH    = 'P%SS>'
      CALL FMMANY(MATCH,FILES,9,NMATCH,IRC)
      IF(NMATCH.NE.0) PRINT *,FILES(NMATCH)
\end{XMPt}
\Subsection{4cm}{Print contents of FATMEN keys vector}
\Shubr{FMPKEY}{(KEYS,NKEYS)}
\index{Keys}
\begin{DLtt}{1234567}
\item[KEYS]
Integer array of length 10 containing a FATMEN keys vector
\item[NKEYS]
Integer constant containing the number of keys to be printed.
This should always be set to 10.
\end{DLtt}
\par
This routine displays the contents of the FATMEN keys vector in
the correct format, depending on the data type of the various elements
(integer or hollerith).
\begin{XMPt}{Example of using the \protect\Rind{FMPKEY} routine}
      CALL FMPKEY(KEYS,10)
\end{XMPt}

\Subsection{4cm}{Select files using the FATMEN keys}
\Shubr{FMSELK}{(GENAM,INKEYS,OUKEYS*,NKEYS*,MAXKEY,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[INKEYS]
Integer array of length 10 to input the keys vector to match those
found for the specified generic name.
\item[OUKEYS ]
Integer array of size (10,MAXKEY) to return
the keys vector that match the input keys and
the specified generic name.
\item[MAXKEY]
Integer constant to specify the maximum second dimension of
the array OUKEYS.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine selects all datasets corresponding to the generic
name GENAM on the basis of the keys vector INKEYS. By setting
the relevant elements of INKEYS, datasets may be selected on
media type, copy level and location code. Thus, by setting
INKEYS(MKMTFA) to 1 (disk), all matching datasets on disk can
be selected. If a key element is set to a negative value, it
will not be used in the selection. Thus, by setting INKEYS(MKLCFA) to -1
and INKEYS(MKMTFA) to 2, all datasets with the specified generic name
on 3480 cassette at any location will be returned.
The number of datasets that match is returned in NKEYS, up to a maximum
of MAXKEY. The array OUKEYS may then be used as input to
the routine \Rind{FMGETK}.
\begin{XMPt}{Example of using the \protect\Rind{FMSELK} routine}
*     Argument declarations
      PARAMETER (LKEYFA=10)
      PARAMETER (MAXKEY=999)
      DIMENSION INKEYS(LKEYFA),OUKEYS(LKEYFA,MAXKEY)
*     The following statements will select all datasets
*     with copy level (MKCLFA) of 1 (i.e. a copy of an original file),
*     media type of 1 (i.e. disk) and location code of 1 (i.e. CERN)
      INKEYS(MKCLFA) = 1
      INKEYS(MKMTFA) = 1
      INKEYS(MKLCFA) = 1
      CALL FMSELK('//CERN/CNDIV/CHRIS/TAPE8',INKEYS,OUKEYS,MAXKEY,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMSELK'
\end{XMPt}
\Subsection{4cm}{Select files using the FATMEN bank information}
\Shubr{FMSELB}{(GENAM,INKEYS,NKEYS,UEXIT,ISEL*,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[INKEYS ]
Integer array of length 10 to input the keys vector to match those
found for the specified generic name.
\item[NKEYS]
Integer constant to specify the actual second dimension of
the array INKEYS.
\item[ISEL]
Integer variable to return the index of the selected copy
is returned. The keys vector of the selected copy is INKEYS(1,ISEL).
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine allows the user to select a particular copy of a data set
according to information contained in the FATMEN bank for the specified
generic name. INKEYS is a matrix of dimension (10,NKEYS) containing
the keys vectors for the various data sets matching the generic name, GENAM.
This matrix is produced by a call to \Rind{FMSELK} to perform the appropriate
initial selection, such as all data sets matching the input generic
name that are on disk etc. For each matching data set, \Rind{FMSELB} will
call the user-specified exit routine, which much be declared EXTERNAL,
in the following way:
\begin{XMP}
       CALL UEXIT(GENAM,LBANK,KEYS,NKEYS,N,ISEL*,IRC*)
\end{XMP}
were
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable containing the address of the bank corresponding
to the specified generic name.
\item[KEYS ]
Integer array of length 10 containing the keys vector associated
with the specified generic name.
\item[NKEYS]
Integer variable specifying the number of matches for this
generic name, i.e. the number of times that UEXIT will be called.
\item[N]
Integer variable specifying the candidate number for this call,
which is less than or equal to NKEYS.
\item[ISEL]
Integer variable to return the index of the selected copy
is returned. The keys vector of the selected copy is INKEYS(1,ISEL).
After the last call to UEXIT for each generic name, ISEL should
be 0, to indicate that none of the candidates was selected, or
the number of the candidate that was chosen.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\begin{XMPt}{Example of using the \protect\Rind{FMSELB} routine}
*     Argument declarations
      PARAMETER (LKEYFA=10)
      PARAMETER (MAXKEY=999)
      DIMENSION INKEYS(LKEYFA,MAXKEY)
      CALL FMSELB('//CERN/CNDIV/CHRIS/TAPE8',INKEYS,NKEYS,ISEL,IRC)
      IF(IRC.NE.0) THEN
         PRINT *,'Return code ',IRC,' from FMSELK'
      ELSE
         PRINT *,'Copy ',ISEL,' selected'
      ENDIF
\end{XMPt}
\Subsection{4cm}{Select files using keys matrix}
\Shubr{FMSELM}{(GENAM,LBANK*,KEYS*,KEYM,NKEY,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable in which the address of the FATMEN bank is returned.
\item[KEY]
Integer array of length 10 in which the keys vector associated with
the bank at LBANK is returned.
\item[KEYM]
Integer matrix of size (10,NKEY) containing the ordered selection
criteria.
\item[NKEY]
Integer variable to specify the second dimension of
the matrix KEYM.
\item[CHOPT]
Character variable containing the user specified options.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine takes each row of the input matrix KEYM in turn,
and attempts to find a matching dataset. If no matching dataset
is found, it then proceeds to the next row.
Currently, checks are only made on media type (MKMTFA), location code
(MKLCFA) and copy level (MKCLFA). A value of -1 indicates that no
check on this item is to be made.
\par
The following options are available:
\begin{XMP}
   I - issue FORTRAN inquire for disk datasets (with full support
       for SHIFT files, Unix environmental variables, VM mini-disks,
       SFS pools etc.)
   N - check host name for disk datasets against current host
   M - require that tape datasets reside on manually mounted volumes
   R - require that tape datasets reside on robotically mounted volumes
\end{XMP}
\begin{XMPt}{Example of using the \protect\Rind{FMSELM} routine}
*     Argument declarations
      PARAMETER (LKEYFA=10)
      PARAMETER (NKEY=3)
      DIMENSION KEYS(LKEYFA),KEYM(LKEYFA,NKEY)
*
*     Define search criteria: first, disk dataset in location 31,
*        with no check on copy level,
*                             next, dataset on media type 2 in location 1,
*                             next, dataset on any media in any location 
*                             with copy level 1
*
      KEYM(MKMTFA,1) = 1
      KEYM(MKCLFA,1) = -1
      KEYM(MKLCFA,1) = 31

      KEYM(MKMTFA,2) = 2
      KEYM(MKCLFA,2) = -1
      KEYM(MKLCFA,2) = 1

      KEYM(MKMTFA,3) = -1
      KEYM(MKCLFA,3) = 1
      KEYM(MKLCFA,3) = -1
*
*     Options NM: No check on host name for disk files,
*                 Manually mounted tape required
*
      CALL FMSELM('//CERN/OPAL/DDST/PASS3/FYZ1/P20/R02222C01',
     +   LBANK,KEYS,KEYM,NK,'NM',IRC)

      PRINT *,'Return code from FMSELM = ',IRC

      IF(IRC.EQ.0)
     +   CALL FMSHOW('//CERN/OPAL/DDST/PASS3/FYZ1/P20/R02222C01',
     +                LBANK,KEYS,'A',IRC)


\end{XMPt}
\Subsection{4cm}{Compare FATMEN entries}
\Shubr{FMCOMP}{(GENAM1,*LBANK1*,*KEYS1*,GENAM2,*LBANK2*,*KEYS2*,IRC*)}
\begin{DLtt}{1234567}
\item[GENAMn]
Character variable of maximum length 255 to specify the generic names
of the files to be compared.
\item[LBANKn]
Integer variable(s) to return the addresses of the banks
corresponding to GENAM1 and GENAM2.
\item[KEYSn]
Integer array of length 10 to return the keys vectors associated
with the specified generic names.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine compares the FATMEN entries pointed to by the generic
names GENAM1 and GENAM2. If either LBANK1 or LBANK2 is non-zero,
the bank(s) at the corresponding address will be used.
If either LBANK1 or LBANK2 are zero, the routine \Rind{FMGETK} will
be used to obtain the corresponding bank. Should KEYS1(1) or KEYS2(1)
be zero, the default FATMEN selection will apply.
A zero return code indicates that the comparison succeeded. Other values
of IRC are given below.
\begin{OL}
\item
Error obtaining bank corresponding to GENAM1 using \Rind{FMGETK}.
\item
Error obtaining bank corresponding to GENAM2 using \Rind{FMGETK}.
\item
The datasets referred to by GENAM1 and GENAM2 are on different media.
\item
Both datasets are on disk but the comparison failed (either fully
qualified dataset name or host name differ).
\item
Both datasets are on tape but the comparison failed (\Lit{VSN/VID/FILESEQ}
do not match).
\end{OL}
\begin{XMPt}{Example of using the \protect\Rind{FMCOMP} routine}
*     Compare entries with following generic names
      CALL FMCOMP('//CERN/OPAL/EVKI/MW34MH/R1200/P01',LBANK1,KEYS1,
     +            '//CERN/OPAL/EVKI/JT72MH/R1100/P19',LBANK2,KEYS2,IRC)
      IF(IRC.NE.0) PRINT *,'Comparison failed'
\end{XMPt}
\Filename{H2Fatmenuserguide-user-exits}
\Section{4cm}{User exits}
\par
See also the description of user exits for the \Rind{FMQVOL} and \Rind{FMALLO}
routines.
\Subsection{4cm}{Print user words and comment}
\Shubr{FMUPRT}{(GENAM,LBANK,KEYS,IUSER,COMM,IRC*)}
\index{User exits}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable specifying the generic name of the file.
\item[LBANK]
Integer variable containing the address of the corresponding bank.
\item[KEYS]
Integer array of length 10 containing  the keys vector associated
with the specified generic name.
\item[IUSER]
Integer array of length 10 containing the user words.
\item[COMM]
Character variable of length 80 in which the comment is passed.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine is called from \Rind{FMSHOW} to print the user words and
comment in the required format. A dummy routine is provided
in the standard library. This routine should be provided
if the user words should be interpreted in a special way,
e.g. as packed 6 bit integers etc.
\begin{XMPt}{Example of a user \protect\Rind{FMUPRT} routine}
      SUBROUTINE FMUPRT(GENAM,LBANK,KEYS,JUSER,COMM,IRC)
      DIMENSION KEYS(10),JUSER(10),IUSER(10),USER(10)
      EQUIVALENCE (USER(1),IUSER(1))
      CHARACTER*(*) GENAM,COMM
      LCOMM = LENOCC(COMM)
      PRINT *,COMM(1:LCOMM)
      CALL UCOPY(JUSER,IUSER,10)
*     User words are real
      PRINT *,USER
      END
\end{XMPt}
\Subsection{4cm}{User selection}
\Shubr{FMUSEL}{(GENAM,LBANK,KEYS,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable specifying the generic name of the file.
\item[LBANK]
Integer variable containing the address of the corresponding bank.
\item [KEYS]
Integer array of length 10 containing  the keys vector associated
with the specified generic name.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine allows the user to accept or reject FATMEN entries
during the default selection procedure.
The FATMEN software builds a list of candidates that match
the selection criteria that are in force. For each candidate
the \Rind{FMUSEL} routine is called in turn. If a non-zero return
code is found, the corresponding entry is removed from the
list of candidates.
\begin{XMPt}{Example of a user \protect\Rind{FMUSEL} routine}
      SUBROUTINE FMUSEL(GENAM,LBANK,KEYS,IRC)
      DIMENSION KEYS(10)
      CHARACTER*(*) GENAM
*
*     Example user selection routine to reject any
*     entries with a copy level indicating Cray data representation
*
      IF(KEYS(MKCLFA).EQ.4) THEN
         IRC = -1
      ELSE
         IRC = 0
      ENDIF
      END
\end{XMPt}

\Filename{H2Fatmenuserguide-allocate-media-routines}
\Section{4cm}{Routines to allocate media and interface to the TMS}
\Subsection{4cm}{Allocate new piece of media}
\Shubr{FMALLO}{(MEDIA,DENS,COMPACT,LIB,POOL,LBANK,CHOPT,VSN*,VID*,IRC*)}
\index{VSN}
\index{VID}
\begin{DLtt}{1234567}
\item[MEDIA]
Character variable of length 4 to specify the medium required.
\item[DENS]
Character variable specifying the required density.
{\bf Reserved for future use}
\item[COMPACT]
Character variable specifying whether compaction is required or not.
{\bf Reserved for future use}
\item[LIB]
Character variable to specify the library from which
the allocated volume should come.
At CERN, a library consists of a two letter experimental code
followed by the tape store name, such as {\tt PV\_DPVAULT},
{\tt PV\_ARCHIVE}.
\item[POOL]
Character variable to specify the pool from which
the allocated volume should come.
Pools can be used to separate libraries into groups, such
as EA0001-EA1000 for DSTs, EA1001-EA9999 for Rawdata etc.
\item[LBANK]
Integer variable to input the address of the bank corresponding
to the generic name for which the medium is to be allocated
\item[CHOPT]
Character variable to specify the type of operation required.
\item[VSN]
Character variable of length 6 in which the VSN is returned.
\item[VID]
Character variable of length 6 in which the VID is returned.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
\index{allocation}
This routine allocates a new piece of medium of the type
specified. The allocation is performed by calling the
Tape Management System (TMS).
\begin{XMPt}{Example of using the routine \protect\Rind{FMALLO}}
      CHARACTER*6 VSN,VID
*
*     Allocate a 3480 from the pool XVPROD in the library SMCF_1
*
      CALL FMALLO('3480','38K',' ','SMCF_1','XVPROD',LBANK,' ',
     +VSN,VID,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMALLO'
\end{XMPt}
\Subsection{4cm}{Get volume from name pool with sufficient free space} 
\Shubr{FMGVOL}{(GENAM,LBANK,KEYS,CHLIB,CHPOOL,CHFREE,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
If LBANK is non-zero on input, the information in the 
bank at LBANK will be used.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
If LBANK is zero, KEYS may be used to select a specific
copy of a file.
\item[CHLIB]Character variable specifying the {\tt TMS} library
in which the specified pool(s) reside
\item[CHPOOL]Character variable specifying the {\tt TMS}
pool that is to be searched for a volume with sufficient
space. The space requirement is taken from the file size
field {\tt MFSZFA} of the FATMEN bank or catalogue entry.
\item[CHFREE]Character variable specifying the {\tt TMS}
pool from which a new volume is allocated in the case
the the pool {\tt CHPOOL} contains no volumes or no volumes
with sufficient space.
\item[CHOPT]
Character variable specifying the options required.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine allocates a tape volume with sufficient space
for the current file. The FATMEN bank is automatically updated
with the volume information (FATMEN fields {\tt MVSNFA, MVIDFA}
and {\tt MFSQFA} in the case of successful operation.

\Shubr{FMGVID}{(IFREE,IMEDIA,CHLIB,CHPOOL,CHFREE,CHVSN,CHVID,IFILE,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[IFREE]
Integer variable specifying the space requirement in Megabytes
\item[IMEDIA]Integer variable specifying the media type. This
is used to obtain the high water mark and maximum capacity.
\item[CHLIB]Character variable specifying the {\tt TMS} library
in which the specified pool(s) reside
\item[CHPOOL]Character variable specifying the {\tt TMS}
pool that is to be searched for a volume with sufficient
space. 
\item[CHFREE]Character variable specifying the {\tt TMS}
pool from which a new volume is allocated in the case
the the pool {\tt CHPOOL} contains no volumes or no volumes
with sufficient space.
\item[CHVSN]Character variable in which the {\tt VSN} of the
allocated volume is returned.
\item[CHVID]Character variable in which the {\tt VID} of the
allocated volume is returned.
\item[IFILE]Integer variable in which the {\tt file sequence number}
on the allocated volume is returned.
\item[CHOPT]
Character variable specifying the options required.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

\Subsection{4cm}{Manipulate {\tt VOLINFO} tag field}
\Shubr{FMVINF}{(CHVID,MB,NFILES,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[CHVID]Character variable specifying the volume for
which the {\tt VOLINFO} tag is to be treated.
\item[MB]Integer variable in which the number of megabytes stored
on the current volume is input or returned depending
on the value of the {\tt CHOPT} argument.
\item[NFILES]Integer variable in which the number of
files on the current volume is input or returned depending
on the value of the {\tt CHOPT} argument.
\item[CHOPT]
Character variable specifying the options required.
\begin{DLtt}{12}
\item[S]Set the {\tt VOLINFO} tag to contain the values
specified in the {\tt MB} and {\tt NFILES} arguments
\item[G]Return in the {\tt MB} and {\tt NFILES} arguments
the current information in the {\tt VOLINFO} tag
\item[I]Increment the information in the {\tt VOLINFO} tag.
The space used is incremented by the value contained in the {\tt MB}
argument, the number of files is incremented by one
 and the {\tt NFILES} argument is ignored.
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

\Subsection{4cm}{Move volumes between TMS pools}
\Shubr{FMPOOL}{(GENAM,LBANK,KEYS,CHPOOL,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
If LBANK is non-zero on input, the information in the 
bank at LBANK will be used.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
If LBANK is zero, KEYS may be used to select a specific
copy of a file.
\item[CHOPT]
Character variable specifying the options required.
\begin{DLtt}{12}
\item[L]write lock
\item[U]unlock (write enable)
\item[P]privileged]transfer even if not owner
\item[D]delete the TMS tag
\item[S]set the TMS tag to the generic name
\item[B]binary tag
\item[T]text  tag (D)
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine allows you to transfer tape volumes between named pools
in the Tape Management System (TMS). In addition, one can set or delete
the TMS text or binary tags associated with the volume.
\par
As an example of its use, one might wish to do the following:
\begin{UL}
\item
Allocate a tape volume from a named pool, e.g. XX\_FREE
\item
Write a DST
\item
If successful, move the volume to XX\_DSTS, write lock it,
and set the TMS text tag to be the FATMEN generic name.
\end{UL}
\par
Conversely, when returning the volume to XX\_FREE, one would
call \Rind{FMPOOL} with options 'UDT' to unlock (write-enable) the
volume and to delete the TMS text tag.
\begin{XMPt}{Example of using the routine \protect\Rind{FMPOOL}}
      CHARACTER*6   VSN,VID
      CHARACTER*255 GENAM
*
*     Create new bank ...
*
      GENAM = '//CERN/DELPHI/DSTS/RUN123'
      CALL FMBOOK(GENAM,KEYS,LBANK,LSUP,JBIAS,IRC)
*
*     Allocate a 3480 from the pool XX_FREE in the library SMCF_1
*
      CALL FMALLO('3480','38K',' ','SMCF_1','XX_FREE',LBANK,' ',
     +VSN,VID,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMALLO'
*
* ... write the data ...
*
* ...
*
*     Now move the volume to XX_DSTS, write lock and set the TMS text
*     tag to the generic name
*
      CALL FMPOOL(GENAM,LBANK,KEYS,'XX_DSTS','LST',IRC)
\end{XMPt}
\Subsection{4cm}{Obtain volume characteristics}
\Shubr{FMQVOL}{(GENAM,LBANK,KEYS,LIB*,MODEL*,DENS*,MNTTYP*,LABTYP*,IRC*)}
\index{TMS}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
\item[LIB]
Character variable to return the name of the library in which
the specified volume resides.
\item[MODEL]
Character variable to return the generic device type (e.g. CART,
TAPE, SMCF) associated with VID, or the physical device type (e.g. 3480).
\item[MNTTYP]
Character variable to indicate whether VID will be robotically
or manually mounted. MNTTYP returns 'R' or 'M' respectively.
\item[LABTYP]
Character variable to return the label type of the volume VID,
e.g. SL, NL, BLP.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine interfaces to the local Tape Management System
and returns information on a given volume. 
Interfaces currently exist to the HEPVM TMS and VMTAPE.
\par
If FATMEN has been
installed without the TMS option, then default values
will be returned. See the description of the \Rind{FMEDIA} routine
for information on setting these default values.
To allow this default information to be overridden on a volume
by volume basis, \Rind{FMQVOL} calls a user exit \Rind{FMUVOL} which has
exactly the same calling sequence. A dummy \Rind{FMUVOL} routine
exists in PACKLIB.
\begin{XMPt}{Example of using the routine \protect\Rind{FMQVOL}}
      CHARACTER*6  VID
* Definitions from FATMEN sequence TMSDEF
      CHARACTER*6  DENS
      CHARACTER*8  LIB
      CHARACTER*4  LABTYP
      CHARACTER*1  MNTTYP
      CHARACTER*8  MODEL
      CHARACTER*7  ROBMAN(2)
      DATA         ROBMAN(1)/'-Robot '/,ROBMAN(2)/'-Manual'/
*
*     Obtain characteristics of volume corresponding to generic
*     name   GENAM
*
      CALL FMQVOL(GENAM,LBANK,KEYS,LIB,MODEL,DENS,MNTTYP,LABTYP,IRC)
      IF(IRC.EQ.100) PRINT *,'Volume unknown to TMS'
            IF(IC.EQ.0) THEN
              ITYPE = 1
              IF(MNTTYP.EQ.'M') ITYPE = 2
              PRINT *,'Library = ',LIB,' model = ',MODEL//ROBMAN(ITYPE)
     +               ,' density = ',DENS,' label type = ',LABTYP
              ENDIF
\end{XMPt}
\begin{XMPt}{Example of a user coded \protect\Rind{FMUVOL} routine}
      SUBROUTINE FMUVOL(GENAM,LBANK,KEYS,LIB,MODEL,DENS,MNTTYP,LABTYP,IRC)
      CHARACTER*255 GENAM
      PARAMETER     (LKEYFA=10)
      DIMENSION     KEYS(LKEYFA)
      CHARACTER*6 VID
+CDE,FATTYP.
+CDE,TMSDEF.
      CALL FMGETC(LBANK,VID,MVIDFA,6,IRC)
*
*     Return codes (HEPVM TMS convention)
*                   0   ok
*                   8   Syntax error
*                   12  Access denied
*                   100 Volume does not exist
*                   312 Volume unavailable
*
*     The following test is CERN specific!!!
*
      IF((VID(1:1).EQ.'I').AND.(ICNUM(VID,2,6).EQ.7)) THEN
         LIB = 'SMCF_1'
         MODEL = 'SMCF'
         MNTTYP= 'R'
      ENDIF

      END
\end{XMPt}
\Subsection{4cm}{Obtain media information}
\Shubr{FMQMED}{(GENAM,*LBANK*,*KEYS*,IMEDIA*,IROBOT*,IRC*)}
\index{Robot}
\index{Manual}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
If LBANK is non-zero on input, the information in the 
bank at LBANK will be used.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
If LBANK is zero, KEYS may be used to select a specific
copy of a file.
\item[IMEDIA]
Integer variable to return the media type of the file
corresponding
to the generic name GENAM.
\item[IROBOT]
Integer variable to indicate, for tape files only,
whether the volume corresponding to the specified
generic name is mounted robotically or not.
\begin{DLtt}{12}
\item[0]The volume is not mounted robotically
\item[1]The volume is mounted robotically
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\begin{XMPt}{Example of using the routine \protect\Rind{FMQMED}}
      PARAMETER (LURCOR=200000)                                         
      COMMON/CRZT/IXSTOR,IXDIV,IFENCE(2),LEV,LEVIN,BLVECT(LURCOR)       
      DIMENSION    LQ(999),IQ(999),Q(999)                               
      EQUIVALENCE (IQ(1),Q(1),LQ(9)),(LQ(1),LEV)                        
*                                                                       
      COMMON /USRLNK/LUSRK1,LUSRBK,LUSRLS                               
*                                                                       
      COMMON /QUEST/IQUEST(100)                                         
*                                                                       
* Start of FATMEN sequence FATPARA                                      
*                                                                       
** ***     Data set bank mnemonics                                      
*                                                                       
*          Keys                                                         
      PARAMETER ( MKSRFA= 1, MKFNFA= 2, MKCLFA=7, MKMTFA=8              
     1           ,MKLCFA= 9, MKNBFA=10, NKDSFA=10 )                     
*                                                                       
** ***     Bank offsets                                                 
*                                                                       
      PARAMETER ( MFQNFA=  1, MHSNFA= 65, MCPLFA= 67, MMTPFA= 68        
     1           ,MLOCFA= 69, MHSTFA= 70, MHOSFA= 74                    
     2           ,MVSNFA= 77, MVIDFA= 79, MVIPFA= 81, MDENFA= 82        
     3           ,MVSQFA= 83, MFSQFA= 84, MSRDFA= 85, MERDFA= 86        
     4           ,MSBLFA= 87, MEBLFA= 88, MRFMFA= 89, MRLNFA= 90        
     5           ,MBLNFA= 91, MFLFFA= 92, MFUTFA= 93, MCRTFA= 94        
     6           ,MCTTFA= 95, MLATFA= 96, MCURFA= 97, MCIDFA= 99        
     7           ,MCNIFA=101, MCJIFA=103, MFPRFA=105, MSYWFA=106        
     8           ,MUSWFA=116, MUCMFA=126, NWDSFA=145                    
     9           ,MFSZFA=MSYWFA,MUSCFA=MSYWFA+1)                        
                                                                        
* End of FATMEN sequence FATPARA                                        
      CHARACTER*6  DENS                                                 
      CHARACTER*8  LIB                                                  
      CHARACTER*4  LABTYP                                               
      CHARACTER*1  MNTTYP                                               
      CHARACTER*8  MODEL                                                
      CHARACTER*7  ROBMAN(2)                                            
      DATA         ROBMAN(1)/'-Robot '/,ROBMAN(2)/'-Manual'/            
      PARAMETER (LKEYFA=10)                                             
      PARAMETER (MAXFIL=3000)                                           
      DIMENSION KEYS(LKEYFA,MAXFIL)                                     
      CHARACTER*255 FILES(MAXFIL)                                       
      CHARACTER*8   THRONG                                              
      CHARACTER*255 TOPDIR                                              
      CHARACTER*26  CHOPT                                               
      CHARACTER*8   DSN                                                 
*                                                                       
*                                                                       
*     Initialise ZEBRA                                                  
*                                                                       
      CALL MZEBRA(-3)                                                   
      CALL MZSTOR(IXSTOR,'/CRZT/','Q',IFENCE,LEV,BLVECT(1),BLVECT(1),   
     +            BLVECT(5000),BLVECT(LURCOR))                          
      CALL MZLOGL(IXSTOR,-3)                                            
*                                                                       
* *** Define user division and link area like:                          
*                                                                       
      CALL MZDIV  (IXSTOR, IXDIV, 'USERS', 50000, LURCOR, 'L')          
      CALL MZLINK (IXSTOR, '/USRLNK/', LUSRK1, LUSRLS, LUSRK1)          
*                                                                       
*     Units for FATMEN RZ/FZ files                                      
*                                                                       
      LUNRZ = 1                                                         
      LUNFZ = 2                                                         
*                                                                       
*     Initialise FATMEN                                                 
*                                                                       
      CALL FMINIT(IXSTOR,LUNRZ,LUNFZ,'//CERN/delphi',IRC)               
      CALL FMLOGL(1)                                                    
*                                                                       
*     Get list of file names                                            
*                                                                       
      JCONT = 0                                                         
1     CONTINUE                                                          
      CALL FMLFIL('//CERN/DELPHI/P01_*/RAWD/NONE/Y90V00/E*/L*/*',       
     +FILES,KEYS,NFOUND,MAXFIL,JCONT,IRC)                               
      IF(IRC.EQ.-1) THEN                                                
        JCONT = 1                                                       
      ELSE                                                              
        JCONT = 0                                                       
      ENDIF                                                             
                                                                        
      PRINT *,NFOUND,' files found'                                     
                                                                        
      DO 10 I=1,NFOUND                                            
      LENF = LENOCC(FILES(I))                                           
      PRINT *,'Processing ',FILES(I)(1:LENF)                            
      LBANK = 0                                                         
      CALL FMQMED(FILES(I)(1:LENF),LBANK,KEYS(1,I),IMEDIA,IROBOT,IRC)   
*
*     Remove this entry if it corresponds to a tape in a (the) robot
*
      IF(IROBOT.NE.1) GOTO 10                                           
      CALL FMSHOW(FILES(I)(1:LENF),LBANK,KEYS(1,I),'MG',IRC)            
      GOTO 10                                                     
*
*     Write enable the freed volume
*
      CALL FMULOK(FILES(I)(1:LENF),LBANK,KEYS(1,I),' ',IRC)             
      IF(IRC.NE.0) THEN                                                 
         PRINT *,'Return code ',IRC,' from FMULOK for ',                
     +   FILES(I)(1:LENF)                                               
         GOTO 10                                                        
      ENDIF                                                             
*
*     and return it to the pool XX_DSTS
*
      CALL FMPOOL(FILES(I)(1:LENF),LBANK,KEYS(1,I),                     
     +            'XX_RAWD',' ',IRC)                                    
      IF(IRC.NE.0) THEN                                                 
         PRINT *,'Return code ',IRC,' from FMPOOL for ',                
     +   FILES(I)(1:LENF)                                               
         GOTO 10                                                        
      ENDIF                                                             
      CALL FMRM(FILES(I)(1:LENF),LBANK,KEYS(1,I),IRC)                   
      IF(IRC.NE.0) THEN                                                 
         PRINT *,'Return code ',IRC,' from FMRM for ',                  
     +   FILES(I)(1:LENF)                                               
         GOTO 10                                                        
      ENDIF                                                             
10    CONTINUE                                                          
      IF(JCONT.NE.0) GOTO 1                                             
*                                                                       
*     Terminate cleanly                                                 
*                                                                       
      CALL FMEND(IRC)                                                   
                                                                        
      END                                                               
\end{XMPt}

\section{Software write lock a volume}
\Shubr{FMLOCK}{(GENAM,*LBANK*,*KEYS*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
If LBANK is non-zero on input, the information in the 
bank at LBANK will be used.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
If LBANK is zero, KEYS may be used to select a specific
copy of a file.
\item[CHOPT]
\item[IRC]
\end{DLtt}

This routine software write locks a volume by issuing a
{\tt TMS LOCK DISABLE WRITE VID} command.

\section{Software write enable a volume}
\Shubr{FMULOK}{(GENAM,*LBANK*,*KEYS*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
If LBANK is non-zero on input, the information in the 
bank at LBANK will be used.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
If LBANK is zero, KEYS may be used to select a specific
copy of a file.
\item[CHOPT]
\item[IRC]
\end{DLtt}

This routine software write enables a volume by issuing a
{\tt TMS LOCK ENABLE WRITE VID} command.

\section{Issue SYSREQ command}
\Shubr{FMSREQ}{(SERVICE,COMMAND,IRC*,REPLY*,*REPLEN*)}
\begin{DLtt}{1234567}
\item[SERVICE]Character variable giving the name of the service
for which the command is intended. At CERN, the only valid service
is {\tt TMS}.
\item[COMMAND]Character variable containing the command that is
to be issued.
\item[IRC]Integer variable in which the return code is returned.
The return code maybe from {\tt SYSREQ} itself, or from the
service. 
\begin{DLtt}{12}
\item[0]Success
\item[2]Reply buffer too short. REPLY(REPLEN) contains the
command that should be issued to receive the next
batch of replies.
\end{DLtt}
\item[REPLY]Character array of length {\tt REPLEN} in which
the reply, if any, is returned. 
\item[REPLEN]Integer variable containing the length of the
arrary {\tt REPLY}. On output, it contains the number of
elements that contain useful data (which may be zero).
\end{DLtt}

This routine issues a {\tt SYSREQ} command. It differs from
the routine \Rind{SYSREQ} described in the {\tt CSPACK}~\cite{bib-CSPACK}
manual in that it performs retry in case of network problems.

\section{Set default media information}
\Shubr{FMEDIA}{(MFMMED,MFMTYP,MFMGEN,MFMSIZ,MFMDEN,MFMMNT,MFMLAB,NMEDIA,IRC*)}
\begin{DLtt}{1234567}
\item[MFMMED]
Integer array of length NMEDIA giving the FATMEN media type
(integer code).
\item[MFMTYP]
Character array of length NMEDIA specifying the physical device
type.
\item[MFMGEN]
Character array of length NMEDIA specifying the generic device
type.
\item[MFMSIZ]
Character array of length NMEDIA specifying the capacity in
Megabytes of this medium.
\item[MFMDEN]
Character array of length NMEDIA specifying the density
of this medium.
\item[MFMMNT]
Character array of length NMEDIA specifying the default
mount type (M=manual, R=robotic)
of this medium.
\item[MFMLAB]
Character array of length NMEDIA specifying the default
label type (SL=IBM labels, AL=ansi labels, NL=no labels)
\item[NMEDIA]
Integer variable specifying the length of the preceeding
arrays.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine can be used to set the characteristics
of the various types of medium. It is automatically
called at {\tt FATMEN} initialisation time by the
routine \Rind{FMINIT}. New media may be added at
runtime using the routine \Rind{FMAMED}.

\newpage
\begin{XMPt}{Example using the \protect\Rind{FMEDIA} routine}
*KEEP,FATMED. Default media attributes
      PARAMETER     (NMEDIA=4)
*
*     FATMEN media type
*
      DIMENSION     MFMMED(NMEDIA)
*
*     Generic device type
*
      CHARACTER*8   MFMGEN(NMEDIA)
*
*     Physical device type
*
      CHARACTER*8   MFMTYP(NMEDIA)
*
*     Default density
*
      CHARACTER*8   MFMDEN(NMEDIA)
*
*     Media size in Megabytes
*
      CHARACTER*8   MFMSIZ(NMEDIA)
*
*     Default mount type
*
      CHARACTER*1   MFMMNT(NMEDIA)
*
*     Default label type
*
      CHARACTER*2   MFMLAB(NMEDIA)

      DATA          MFMGEN(1)/'DISK'/,MFMGEN(2)/'3480'/,
     +              MFMGEN(3)/'3420'/,MFMGEN(4)/'8MM '/

      DATA          MFMTYP(1)/'DISK'/,MFMTYP(2)/'CT1 '/,
     +              MFMTYP(3)/'TAPE'/,MFMTYP(4)/'8200'/

      DATA          MFMDEN(2)/'38K '/,MFMDEN(3)/'6250'/,
     +              MFMDEN(4)/'43200'/

      DATA          MFMSIZ(1)/'0'/,   MFMSIZ(2)/'200'/,
     +              MFMSIZ(3)/'200'/, MFMSIZ(4)/'2300'/

      DATA          MFMMNT(1)/'M'/,   MFMMNT(2)/'M'/,
     +              MFMMNT(3)/'M'/,   MFMMNT(4)/'M'/

      DATA          MFMLAB(1)/'  '/,  MFMLAB(2)/'SL'/,
     +              MFMLAB(3)/'SL'/,  MFMLAB(4)/'SL'/
*KEND
*
*     Set default media attributes
*
      DO 55 I=1,NMEDIA
      MFMMED(I) = I
   55 CONTINUE
*
*     For each media type (1,2,3,...) set
*         physical device type (disk, 3480, 3420,...)
*         generic  device type (disk, ct1,  tape,...)
*         capacity (MB)        (?, 200, 150,...)
*         density              (?, 38K, 6250,...)
*         mount type           (manual/robotic)
*         label type           (SL/NL/AL)
*
+SELF,IF=APOL3,LEPICS.
*
*     Still using old generic device names...
*
      MFMGEN(2) = 'CART'
+SELF,IF=VMTAPE.
*
*     Generic names for VMTAPE...
*
      MFMGEN(2) = '18TR'
      MFMGEN(3) = '9TR '
+SELF.
      CALL FMEDIA(MFMMED,MFMTYP,MFMGEN,MFMSIZ,MFMDEN,
     +            MFMMNT,MFMLAB,NMEDIA,IRC)
\end{XMPt}
\section{Add additional media definitions}
\Shubr{FMAMED}{(MFMMED,MFMTYP,MFMGEN,MFMSIZ,MFMDEN,MFMMNT,MFMLAB,NMEDIA,IRC*)}
\begin{DLtt}{1234567}
\item[MFMMED]
Integer array of length NMEDIA giving the FATMEN media type
(integer code).
\item[MFMTYP]
Character array of length NMEDIA specifying the physical device
type.
\item[MFMGEN]
Character array of length NMEDIA specifying the generic device
type.
\item[MFMSIZ]
Character array of length NMEDIA specifying the capacity in
Megabytes of this medium.
\item[MFMDEN]
Character array of length NMEDIA specifying the density
of this medium.
\item[MFMMNT]
Character array of length NMEDIA specifying the default
mount type (M=manual, R=robotic)
of this medium.
\item[MFMLAB]
Character array of length NMEDIA specifying the default
label type (SL=IBM labels, AL=ansi labels, NL=no labels)
\item[NMEDIA]
Integer variable specifying the length of the preceeding
arrays.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine can be used to define additional media types.
 
\Subsection{4cm}{Get, Set or Delete TMS Tags}
\Shubr{FMTAGS}{(GENAM,*LBANK*,*KEYS*,*CHTAG*,CHOPT,IRC*)}
\index{Tags}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to return the address of the bank corresponding
to the generic name GENAM.
If LBANK is non-zero on input, the information in the 
bank at LBANK will be used.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
If LBANK is zero, KEYS may be used to select a specific
copy of a file.
\item[CHTAG]
Character variable of length 255 in which the tag associated with
the specified generic name is returned (option G), or which
contains the tag to be set (option S). This argument is ignored
in the case of option D.
\item[CHOPT]
Character variable to specify the type of operation required.
\begin{DLtt}{12}
\item[D]delete the tag
\item[G]get and display the tag
\item[S]set the tag
\item[B]to select the BINARY  tag (stored as CHARACTER*255)
\item[T]to select the TEXT    tag (default)
\item[V]to select the VOLINFO tag 
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine allows the TMS text or binary tag fields associated
with a tape volume that corresponds to a specified generic name
to be deleted, set or obtained. 
\begin{XMPt}{Example of using the \protect\Rind{FMTAGS} routine}
*
*     Set tag
*
      GENAM = '//CERN/CNDIV/JAMIE/OUT'
      LG    = LENOCC(GENAM)
      CHTAGS = 'Archive tape for FATMEN source'
      CALL FMTAGS(GENAM(1:LG),LBANK,KEYS,CHTAGS,'S',IRC)
*
*     Get and print tag
*
      CALL FMTAGS(GENAM(1:LG),LBANK,KEYS,CHTAGS,'G',IRC)
      PRINT *,IRC,CHTAGS(1:LENOCC(CHTAGS))
*
*     Delete binary tag
*
      CALL FMTAGS(GENAM(1:LG),LBANK,KEYS,CHTAGS,'DB',IRC)
\end{XMPt}
\Filename{H2Fatmenuserguide-tailor-selection-routines}
\Section{4cm}{Routines to tailor FATMEN selection}
\par
By default, FATMEN makes no check on location code or copy
level when accessing a dataset or listing a catalogue entry.
When attempting to access a dataset, FATMEN searches
for a copy first on disk, then 3480 cartridge, and so on.
The following routines may be used to modify the selection
procedure.
\par
If a call to \Rind{FMSETL} or \Rind{FMSETC} is made, only entries with
a location code or copy level that match one of those
specified will be accessible (unless the key serial number
is given explicitly) or visible via a call to \Rind{FMLS}.
Routine \Rind{FMSETM} permits not only the range of medium
types to be set but also the order.
For example, a call to \Rind{FMSETM} with the following values
will limit the selection to medium types 3, 5, 1 and 2,
in that order.
\begin{XMP}
      NMTP = 4
      MTP(1) = 3
      MTP(2) = 5
      MTP(3) = 1
      MTP(4) = 2
\end{XMP}
\par
Alternatively, routine \Rind{FMSETK} can be used. This allows the
user to declare a keys matrix and character option which will
be used in all future file selections. That is, it overrides
both the FATMEN default selection and that set by the routines
\Rind{FMSETC}, \Rind{FMSETL} and \Rind{FMSETM}.
\par
The difference between these three approaches is explained below.
With the default FATMEN selection, no check is made on copy level
or location code. FATMEN takes in turn media types 1 to 4 and
looks for an accessible dataset. The first one found is taken,
with the proviso that robotically mounted tapes are given preference
over manually mounted tapes.
\par
The \Rind{FMSETC}, \Rind{FMSETL} and \Rind{FMSETM} routines allow the user to specify
allowed values for the copy level and location code, and the
order in which the different media types are to be processed.
This allows media types that are not in the default selection
to be processed, and the order to be changed. 
However, the user is unable to indicate that, for example,
a location code or 31 is preferable to one of 21, within
a given media type.
\par
The \Rind{FMSETK} routine provides the user with more control.
One might wish to set the order to be native mode copy
on disk, native mode copy on 3480 robotically mounted
cartridge, exchange mode copy on disk, exchange mode
copy on 3480 cartridge. 
\Subsection{4cm}{Declare location codes to FATMEN}
\Shubr{FMSETL}{(LOC,NLOC,IRC*)}
\index{Location code}
\begin{DLtt}{1234567}
\item[LOC]
Array of length NLOC containing a list of location codes
to be used in FATMEN selection of an entry.
\item [NLOC]
The number of location codes declared, maximum 99
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\Subsection{4cm}{Load location code definitions from a file}
\Shubr{FMLCOD}{(LUNLOC,CHFILE,CHOPT,IRC*)}
\index{Location code}
\index{Location code definitions}
\begin{DLtt}{1234567}
\item[LUN]Integer variable or constant specifying the Fortran
logical unit which should be used to read the file {\tt CHFILE}
\item[CHFILE]Character variable specifying the file containing
the location code definitions
\item[CHOPT]Character variable specifying the required options
\item[IRC]Integer variable in which the return code is passed
\end{DLtt}
This routine loads the location code definitions from the specified
file. By default, {\tt FATMEN} will load a file {\tt FATMEN.LOCCODES}
from the server directory at initialisation time. 

\begin{XMPt}{Example of a location code definition file}
         1=Cern Vault  :   For CERNVM Shift Cray VXCERN etc                                                                         
         2=Cern Vault  :                                                                                                            
         9=Cern Vault  :   Hidden or Obsolete data                                                                                  
        11=VXOPON      :   OPAL Online Vax cluster                                                                                  
        12=Online      :   OPAL (apollo) online facilities                                                                          
        21=VXOPOF      :   OPAL Offline cluster                                                                                     
        31=SHIFT       :   SHIFT disk and archive storage                                                                           
     16040=U-Vic       :   'obsolete' cartridges                                                                                    
     16041=U-Vic       :   Active data accessible at U-Vic.                                                                         
     49201=Bonn        :   Data accessible at Bonn                                                                                  
     49202=Bonn        :   Data in Transit                                                                                          
     49203=Bonn        :   Data in CERN Vault                                                                                       
     49401=DESY        :   Data accessible at DESY/Hamburg                                                                          
     49402=DESY        :   Data in Transit                                                                                          
     49403=DESY        :   Data in CERN Vault                                                                                       
     49601=Heidelburg  :   Data accessible at Heidelburg                                                                            
     49602=Heidelburg  :   Data in Transit                                                                                          
     49603=Heidelburg  :   Data in CERN Vault                                                                                       
     49701=Freiburg    :   Data accessible at Freiburg                                                                              
     49702=Freiburg    :   Data in Transit                                                                                          
     49703=Freiburg    :   Data in CERN Vault                                                                                       
     16042=U-Vic       :   Data in transit                                                                                          
     16043=U-Vic       :   Data at CERN in PC-VAULT                                                                                 
     16049=U-Vic       :   Hidden or obsolete data                                                                                  
     33101=Saclay      :   Active cartridges                                                                                        
     33901=Saclay      :   'obsolete' cartridges                                                                                    
     44501=UKACRL      :   Active data accessible at RAL                                                                            
     44502=UKACRL      :   Data in transit                                                                                          
     44503=UKACRL      :   Data at CERN in PC-VAULT                                                                                 
     44509=UKACRL      :   Hidden or obsolete data                                                                                  
     44901=UKACRL      :   Inaccessible / archived data                                                                             
     97281=Weizmann    :   Active cartridges                                                                                        
     97282=Weizmann    :   Data in transit                                                                                          
     97283=Weizmann    :   Data at CERN in PC-VAULT                                                                                 
     97289=Weizmann    :   Hidden or obsolete data                                                                                  
\end{XMPt}
\Subsection{4cm}{Obtain location code corresponding to a node}
\Shubr{FMNTOL}{(CHNODE,LOCCOD*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[CHNODE]
Character variable specifying the name of the node for which
the corresponding location code should be return
\item[LOCCOD]
Integer variable in which the location code corresponding to
CHNODE is returned.
\item[CHOPT]
Character variable specifying the options required.
\begin{DLtt}{12}
\item[ ](default) - perform case insensitive match
\item[C]respect case
\end{DLtt}
\item[IRC]
Integer variable in which the return code is returned.
\begin{DLtt}{12}
\item[0]Success
\item[1]File containing location codes and node names not found
\item[2]File containing location codes could not be opened
\item[3]No location code found for CHNODE
\end{DLtt}
\end{DLtt}

\Subsection{4cm}{Obtain list of node names corresponding to a location}
\Shubr{FMLTON}{(LOCCOD,MAXNOD,CHNODE*,NNODES*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[LOCCOD]
Integer variable containing the location code for which
the corresponding node names should be returned.
\item[MAXNOD]
Integer constant specifying the maximum number of node names
that the calling procedure can accept
\item[CHNODE]
Character array in which the node names corresponding to LOCCOD
are returned.
\item[NNODES]
Integer variable in which the number of nodes corresponding to LOCCOD
are returned.
\item[NNODES]
Integer variable in which the number of nodes corresponding to LOCCOD
is returned. Only MIN(MAXNOD,NNODES) elements of CHNODE contain
useful data.
\item[IRC]
Integer return code
\end{DLtt}

\Subsection{4cm}{Declare media types to FATMEN}
\Shubr{FMSETM}{(MTP,NMTP,IRC*)}
\index{Media type}
\begin{DLtt}{1234567}
\item[MTP]
Array of length NMTP containing a list of media types
to be used in FATMEN selection of an entry.
\item[NMTP]
The number of media types declared, maximum 99
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\Subsection{4cm}{Declare copy levels to FATMEN}
\Shubr{FMSETC}{(CPL,NCPL,IRC*)}
\index{Copy level}
\begin{DLtt}{1234567}
\item[CPL]
Array of length NCPL containing a list of copy levels
to be used in FATMEN selection of an entry.
\item[NCPL]
The number of copy levels declared, maximum 99
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\Subsection{4cm}{Declare selection matrix and options to FATMEN}
\Shubr{FMSETK}{(KEYM,NK,CHOPT,IRC*)}
\index{Key selection}
\index{Key matrix}
\begin{DLtt}{1234567}
\item[KEYM]
Matrix of size (LKEYFA,NK) containing an ordered
list of key vectors 
to be used in FATMEN selection of an entry.
\item[NK]
The number of copy levels declared, maximum 99
\item[CHOPT]
The options to be used when selecting a dataset,
as defined by the routine \Rind{FMSELM}.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

See the description of the \Rind{FMSELM} routine for more information
on how the key matrix is used in dataset selection.

\Filename{H2Fatmenuserguide-utility-routines}
\Section{10cm}{Utility routines}

\Subsection{4cm}{Search in names file}
\Shubr{FMNICK}{(LUN,CHFILE,CHNICK,CHNAME,CHDESC,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[LUN]
Integer variable or constant giving the Fortran unit on which
the names file should be read.
\item[CHFILE]
Character variable specifying the name of the names file.
If blank, a default names file will be used. The default
names file for a FATMEN group {\tt XYZ} is {\tt FMXYZ.NAMES}
in the directory pointed to by the shell variable {\tt FMXYZ}.
\item[CHNICK]
Character variable specifying the value of the {\tt :nick} tag
to be searched for in the names file
\item[CHNAME]
Character variable in which the value of the {\tt :GNAME} tag
corresponding to the above nick name is returned.
\item[CHDESC]
Character variable in which the value of the {\tt :DESC} tag
corresponding to the above nick name is returned.
\item[CHOPT]
Character variable, currently ignored.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}

This routine searches in the specified or default names file
for the generic name and description that matches the specified
nick name. If the nick name contains a slash, then the characters
after the slash are treated as a range and appended to the 
value of the {\tt :GNAME} tag. Only characters upto the character
before the slash are used to find the names file entry.

A range may be given in the standard FATMEN form {\tt (mm:nn)}
or as {\tt mm-nn}.

\begin{XMPt}{An example of using the FMNICK routine}
      character*80 chname,chdesc

      call fmnick(1,'fmdelphi.names','RAWD91',chname,chdesc,' ',irc)

      print *,chname(1:lenocc(chname))
      print *,chdesc(1:lenocc(chdesc))

      call fmnick(1,'fmdelphi.names','LEPT92/(10:20)',
     +            chname,chdesc,' ',irc)

      print *,chname(1:lenocc(chname))
      print *,chdesc(1:lenocc(chdesc))

      call fmnick(1,'fmdelphi.names','RAWD91/17-77',
     +            chname,chdesc,' ',irc)

      print *,chname(1:lenocc(chname))
      print *,chdesc(1:lenocc(chdesc))

      end
\end{XMPt}

\begin{XMPt}{The names file used in the above example}
:NICK.RAWD92                                                            
:GNAME.P01_ALLD/RAWD/NONE/Y92V00/*/R:DESC.RAW data of ALL events; 1992 data
*---------------------------------------------------*                   
:NICK.RAWD91                                                            
:GNAME.P01_ALLD/RAWD/NONE/Y91V00/*/R                                    
:DESC.RAW data of ALL events; 1991 data                                 
*---------------------------------------------------*                   
:NICK.RAWD90                                                            
:GNAME.P01_ALLD/RAWD/NONE/Y90V00/*/R                                    
:DESC.RAW data of ALL events; 1990 data                                 
*---------------------------------------------------*                   
:NICK.RAWD                                                              
:GNAME.P01_ALLD/RAWD/NONE/Y*/*/R                                        
:DESC.RAW data of ALL events.                                           
*---------------------------------------------------*                   
:NICK.LEPT92                                                            
:GNAME.P01_ALLD/DSTO/LEPT/Y92V>/*/R                                     
:DESC.DST data of the LEPTONIC events; 1992 data, last proc.            
*---------------------------------------------------*                   
:NICK.LEPT91                                                            
:GNAME.P01_ALLD/MDST/LEPT/Y91V>/*/R                                     
:DESC.RTD data of the LEPTONIC events; 1991 data, last proc.            
*---------------------------------------------------*                   
:NICK.LEPT91_D                                                          
:GNAME.P01_ALLD/MDST/LEPT/Y91V05/*/R                                    
:DESC.RTD data of the LEPTONIC events; 1991 data, 5th proc. (DELANA_D)  
:NICK.LEPT90                                                            
*---------------------------------------------------*                   
:GNAME.P01_ALLD/MDST/LEPT/Y90V>/*/R                                     
:DESC.RTD data of the LEPTONIC events; 1990 data, last proc .           
*---------------------------------------------------*                   
:NICK.LEPT                                                              
:GNAME.P01_ALLD/MDST/LEPT/Y[90:99]V>/*/R                                
:DESC.RTD data of the LEPTONIC events; last available processings.      
*---------------------------------------------------*                   
:NICK.DSTLEP92                                                          
:GNAME.P01_ALLD/DSTO/LEPT/Y92V>/*/R                                     
:DESC.DST-only data of the LEPTONIC events; 1992 data, last proc .      
*---------------------------------------------------*                   
:NICK.DSTLEP91                                                          
:GNAME.P01_ALLD/DSTO/LEPT/Y91V>/*/R                                     
:DESC.DST-only data of the LEPTONIC events; 1991 data, last proc .      
*---------------------------------------------------*                   
:NICK.DSTLEP90                                                          
:GNAME.P01_ALLD/DSTO/LEPT/Y90V>/*/R                                     
:DESC.DST-only data of the LEPTONIC events; 1990 data, last proc .      
*---------------------------------------------------*                   
:NICK.DSTLEP                                                            
:GNAME.P01_ALLD/DSTO/LEPT/Y[90:99]V>/*/R                                
:DESC.DST-only data of the LEPTONIC events; last available processings. 
*---------------------------------------------------*                   
:NICK.S2PR92                                                            
:GNAME.P01_ALLD/MDST/S2PR/Y92V>/*/R                                     
:DESC.RTD data of 2-PRONG events for calib./align.; 1992 data, last proc
*---------------------------------------------------*                   
:NICK.S2PR91                                                            
:GNAME.P01_ALLD/MDST/S2PR/Y91V>/*/R                                     
:DESC.RTD data of 2-PRONG events for calib./align.; 1991 data, last proc
*---------------------------------------------------*                   
:NICK.S2PR                                                              
:GNAME.P01_ALLD/MDST/S2PR/Y[90:99]V>/*/R                                
:DESC.RTD data of 2-PRONG events selected for calibration/alignment.    
*---------------------------------------------------*                   
:NICK.DSTO92                                                            
:GNAME.P01_ALLD/DSTO/PHYS/Y92V>/*/R                                     
:DESC.DST-only of the "OR" of the physics teams, 1992 data, last proc.  
*---------------------------------------------------*                   
:NICK.DSTO91                                                            
:GNAME.P01_ALLD/DSTO/PHYS/Y91V>/*/R                                     
:DESC.DST-only of the "OR" of the physics teams, 1991 data, last proc.  
*---------------------------------------------------*                   
:NICK.DSTO91_D                                                          
:GNAME.P01_ALLD/DSTO/PHYS/Y91V05/*/R                                    
:DESC.DST-only, "OR" of the physics teams, 91 data, 5th proc.(DELANA_D) 
*---------------------------------------------------*                   
:NICK.DSTO90                                                            
:GNAME.P01_ALLD/DSTO/PHYS/Y90V>/*/R                                     
:DESC.DST-only of the "OR" of the physics teams; 1990 data, last proc.  
*---------------------------------------------------*                   
:NICK.DSTO                                                              
:GNAME.P01_ALLD/DSTO/PHYS/Y[90:99]V>/*/R                                
:DESC.DST-only of the "OR" of the physics teams; all available procs.   
*---------------------------------------------------*                   
:NICK.PHYS90                                                            
:GNAME.P01_ALLD/MDST/PHYS/Y90V>/*/R                                     
:DESC.RTD data of the "OR" of the physics teams; 1990 data, last proc . 
*---------------------------------------------------*                   
:NICK.CRAW                                                              
:GNAME.P01_ALLD/CRAW/PHYS/Y*V>/*/R                                      
:DESC.Raw data of events tagged by Delana; last proc .                  
*---------------------------------------------------*                   
:NICK.CRAW91                                                            
:GNAME.P01_ALLD/CRAW/PHYS/Y91V>/*/R                                     
:DESC.Raw data of events tagged by Delana; 1991 data, last proc .       
*---------------------------------------------------*                   
:NICK.PHYS                                                              
:GNAME.P01_ALLD/MDST/PHYS/Y90V>/*/R                                     
:DESC.RTD data of the "OR" of the physics teams (only exist for 1990)   
*---------------------------------------------------*                   
:NICK.HOTP90                                                            
:GNAME.P01_ALLD/MDST/HOTP/Y90V>/*/R                                     
:DESC.RTD data of the "HOT PHYSICS" events; 1990 data, last proc .      
*---------------------------------------------------*                   
:NICK.HOTP                                                              
:GNAME.P01_ALLD/MDST/HOTP/Y90V>/*/R                                     
:DESC.RTD data of the "HOT PHYSICS" events (only exist for 1990).       
*---------------------------------------------------*                   
:NICK.CRAWHAD90                                                         
:GNAME.P01_ALLD/CRAW/HADR/Y90V>/*/R                                     
:DESC.Raw data of events tagged by TEAM 4; 1990 data,last proc .        
*---------------------------------------------------*                   
:NICK.CRAWHAD                                                           
:GNAME.P01_ALLD/CRAW/HADR/Y90V>/*/R                                     
:DESC.Raw data of events tagged by TEAM 4 (only exist for 1990).        
*---------------------------------------------------*                   
:NICK.CRAWHADR90                                                        
:GNAME.P01_ALLD/CRAW/HADR/Y90V>/*/R                                     
:DESC.Raw data of events tagged by TEAM 4; 1990 data, last proc .       
*---------------------------------------------------*                   
:NICK.CRAWHADR                                                          
:GNAME.P01_ALLD/CRAW/HADR/Y90V>/*/R                                     
:DESC.Raw data of events tagged by TEAM 4 (only exist for 1990).        
*---------------------------------------------------*                   
:NICK.HADR90                                                            
:GNAME.P01_ALLD/CRAW/HADR/Y90V>/*/R                                     
:DESC.Raw data of events tagged by TEAM 4; 1990 data, last proc .       
*---------------------------------------------------*                   
:NICK.HADR                                                              
:GNAME.P01_ALLD/CRAW/HADR/Y90V>/*/R                                     
:DESC.Raw data of events tagged by TEAM 4 (only exist for 1990).        
*---------------------------------------------------*                   
:NICK.REST90                                                            
:GNAME.P01_ALLD/MDST/REST/Y90V>/*/R                                     
:DESC.RD data of events NOT TAGGED by any team; 1990 data, last proc .  
*---------------------------------------------------*                   
:NICK.REST                                                              
:GNAME.P01_ALLD/MDST/REST/Y90V>/*/R                                     
:DESC.RD data of events NOT TAGGED by any team (only exist for 1990).   
*---------------------------------------------------*                   
:NICK.PHDO90                                                            
:GNAME.P01_ALLD/DSTO/PHYS/Y90V>/*/R                                     
:DESC.DST-only of the "OR" of the physics teams; 1990 data, last proc . 
*---------------------------------------------------*                   
:NICK.PHDO                                                              
:GNAME.P01_ALLD/DSTO/PHYS/Y90V>/*/R                                     
:DESC.DST-only of the "OR" of the physics teams; 1990 data, last proc . 
*---------------------------------------------------*                   
:NICK.XDST                                                              
:GNAME.P01_ALLD/XDST/DETD/Y*V>/*/R                                      
:DESC.DST + RAW data of RICH & HPC                                      
*---------------------------------------------------*                   
:NICK.XDST92                                                            
:GNAME.P01_ALLD/XDST/DETD/Y92V>/*/R                                     
:DESC.DST + RAW data of RICH & HPC  (1992)                              
*---------------------------------------------------*                   
:NICK.ALLD92                                                            
:GNAME.P01_ALLD/*/Y92V*/*/R                                             
:DESC.All available Delphi 1992 real data.                              
*---------------------------------------------------*                   
:NICK.ALLD91                                                            
:GNAME.P01_ALLD/*/Y91V*/*/R                                             
:DESC.All available Delphi 1991 real data.                              
*---------------------------------------------------*                   
:NICK.ALLD90                                                            
:GNAME.P01_ALLD/*/Y90V*/*/R                                             
:DESC.All available Delphi 1990 real data.                              
*---------------------------------------------------*                   
:NICK.ALLD                                                              
:GNAME.P01_ALLD/*/*/R                                                   
:DESC.All available Delphi real data.                                   
*---------------------------------------------------*                   
:NICK.*                                                                 
:GNAME.P01_ALLD/*/*/R                                                   
:DESC.All available Delphi real data.                                   
*---------------------------------------------------*                   
*----------   S I M U L A T I O N  -----------------*                   
*---------------------------------------------------*                   
:NICK.BABA91                                                            
:GNAME.P01_SIMD/DSTO/BABA/*JUL91*/*                                     
:DESC.Bhabha events in barrel region, July 91 release (SIM35 ANA41).    
*---------------------------------------------------*                   
:NICK.BAFO91                                                            
:GNAME.P01_SIMD/DSTO/BAFO/*JUL91*/*                                     
:DESC.Bhabha events in barrel+forward region, July 91 SIM35 ANA41.      
*---------------------------------------------------*                   
:NICK.MUMU91                                                            
:GNAME.P01_SIMD/DSTO/MUMU/*JUL91*/*                                     
:DESC.Dimuon events, July 91 release (SIM35 ANA41).                     
*---------------------------------------------------*                   
:NICK.TAU291                                                            
:GNAME.P01_SIMD/DSTO/TAU2/*JUL91*/*                                     
:DESC.Tau tau events, July 91 release (SIM35 ANA41).                    
*---------------------------------------------------*                   
:NICK.QQME91                                                            
:GNAME.P01_SIMD/DSTO/QQME/*JUL91*/*                                     
:DESC.qqbar events Matrix Element, July 91 release (SIM35 ANA41).       
*---------------------------------------------------*                   
:NICK.QQPS91                                                            
:GNAME.P01_SIMD/DSTO/QQPS/*JUL91*/*                                     
:DESC.qqbar events Parton Shower, July 91 release (SIM35 ANA41).        
*---------------------------------------------------*                   
:NICK.QQPN91                                                            
:GNAME.P01_SIMD/DSTO/QQPN/*JUL91*/*                                     
:DESC.qqbar events Parton Shower, no B0 mixing. July 91 release.        
*---------------------------------------------------*                   
\end{XMPt}

\begin{XMPt}{Output of the above program}
 P01_ALLD/RAWD/NONE/Y91V00/*/R
 RAW data of ALL events; 1991 data
 P01_ALLD/DSTO/LEPT/Y92V>/*/R(10:20)*
 DST data of the LEPTONIC events; 1992 data, last proc.
 P01_ALLD/RAWD/NONE/Y91V00/*/R(17:77)*
 RAW data of ALL events; 1991 data
\end{XMPt}

\Subsection{4cm}{Modify user words}
\Shubr{FMMODU}{(PATH,UFORM,UVECT,UCOMM,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[PATH]
Character variable of maximum length 255 to specify the path name of
containing the files for which the user words are to be modified.
The path name may contain wild-cards, as for \Rind{FMLDIR} or \Rind{FMSCAN}.
\item[PATH]
Character variable of length 4 specifying the user file format.
\item[PATH]
Vector of length 10 containing the user words.
\item[PATH]
Character variable of maximum length 80 specifying the user comment.
\item[CHOPT]
Character variable to specify the type of operation required.
\begin{XMP}
CHOPT = C: modify comment field
        F: modify user file format
        V: modify user vector
\end{XMP}
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine may be used to modify any or all of the user fields
associated with all files in the specified path. The path name
may contain wild-cards.
\begin{XMPt}{Example of using the \protect\Rind{FMMODU} routine}
      DIMENSION  IVECT(10)
*
*     Fill IVECT
...
*
*     Now update the user words for all files in the subtree 
*     corresponding to the highest pass
*
      CALL FMMODU('//CERN/OPAL/PROD/PASS>/*',' ',IVECT,' ','V',IRC)
\end{XMPt}
\Subsection{4cm}{Declare logical units to FATMEN}
\Shubr{FMSETU}{(LUN,NLUN,IRC*)}
\index{Logical units}
\begin{DLtt}{1234567}
\item[LUN]
Array of length NLUN containing a list of logical units
that may be used by FATMEN. This list must not include
those declared in the call to \Rind{FMSTRT} or \Rind{FMINIT}.
\item[NLUN]
The number of logical units, maximum 99
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\Subsection{4cm}{Get a free logical unit}
\Shubr{FMGLUN}{(LUN*,IRC*)}
\index{Logical unit}
\begin{DLtt}{1234567}
\item[LUN]
Integer variable in which an unused logical unit is returned.
A list of logical units must have first been declared using
\Rind{FMSETU} (see on Page~\pageref{FMSETU}).
On VAX/VMS systems, if no units have been declared or if the
list has been exhausted, the routine {\tt LIB\$GET\_LUN} is called
to obtain a new unit.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\Subsection{4cm}{Get a free logical unit}
\Shubr{FMFLUN}{(LUN,IRC*)}
\index{Logical unit}
\begin{DLtt}{1234567}
\item[LUN]
Integer variable containing the number of the FORTRAN logical
unit to be freed.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\Subsection{4cm}{Verify bank contents}
\Shubr{FMVERI}{(GENAM,LBANK,KEYS,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to input the address of the bank corresponding
to the generic name specified.
\item[KEYS]
Integer array of length 10 to contain the keys vector associated
with the specified generic name.
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[ ]check entire bank
\item[A]check entire bank, except option Q
\item[C]check comment string
\item[F]check file attributes
\item[K]check keys
\item[L]check logical attributes
\item[M]check media attributes
\item[N]check dataset name on disk/tape of this file
\item[O]check owner, node and job of creator etc.
\item[P]check physical attributes, such as record format etc.
\item[Q]check that volume is known to TMS
\item[S]check security details of this file (protection)
\item[T]check date and time of creation, last access etc.
\end{DLtt}
\item[IRC]
Integer variable specifying the return code.
\end{DLtt}
\par
This routine will check the contents of a FATMEN bank and the associated
keys vector.
\Rind{FMVERI} returns warnings via the
{\bf IQUEST} vector and error conditions
via the return code {\bf IRC}. Errors are generated when
a value for a required field is not specified or if an invalid
value is given.
\begin{XMPt}{Example of using the \protect\Rind{FMVERI} routine}
      CALL FMVERI(GENAM,LBANK,KEYS,'T',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMVERI
\end{XMPt}
\par
The following character options may be specified to cause \Rind{FMVERI}
to check various parts of the FATMEN bank.
See the table below for details of the formats of the various
fields.
\par
Errors and warnings returned via the IQUEST vector are given on the
following page.
\par
{\bf N.B. an error in the fields denoted by the options F,K,L,M,N,O,P
or T will result in a non-zero return code. Banks containing such errors
will not be added to the FATMEN catalogue.}
\begin{DLtt}{123456789012}
\item[IQUEST(3)]{\bf 1 }Comment is blank
\item[]{\bf 2 }Comment contains 'unseen' characters
\item[IQUEST(6)]{\bf 1 }One or more file attributes missing
\item[IQUEST(11)]{\bf 1 }File name in keys does not match generic name
\item[]{\bf 2 }Copy level, Media type or location code missing
\item[]{\bf 3 }Copy level, Media type or location code conflict (keys/bank)
\item[IQUEST(12)]{\bf 1 }Invalid FATMEN format
\item[IQUEST(13)]{\bf 1 }Host or O/S (disk files) or
VSN,VID or FSEQ (tape files) missing
\item[]{\bf 2 }File size greater than maximum for specified media type
\item[IQUEST(14)]{\bf 1 }Dataset name is missing
\item[]{\bf 2 }Dataset name is in invalid format
\item[IQUEST(15)]{\bf 1 }Owner, node or job name missing
\item[IQUEST(16)]{\bf 1 }Physical attributes missing or invalid
\item[IQUEST(19)]{\bf 1 }(Security field - no check at present)
\item[IQUEST(20)]{\bf 1 }Time or date fields are invalid
\item[IQUEST(21)]{\bf 1 }All user words are zero
\item[IQUEST(26)]{\bf IQFOUL }Invalid bank status word. Most likely caused
by an assignment statement containing an undefined variable
or by specifying an invalid bank address.
\end{DLtt}

\Subsection{8cm}{Pack date and time.}
\Shubr{FMPKTM}{(IDATE,ITIME,IPACK*,IRC*)}
\begin{DLtt}{1234567}
\item[IDATE]
Integer variable with date in YYMMDD format.
\item[ITIME]
Integer variable with time in HHMM format.
\item[IPACK*]
Integer variable to store the date and time in packed format.
\item[IRC*]
Integer variable in which the return code is returned.
\end{DLtt}
This routine allows a date and time to be stored in
a 4 byte integer word.
The CERNLIB routine DATIME, entry Z007, can be
used to obtain IDATE and ITIME in the correct format.
Should IDATE, ITIME be in invalid format, a non-zero return
code will be returned and IPACK will be
set to zero.
\Subsection{4cm}{Unpack date and time.}
\Shubr{FMUPTM}{(IDATE*,ITIME*,IPACK,IRC*)}
\index{DBUPTM}
\begin{DLtt}{1234567}
\item[IDATE*]
Integer variable to store the date in YYMMDD format.
\item[ITIME*]
Integer variable to store the time in HHMM format.
\item[IPACK]
Integer variable with date and time in packed format.
\item[IRC*]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine unpacks the date and time from
a 4 byte integer word.
IPACK must be the result of a previous call to \Rind{FMPKTM}.
Should IPACK be in invalid format, a non-zero return
code will be returned and IDATE and ITIME will be
set to zero.
\Subsection{4cm}{Pack date and time for VAX format.}
\Shubr{FMPKVX}{(CHDATE,IDATE*,ITIME*,IPACK*,IRC*)}
\begin{DLtt}{1234567}
\item[CHDATE]
Character variable of length 23 containing the date and time
in VAX format (dd-mon-yyyy hh:mm:ss.ff, e.g. 11-JUL-1991 17:14:41.37)
\item[IDATE*]
Integer variable with date in YYMMDD format.
\item[ITIME*]
Integer variable with time in HHMM format.
\item[IPACK*]
Integer variable to store the date and time in packed format.
\item[IRC*]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routines provides the functionality of the \Rind{FMPKTM} 
except that the input date is expected in VAX format.
\Subsection{4cm}{Unpack date and time for VAX format.}
\Shubr{FMUPVX}{(CHDATE*,IDATE*,ITIME*,IPACK,IRC*)}
\begin{DLtt}{1234567}
\item[CHDATE*]
Character variable of length 23 in which the date and time
are returned 
in VAX format (dd-mon-yyyy hh:mm:ss.ff, e.g. 11-JUL-1991 17:14:41.37)
\item[IDATE*]
Integer variable to store the date in YYMMDD format.
\item[ITIME*]
Integer variable to store the time in HHMM format.
\item[IPACK]
Integer variable with date and time in packed format.
\item[IRC*]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routines provides the functionality of 
\Rind{FMUPTM} for VAX date and time formats.
\Filename{H2Fatmenuserguide-obsolete-routines}
\Section{4cm}{Obsolete routines}
The following routines remain for backward compatibility only.
New code should use the suggested replacement, which is
normally both more powerful and more efficient.
\Subsection{4cm}{Return file names in specified directory}
\Shubr{FMFNMS}{(PATH,FILES*,KEYS*,NKEYS*,MAXKEY,IRC*)}
\begin{DLtt}{1234567}
\item [PATH]
Character variable of maximum length 255 to specify the path name of
interest.
\item[FILES]
Character array of length 20 characters and dimension MAXKEY
to return the names of the files found.
\item[KEYS]
Integer matrix of size (10,MAXKEY) to return the keys
vectors associated with the file names in FILES.
\item[NKEYS]
Integer variable to return the actual dimension of KEYS.
\item[MAXKEY]
Integer constant to specify the second dimension of KEYS.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine returns the file names and keys vectors
in the directory specified by PATH.
NKEYS returns the actual number of files and keys returned.
If more than MAXKEY files are found, IRC will be non-zero.
Otherwise IRC will be 0.
\newpage
{\it N.B. This routine returns ALL file names in the specified
directory in the order in which they were added to the catalogue.}
See the routine on Page~\pageref{FMSORT} for details of how to
sort the FILES arrary.
\par
The suggested replacement for this routine is \Rind{FMLFIL}, which 
provides wild-card support.
\begin{XMPt}{Example of using the \protect\Rind{FMFNMS} routine}
      PARAMETER     (LKEYFA=10)
      PARAMETER     (MAXKEY=100)
      CHARACTER*20  FILES(MAXKEY)
      INTEGER       KEYS(LKEYFA,MAXKEY)
      CALL FMFNMS('//CERN/DELPHI'//
     +            '/ALLD/RAWD/CERN/V001/E091.00/P01R000314/NONE',
     +            FILES,KEYS,NKEYS,MAXKEY,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMFNMS'
\end{XMPt}
\begin{XMPt}{Using the \protect\Rind{FMLFIL} routine as a replacement for \protect\Rind{FMFNMS}}
      PARAMETER     (LKEYFA=10)
      PARAMETER     (MAXKEY=100)
      CHARACTER*255  FILES(MAXKEY)
      INTEGER        KEYS(LKEYFA,MAXKEY)
      ICONT = 0
*     On return, IRC = -1 if more than MAXKEY files found.
*     Call FMLFIL again with ICONT ^=0 to retrieve the next batch of MAXKEY files.
      CALL FMLFIL('//CERN/DELPHI'//
     +            '/ALLD/RAWD/CERN/V001/E091.00/P01R000314/NONE/*',
     +            FILES,KEYS,NKEYS,MAXKEY,ICONT,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMLFIL'
\end{XMPt}
\Subsection{4cm}{Return file names in directory structure}
\Shubr{FMLIST}{(PATH,FILES*,KEYS*,NFOUND,MAXFIL,IRC*)}
\begin{DLtt}{1234567}
\item[PATH]
Character variable of maximum length 255 to specify the path name of
interest.
\item[FILES]
Character array of length 255 characters and dimension \Lit{MAXFIL}
to return the names of the files found.
\item[KEYS]
Integer matrix of size \Lit{(10,MAXFIL)} to return the keys
vectors associated with the file names in \Lit{FILES}.
\item[NFOUND]
Integer variable to return the actual dimension of \Lit{FILES} and
then actual second dimension of \Lit{KEYS}.
\item[MAXFIL]
Integer constant to specify the second dimension of \Lit{KEYS}.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
The suggested replacement for this routine is \Rind{FMLFIL}, which 
allows an arbitrary number of file names to be returned.
\par
This routine returns the file names and keys vectors
in the directory tree specified by PATH.
The directory tree may contain wild-cards (* or \%) in any position,
or numeric ranges specified as (mm:nn), such as (13:147).
See on Page~\pageref{FMATCH} for more details.
NFOUND returns the actual number of files and keys returned.
If more than MAXFIL files are found, IRC will be non-zero.
Otherwise IRC will be 0.
{\it N.B. This routine returns ALL file names in
in the order in which they were added to the catalogue.}
See the routine on Page~\pageref{FMSORT} for details of how to
sort the FILES array.
\begin{XMPt}{Example of using the \protect\Rind{FMLIST} routine}
      PARAMETER     (LKEYFA=10)
      PARAMETER     (MAXFIL=1000)
      CHARACTER*255 FILES(MAXFIL)
      INTEGER       KEYS(LKEYFA,MAXFIL)
      CALL FMLIST('//CERN/DELPHI'//
     +            '/ALLD/RAWD/*/E091.*/P01R000%%%/NONE',
     +            FILES,KEYS,NFOUND,MAXFIL,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMLIST'
\end{XMPt}
\begin{XMPt}{Using the \protect\Rind{FMLFIL} routine as a replacement for \protect\Rind{FMLIST}}
      PARAMETER     (LKEYFA=10)
      PARAMETER     (MAXKEY=100)
      CHARACTER*255  FILES(MAXKEY)
      INTEGER        KEYS(LKEYFA,MAXKEY)
      ICONT = 0
*
*     On return, IRC = -1 if more than MAXKEY files found.
*     Call FMLFIL again with ICONT ^=0 to retrieve the next
*     batch of MAXKEY files.
* 
      CALL FMLFIL('//CERN/DELPHI'//
     +            '/ALLD/RAWD/CERN/V001/E091.00/P01R000314/NONE/*',
     +            FILES,KEYS,NKEYS,MAXKEY,ICONT,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMLFIL'
\end{XMPt}
\Subsection{4cm}{Obtain names of subdirectories in specified tree}
\Shubr{FMTREE}{(PATH,SUBDIR*,NLEVEL,NFOUND*,MAXDIR,IRC*)}
\begin{DLtt}{1234567}
\item[PATH]
Character variable of maximum length 255 to specify the path to be
searched.
\item[SUBDIR]
Character array of maximum length 255 and dimension MAXDIR
to return the directory names found.
\item[NLEVEL]
Integer variable to set the number of levels below PATH to
be searched.
\item[NFOUND]
Integer variable to return the number of names returned in
the array SUBDIR.
\item[MAXDIR]
Integer constant to specify the maximum second dimension of
the array SUBDIR.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
The suggested replacement for this routine is \Rind{FMLDIR}, which 
provides wild-card support and
allows an arbitrary number of file names to be returned.
\par
This routine returns in the character array SUBDIR the names of
all directories below and including the input directory specified
in PATH down to the level NLEVEL.
MAXDIR specifies the maximum dimension of the array SUBDIR.
NFOUND returns the number of directories found.
Should NFOUND be less than or equal to MAXDIR, SUBDIR(NFOUND) will
be the name of the current directory.
If {\tt NFOUND > MAXDIR}, IRC will be non-zero.
PATH and SUBDIR are of type CHARACTER and may be as long as 255
characters.
\begin{XMPt}{Example of using the \protect\Rind{FMTREE} routine}
*
*     Argument declarations
      PARAMETER     (MAXDIR=1000)
      CHARACTER*255 PATH,SUBDIR(MAXDIR)
*     Get list of subdirectories down to a level of 10
      CALL FMTREE('//CERN',SUBDIR,10,NFOUND,MAXDIR,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMTREE'
\end{XMPt}
\begin{XMPt}{Using \protect\Rind{FMLDIR} as a replacement for \protect\Rind{FMTREE}}
*
      PARAMETER     (MAXDIR=100)
      CHARACTER*255  CHDIRS(MAXDIR)
      ICONT = 0
*
*     On return, IRC = -1 if more than MAXDIR directories found.
*     Call FMLDIR again with ICONT ^=0 to retrieve the next
*     batch of MAXDIR directories
* 
      CALL FMLDIR('//CERN/DELPHI'//
     +            '/ALLD/RAWD/CERN/V001/E091.00/P01R000314/NONE/*',
     +            CHDIRS,NDIRS,MAXKEY,ICONT,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMLDIR'
\end{XMPt}
\Subsection{4cm}{User routine to allocate new piece of media}
\Shubr{FUALLO}{(MEDIA,VSN*,VID*,IRC*)}
\index{VSN}
\index{VID}
\begin{DLtt}{1234567}
\item[MEDIA]
Character variable of length 4 to specify the medium required.
\item[VSN]
Character variable of length 6 in which the VSN is returned.
\item[VID]
Character variable of length 6 in which the VID is returned.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
The suggested replacement for this routine is \Rind{FMUALL}, which
is automatically called from \Rind{FMALLO} if FATMEN has been installed
without the TMS option.
\par
This routine returns a free VSN and VID of type MEDIA.
\begin{XMPt}{Example of using the routine \protect\Rind{FUALLO}}
*     Argument declarations
      CHARACTER*6 VSN,VID
      CHARACTER*4 MEDIA
      MEDIA = '3480'
      CALL FUALLO(MEDIA,VSN,VID,IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FUALLO
\end{XMPt}
\Subsection{4cm}{Create a new FATMEN bank}
\Shubr{FMLIFT}{(GENAM,KEYS*,MEDIA,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[KEYS]
Integer array of length 10 to return the keys vector associated
with the specified generic name.
\item[MEDIA]
Character variable of length 4 to specify the medium required.
\item[CHOPT]
Character variable to specify the options desired.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par 
The suggested replacement for this routine and \Rind{FMLINK} is \Rind{FMBOOK}.
\par
This routine will create a new ZEBRA bank for the specified
generic name GENAM and fill in default values.
The user may then modify these before
committing the changes via \Rind{FMPUT}.
If IRC is non-zero, the IQUEST vector will contain the error condition
signaled by MZBOOK. See the description of MZBOOK in the ZEBRA manual.
After calling the \Rind{FMLIFT} routine, the user must obtain the address
of the associated bank using \Rind{FMLINK} and then fill in the appropriate
media details using \Rind{FMALLO} or \Rind{FUALLO}.
See on Page~\pageref{FMLINK}, on Page~\pageref{FMALLO} and
on Page~\pageref{FUALLO} for further details.
\begin{XMPt}{Example of using the \protect\Rind{FMLIFT} routine}
      CALL FMLIFT('//CERN/CNDIV/GOOSSENS/DCF/M123',KEYS,'DISK',' ',IRC)
\end{XMPt}
\par
\Rind{FMLIFT} returns warning conditions using the IQUEST vector.
The following conditions may be reported:
\begin{DLtt}{1234567}
\item[IQUEST(11)]0 if this generic name does not exist, 1 otherwise.
\item[IQUEST(12) ]
0 if the corresponding directories already exist, 1 otherwise.
\end{DLtt}
\Subsection{4cm}{Get the address of a FATMEN bank}
\Shubr{FMLINK}{(GENAM,LBANK*,CHOPT,IRC*)}
\begin{DLtt}{1234567}
\item[GENAM]
Character variable of maximum length 255 to specify the generic name.
\item[LBANK]
Integer variable to input the address of the bank corresponding
to the generic name specified.
\item[CHOPT]
Character variable to specify the options desired.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine will return the address LBANK
of the ZEBRA bank corresponding
to the specified generic name GENAM. It should be called after \Rind{FMLIFT}
if the user wishes to modify the information contained in the bank before
committing the changes via \Rind{FMPUT}, or at the end of run when
more details, such as file size, first and last event number, are known.
If no bank exists for the specified generic name GENAM, warning messages
will be printed and a bank address of zero returned. These messages
may be suppressed by specifying the character option 'Q' (quiet), or
globally by using \Rind{FMLOGL} described below.
If no bank corresponding to the specified generic name GENAM is found,
IRC will be non-zero.
\begin{XMPt}{Example of using the \protect\Rind{FMLINK} routine}
*     Obtain address of bank previously lifted by FMLIFT
      CALL FMLINK('CERN/GOOSSENS/DCF/M123',LBANK,'Q',IRC)
      IF(IRC.NE.0) PRINT *,'Return code ',IRC,' from FMLINK
\end{XMPt}
\Subsection{4cm}{Obtain volume characteristics}
\Shubr{FMQTMS}{(VID,LIB*,MODEL*,DENS*,MNTTYP*,LABTYP*,IRC*)}
\index{TMS}
\begin{DLtt}{1234567}
\item[VID]
Character variable of length 6 specifying the visual identifier
of the volume on which information is required.
\item[LIB]
Character variable to return the name of the library in which
the specified volume resides.
\item[MODEL]
Character variable to return the generic device type (e.g. CART,
TAPE, SMCF) associated with VID, or the physical device type (e.g. 3480).
\item[MNTTYP]
Character variable to indicate whether VID will be robotically
or manually mounted. MNTTYP returns 'R' or 'M' respectively.
\item[LABTYP]
Character variable to return the label type of the volume VID,
e.g. SL, NL, BLP.
\item[IRC]
Integer variable in which the return code is returned.
\end{DLtt}
\par
This routine interfaces to the local Tape Management System
and returns information on a given volume. 
Interfaces currently exist to the HEPVM TMS and VMTAPE.
\par
If FATMEN has been
installed without the TMS option, then default values
will be returned. See the description of the \Rind{FMEDIA} routine
for information on setting these default values.
To allow this default information to be overridden on a volume
by volume basis, \Rind{FMQTMS} calls a user exit \Rind{FMUTMS} which has
exactly the same calling sequence. A dummy \Rind{FMUTMS} routine
exists in PACKLIB.
\begin{XMPt}{Example of using the routine \protect\Rind{FMQTMS}}
* Definitions from FATMEN sequence TMSDEF
      CHARACTER*6  DENS
      CHARACTER*8  LIB
      CHARACTER*4  LABTYP
      CHARACTER*1  MNTTYP
      CHARACTER*8  MODEL
      CHARACTER*7  ROBMAN(2)
      DATA         ROBMAN(1)/'-Robot '/,ROBMAN(2)/'-Manual'/
*
*     Obtain characteristics of volume I28901
*
      CALL FMQTMS('I28901',LIB,MODEL,DENS,MNTTYP,LABTYP,IRC)
      IF(IRC.EQ.100) PRINT *,'Volume unknown to TMS'
            IF(IC.EQ.0) THEN
              ITYPE = 1
              IF(MNTTYP.EQ.'M') ITYPE = 2
              PRINT *,'Library = ',LIB,' model = ',MODEL//ROBMAN(ITYPE)
     +               ,' density = ',DENS,' label type = ',LABTYP
              ENDIF
\end{XMPt}
\begin{XMPt}{Example of a user coded \protect\Rdef{FMUTMS} routine}
      SUBROUTINE FMUTMS(VID,LIB,MODEL,DENS,MNTTYP,LABTYP,IRC)
      CHARACTER*(*) VID
+CDE,FATTYP.
+CDE,TMSDEF.
*
*     Return codes (HEPVM TMS convention)
*                   0   ok
*                   8   Syntax error
*                   12  Access denied
*                   100 Volume does not exist
*                   312 Volume unavailable
*
*     The following test is CERN specific!!!
*
      IF((VID(1:1).EQ.'I').AND.(ICNUM(VID,2,6).EQ.7)) THEN
         LIB = 'SMCF_1'
         MODEL = 'SMCF'
         MNTTYP= 'R'
      ENDIF

      END
\end{XMPt}
\Filename{H2Fatmenuserguide-sample-fortran-program}
\Section{4cm}{A sample FORTRAN program}
\par
\index{FORTRAN program}
A sample FORTRAN program is contained in the PATCH FATUSER on the FATMEN
PAM.
A CRADLE to produce this FORTRAN is currently stored in FATUSER CRADLE
on FAT3's 191 disk on CERNVM.
\par
An additional example is given below: this example loads information from
DELPHI's Production Summary File (PSF) and adds it to the FATMEN file
catalogue.
\par
Other examples programs, including generation of a FORTRAN program
from scratch, are to be found in the tutorial section of this
manual.

\begin{XMPt}{Example of a PSF file}
COMM ***********************************************************************************
COMM ***                                   Institute and computer identifier
COMM ***********************************************************************************
INST CERN CC           IBM3090
COMM ***********************************************************************************
COMM ***                   List of Raw Data cass. from august 1989 Pilot Run
COMM ***********************************************************************************
TDAS EP0001                                       X ALLD/RAWD/E091.0
       0/P01R000314/NONE/F001/CERN/V001/#000003/#000384*
UDAS No S-O-R.
TDAS EP0002                                           X ALLD/RAWD/E091.00
     /P01R000315/NONE/F001/CERN/V001/#000002/#000140
TDAS EP0003 C                                         X ALLD/RAWD/E091.00
     /P01R000315/NONE/F002/CERN/V001/#100002/#100203
UDAS 100000 added to event numbers because of duplicate run/event numbering in
              DAS system
TDAS EP0004 C01             X ALLD/RAWD/E091.00/P01R000315/NONE/F003/CERN/V001/#
200002/#203148
UDAS 200000 added to event numbers because of duplicate run/event numbering in
       DAS system
TDAS EP0005   C 01                                      X ALLD/RAWD/E091.00
    /P01R000316/NONE/F001/CERN/V001/#000002/#000193
TDAS EP0006   C 01                                      X ALLD/RAWD/E091.00
    /P01R000317/NONE/F001/CERN/V001/#000002/#000235
TDAS EP0007   C 01                                      X ALLD/RAWD/E091.00
/P01R000317/NONE/F002/CERN/V001/#000002/#000222
TDAS EP0008   C 01                                      X ALLD/RAWD/E091.00/
P01R000318/NONE/F001/CERN/V001/#000003/#000786
UDAS No S-O-R.
\end{XMPt}
\begin{XMPt}{Using the FATMEN database from FORTRAN}
      PROGRAM FATDEL
*----------------------------------------------------------------------*
*                                                                      *
* Example FATMEN program, which reads DELPHI Production Summary File   *
* and adds information to FATMEN database.                             *
* In this example, only TDAS records are processed.                    *
*                                                                      *
*----------------------------------------------------------------------*
*
*     Stuff for ZEBRA
*
      PARAMETER (LURCOR=200000)
      COMMON/CRZT/IXSTOR,IXDIV,IFENCE(2),LEV,LEVIN,BLVECT(LURCOR)
      DIMENSION    LQ(999),IQ(999),Q(999)
      EQUIVALENCE (IQ(1),Q(1),LQ(9)),(LQ(1),LEV)
      COMMON /USRLNK/LUSRK1,LUSRBK,LUSRLS
      COMMON /QUEST/IQUEST(100)
      PARAMETER       (LKEYFA=10)
      DIMENSION KEY(LKEYFA)
      CHARACTER*1 CHLUN
*
*     Initialise ZEBRA
*
      CALL MZEBRA(-3)
      CALL MZSTOR(IXSTOR,'/CRZT/','Q',IFENCE,LEV,BLVECT(1),BLVECT(1),
     +            BLVECT(5000),BLVECT(LURCOR))
      CALL MZLOGL(IXSTOR,-3)
*
* *** Define user division and link area like:
*
      CALL MZDIV  (IXSTOR, IXDIV, 'USERS', 50000, LURCOR, 'L')
      CALL MZLINK (IXSTOR, '/USRLNK/', LUSRK1, LUSRLS, LUSRK1)
*
*     Units for RZ database, FZ update files and PSF
*
      LUNRZ  = 1
      LUNFZ  = 2
      LUNPSF = 3
*
*     Issue FILEDEF for PSF
*
      WRITE(CHLUN,'(I1)') LUNPSF
      CALL VMCMS('FILEDEF '//CHLUN//
     +' DISK CERN PSF * (LRECL 132 RECFM F)',IRC)
*
*     Initialise FATMEN for DELPHI
*
      CALL FMINIT(IXSTOR,LUNRZ,LUNFZ,'//CERN/DELPHI',IRC)
*
*     Process information in PSF
*
      CALL ADDPSF(LUNPSF)
      END
      SUBROUTINE ADDPSF(LUNPSF)
* Start sequence FATPARA
*
*          Keys
      PARAMETER ( MKSRFA= 1, MKFNFA= 2, MKCLFA=7, MKMTFA=8
     1           ,MKLCFA= 9, MKNBFA=10, NKDSFA=10 )
*
** ***     Bank offsets
*
      PARAMETER ( MFQNFA=  1, MHSNFA= 65, MCPLFA= 67, MMTPFA= 68
     1           ,MLOCFA= 69, MHSTFA= 70, MHOSFA= 74
     2           ,MVSNFA= 77, MVIDFA= 79, MVIPFA= 81, MDENFA= 82
     3           ,MVSQFA= 83, MFSQFA= 84, MSRDFA= 85, MERDFA= 86
     4           ,MSBLFA= 87, MEBLFA= 88, MRFMFA= 89, MRLNFA= 90
     5           ,MBLNFA= 91, MFLFFA= 92, MFUTFA= 93, MCRTFA= 94
     6           ,MCTTFA= 95, MLATFA= 96, MCURFA= 97, MCIDFA= 99
     7           ,MCNIFA=101, MCJIFA=103, MFPRFA=105, MSYWFA=106
     8           ,MUSWFA=116, MUCMFA=126, NWDSFA=145
     9           ,MFSZFA=MSYWFA)
 
* End   sequence FATPARA
      PARAMETER (LURCOR=200000)
      COMMON/CRZT/IXSTOR,IXDIV,IFENCE(2),LEV,LEVIN,BLVECT(LURCOR)
      DIMENSION    LQ(999),IQ(999),Q(999)
      EQUIVALENCE (IQ(1),Q(1),LQ(9)),(LQ(1),LEV)
*
      COMMON /USRLNK/LUSRK1,LUSRBK,LUSRLS
*
      COMMON /QUEST/IQUEST(100)
      PARAMETER (LKEYFA=10)
      DIMENSION KEYS(LKEYFA)
 
      CHARACTER*132 CARD
      CHARACTER*240 GENEN
      CHARACTER     UFORM(4)*1,FFORM(4)*2
      DATA          UFORM/'N','X','A','G'/
      DATA          FFORM/'FZ','FX','FA','AS'/
      DATA NCARDS/0/,NPROC/0/
 
 1    CONTINUE
*
*     Process all records in file
*
      READ(LUNPSF,'(A132)',END=99) CARD
      NCARDS = NCARDS + 1
*
*     Got a PSF line, now process
*
      IF (CARD(1:4) .EQ. 'TDAS') THEN
         PRINT *,'Processing ',CARD
         NPROC = NPROC + 1
*
*     Format of TDAS card is:
*
*23456789_123456789_123456789_123456789_123456789_123456789_123456789_
*KEY VID----- M FS                                      F Generic name
*
*     where M  = media type (C=cart, T=tape)
*           FS = File sequence number
*           F  = file format
*
         CALL CFILL(' ',GENEN,1,240)
         GENEN = CARD(59:119)
         LGEN = LENOCC(GENEN)
*
*     Create bank for this generic name
*
         CALL FMLIFT('//CERN/DELPHI/'//GENEN(1:LGEN),
     +   KEYS,'3480','U',IRC)
*
*     Get address of the bank
*
         CALL FMLINK('//CERN/DELPHI/'//GENEN(1:LGEN),LFAT,' ',IRC)
*
*     Dataset name is always DELPHI
*
         CALL UCTOH('DELPHI',IQ(LFAT+MFQNFA),4,6)
*
*     Set values according to information found in PSF
*
         READ(CARD(17:18),'(I2)') IFILE
         IQ(LFAT+MFSQFA) = IFILE
         CALL UCTOH(CARD(6:13),IQ(LFAT+MVIDFA),4,6)
         CALL UCTOH(CARD(6:13),IQ(LFAT+MVSNFA),4,6)
         IMATCH = ICNTH(CARD(57:57),UFORM,4)
         CALL UCTOH(FFORM(IMATCH),IQ(LFAT+MFLFFA),4,2)
*
*     Write bank to RZ file (and ORACLE...)
*
         CALL FMPUT('//CERN/DELPHI/'//GENEN(1:LGEN),LFAT,IRC)
         ELSE
*        PRINT *,'Unrecognised card ',CARD(1:4)
         ENDIF
 
      GOTO 1
99    CONTINUE
      PRINT *,'EOF on PSF file found, LUN=',LUNPSF
      PRINT *,NCARDS,' records found, of which ',NPROC,' processed'
      END
\end{XMPt}

\Filename{H1Fatmenuserguide-interactive-interface}
\chapter{The FATMEN interactive interface}
\Filename{H2Fatmenuserguide-command-summary}
\Section{4cm}{Summary of commands}
\par
\index{KUIP}
The command line interface consists of a set of Unix-like commands
and is based on the KUIP package\cite{bib-KUIP}.
The command line interface is activated by typing \Ucom{FM} at the command
level (\$ prompt on VMS, VM READ on VM etc). For instance, to obtain
a directory listing of {\tt //cern/electra/rawdata/p1b90/run1}
enter the command:
\begin{XMP}
FM
FM> \underline{ls //cern/electra/rawdata/p1b90/run1}
\end{XMP}
\Sbox{ALLOCATE}{ALLOCATE}{POOL LIBRARY GNAME DSN FFORM CPLEV HOSTN [COMM] 
[RECFM] [LRECL] [BLOCK] [FSIZE] [MEDIA]}
\begin{DLtt}{1234567890}
\item[POOL]Name of the TMS Pool from which the volume is to be allocated
\item[LIBRARY]Name of the TMS Library containing the specified pool
\item[GNAME]Generic file name for which the volume is to be allocated
\item[DSN]Dataset name on the tape volume
\item[FFORM]File format (FZ, FA, FX, RZ, EP, UN, AS)
\item[CPLEV]Copy level or data representation
\item[HOSTN]Host name (e.g. CERNVM)
\item[COMM]Comment string 
\item[RECFM]record format (e.g. FB, VBS)
\item[LRECL]record length (in words)
\item[BLOCK]block length (in words)
\item[FSIZE]file size (in megabytes)
\item[MEDIA]media type (2=3480,3=3420,4=8200,...)
\end{DLtt}
Use the \Rind{ALLOCATE} comand to add a new tape file to the FATMEN catalogue.
A tape is allocated from the specified pool. The file sequence number
is always set to 1.
\Sbox{ADDDISK}{ADD/DISK}{GNAME DSN FFORM CPLEV HOSTN [COMM] [RECFM] [LRECL] 
[BLOCK] [FSIZE] [LOCCOD] [USERWORDS]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic file name for which the volume is to be allocated
\item[DSN]Dataset name on the tape volume
\item[FFORM]File format (FZ, FA, FX, RZ, EP, UN, AS)
\item[CPLEV]Copy level or data representation
\item[HOSTN]Host name (e.g. CERNVM)
\item[COMM]Comment string 
\item[RECFM]record format (e.g. FB, VBS)
\item[LRECL]record length (in words)
\item[BLOCK]block length (in words)
\item[FSIZE]file size (in megabytes)
\item[LOCCOD]Location code
\item[USER1]User word 1
\item[USER2]User word 2
\item[USER3]User word 3
\item[USER4]User word 4
\item[USER5]User word 5
\item[USER6]User word 6
\item[USER7]User word 7
\item[USER8]User word 8
\item[USER9]User word 9
\item[USER10]User word 10
\end{DLtt}
Use the ADD/DISK command to add a new disk file to the FATMEN catalogue
\Sbox{ADDTAPE}{ADD/TAPE}{VSN VID FSEQ GNAME DSN FFORM CPLEV HOSTN 
[COMM] [RECFM] [LRECL] [BLOCK] [FSIZE] [MEDIA]}
\begin{DLtt}{1234567890}
\item[VSN]volume serial number
\item[VID]visual identifier
\item[FSEQ]file sequence number
\item[GNAME]Generic file name for which the volume is to be allocated
\item[DSN]Dataset name on the tape volume
\item[FFORM]File format (FZ, FA, FX, RZ, EP, UN, AS)
\item[CPLEV]Copy level or data representation
\item[HOSTN]Host name (e.g. CERNVM)
\item[COMM]Comment string 
\item[RECFM]record format (e.g. FB, VBS)
\item[LRECL]record length (in words)
\item[BLOCK]block length (in words)
\item[FSIZE]file size (in megabytes)
\item[MEDIA]media type (2=3480,3=3420,4=8200,...)
\item[LOCCOD]Location code
\item[USER1]User word 1
\item[USER2]User word 2
\item[USER3]User word 3
\item[USER4]User word 4
\item[USER5]User word 5
\item[USER6]User word 6
\item[USER7]User word 7
\item[USER8]User word 8
\item[USER9]User word 9
\item[USER10]User word 10
\end{DLtt}
Use the ADD/TAPE command to add a new tape file to the FATMEN catalogue
 
\Sbox{CD}{CD}{[PATH] [CHOPT]}
\begin{DLtt}{1234567890}
\item[PATH]Name of directory
\item[CHOPT]options
\begin{DLtt}{12}
\item[A]all of below
\item[Q]show quota for new directory
\item[S]show number of subdirectories
\item[T]show creation and modification times
\item[U]show usage information
\end{DLtt}
\end{DLtt}
Use the CD command to change the current default directory.
Some examples of the CD command are given below:
\begin{XMP}
 
\lsb zfatal\rsb  > fm
 FATMEN.KUMAC not found
 Type INIT to initialise FATMEN> init cndiv
 
 FMINIT.  Initialisation of FATMEN package
 FATMEN   1.38  910218 15:00  CERN PROGRAM LIBRARY FATMEN=Q123
          This version created on      910218  at        1514
 Current Working Directory = //CERN/CNDIV
 FM> \Ucom{cd jamie/dsts}
 Current Working Directory = //CERN/CNDIV/JAMIE/DSTS
 FM> \Ucom{cd ..}
 Current Working Directory = //CERN/CNDIV/JAMIE
 FM> \Ucom{cd $HOME}
 Current Working Directory = //CERN/CNDIV
 FM> \Ucom{cd jamie/dsts}
 Current Working Directory = //CERN/CNDIV/JAMIE/DSTS
 FM> \Ucom{cd \bs}
 Current Working Directory = //CERN/CNDIV/JAMIE
 FM>
 
\end{XMP}
\Sbox{CLR}{CLR}{ }
Use the CLR command to clear the screen
\Sbox{CP}{CP}{FROM TO [KSN] [LOCCOD DATREP MEDTYP VSN VID FSEQ DSN HOST}
\begin{DLtt}{1234567890}
\item[FROM]Original file
\item[TO]Target file
\item[KSN]Key serial number to identify a particular source file if
there is more than one entry for the specified generic name
\item[LOCCOD]The location code for the output entry. 
If not specified, the location code of the input dataset will be used.
\item[DATREP]The data representation of the output entry.
If not specified, the data representation of the input dataset will be used.
\item[MEDTYP]The media type of the output entry.
If not specified, the media type of the input dataset will be used.
\item[VSN]The VSN of the output entry.
\item[VID]The VID of the output entry.
\item[FSEQ]The file sequence number of the output entry.
\item[DSN]The dataset name of the output entry.
\item[HOST]The hostname of the output entry.
\end{DLtt}
Use the CP command to copy a file. Note that this command makes a copy
of the catalogue entry. It does not initiate a physical file copy.
\Sbox{COPY}{COPY}{GNAME [KS1] [KS2] [POOL] [LIBRARY] [VID] [FSEQ] [NODE] 
[FILE] [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name of the file to be copied
\item[KS1]Key serial number of the input file. If not specified,
the normal FATMEN selection mechanism will be used.
\item[KS2]Key serial number of the output file. If specified the information
on the output file will be taken from the corresponding catalogue entry.
\item[POOL]Name of the TMS pool from which a volume is to be allocated
for the copy. If neither the POOL nor VID are specified, the output file
is assumed to be on disk.
\item[LIBRARY]TMS Library containing the named pool from which a volume
is to be allocated.     
\item[VID]Visual Identifier of the output tape, if automatic allocation
from a named pool is not to be used.
\item[FSEQ]File sequence number on the output tape volume.
\item[NODE]Node name on which the file resides. The default is the current
node. If a remote node is specified, the file will be copied using the
CSPACK \cite{bib-CSPACK} routines.
\item[FILE]File name for the output file
\item[TRANSPORT]Transport mechanism in case of a remote copy
\begin{DLtt}{1234567890}
\item[TCPIP]This is the default transport for making remote copies
\item[DECnet]Between VAX/VMS systems only
\item[CHEOPS]Queue for transfer via Olympus satellite. This option is
only valid on nodes at sites participating in the CHEOPS project.
At other sites such requests will automatically be rejected.
The source and destination sites must previously have been
set using the \Rind{SET/SOURCE} and \Rind{SET/DESTINATION} commands.
\end{DLtt}
\item[LOCCOD]The location code for the copied file
\item[DATREP]The data representation for the copied file
\item[MEDTYP]The medium type of the medium on which the copy resides
\item[CHOPT]Options
\begin{DLtt}{12}
\item[C]perform copy using STAGE CHANGE
\item[L]Lock output tape volume using TMS LOCK command
\item[P]Perform a physical copy. This uses the VMS copy command
on VAX/VMS systems, the cp command on Unix systems, and VMIO
subroutine calls on VM/CMS systems.
\item[S]STAGE IN the input file
\end{DLtt}
\end{DLtt}
Use the COPY command to copy the data referenced by a generic name.
A dataset may be copied by specifying existing catalogue entries
(KS1 and KS2), a target VID, a TMS pool and library from which
the output tape should be allocated, or a remote node and file name.

An example of a copy request where the copy should be performed
using CHEOPS \index{CHEOPS} is shown below.
\begin{XMPt}{Requesting a copy via CHEOPS}
set/source cern
set/dest helsinki
copy gname=//CERN/CNDIV/JAMIE/TEST node=HEL1 transport=CHEOPS vid=QQ1234
\end{XMPt}
\Sbox{DIR}{DIR}{[PATH] [OUTPUT] [CHOPT]}
\begin{DLtt}{1234567890}
\item[PATH]path-name
\item[OUTPUT]output file name. If not specified the output will be 
directed to the terminal
\item[CHOPT]options
\begin{DLtt}{12}
\item[T]list also subdirectory tree
\end{DLtt}
\end{DLtt}
Use the \Rind{DIR} command to issue a call to RZLDIR for the specified
path. This command is normally used for debug purposes only.
\Sbox{DUMP}{DUMP}{GENAM [KSN] [BYTES] [BLOCKS] [FILES] [CODE]}
\index{TAPEDUMP}
\index{DUMPTAPE}
\index{XTAPE}
\begin{DLtt}{1234567890}
\item[GENAM]generic-name
\item[KSN]Key serial number. If not specified, the default FATMEN
selection will be used with the exception that disk entries will 
be ignored.
\item[BYTES]Number of bytes per block to dump. The default is 320.
\item[BLOCKS]Number of blocks per file to dump. The default is 1.
\item[FILES]Number of files to dump. The default is 1.
\item[CODE]Character code (EBCDIC or ASCII). If the volume is 
labelled, the character code used for the VOL1 label will
be assumed. If unlabelled, this option can be used to override
the default character code which is EBCDIC.
\end{DLtt}
The \Lit{DUMP} command requests a \Lit{TAPEDUMP} of the VID
corresponding to the specified generic name.
\Sbox{END}{END}{ }
The \Rind{END} command closes the current FATMEN catalogue.
After this command has been issued, the INIT command
may be re-issued to look at a different FATMEN catalogue.
\begin{XMP}
[zfatal] (543) fm
 FATMEN.KUMAC not found
 Type INIT to initialise FATMEN> init l3
 FMINIT.  Initialisation of FATMEN package
 FATMEN   1.51/07 910924 11:00 CERN PROGRAM LIBRARY FATMEN=Q123
          This version created on      910924  at        1114 
 Current Working Directory = //CERN/L3
 FM> fc */*
 Total of  10926 matches ( 10926 files) in     43 directories
 FM> end
 FMEND. Terminating FATMEN package
 FM> init opal
 FMINIT.  Initialisation of FATMEN package
 FATMEN   1.51/07 910924 11:00 CERN PROGRAM LIBRARY FATMEN=Q123                
          This version created on      910924  at        1114 
 Current Working Directory = //CERN/OPAL
\end{XMP}
\Sbox{EXIT}{EXIT}{ }
Use the EXIT command to leave the FATMEN shell.
Any outstanding catalogue updates will be sent to the server.
See also the description of the \Rind{QUIT} command.
\Sbox{EXTRACT}{EXTRACT}{GNAME OUTPUT [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name describing the entries to be extracted.
The name may contain wild-cards.
\item[OUTPUT]Output filename in which the information is to be written.
\item[CHOPT]Options
\end{DLtt}
Use the \Rind{EXTRACT} command to extract all or part of a 
FATMEN catalogue. The select subset will be stored
in the file specified in a format suitable for processing
by the standard FATMEN catalogue server. (i.e. FZ exchange
format, alpha mapping).
Only entries that match the current key selection, as
defined by the commands \Rind{SETLOCATION}, \Rind{SETMEDIATYPE}
and \Rind{SETCOPYLEVEL} will be processed.
\Sbox{FC}{FC}{[GNAME] [OUTPUT] [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name describing the entries to be counted.
The name may contain wild-cards. The default is *, i.e. to count
all files in the current directory.
\item[OUTPUT]Output filename. If not specified, the output will
be directed to the terminal.
\item[CHOPT]Options
\begin{DLtt}{12}
\item[D]display number of subdirectories at each level
\item[F]display number of files at each level
\item[L]display lowest level only, i.e. directories with no subdirectories
\item[Z]display only directories with no (zero) files
\end{DLtt}
\end{DLtt}
Use the \Rind{FC} comand to count the number of files in a directory.
\Rind{FC} will also count the number of files which match the specified pattern

\begin{XMPt}{Examples of using the FC command}
FM> init delphi 
  
 FMINIT.  Initialisation of FATMEN package
 FATMEN   1.64/07 920520 16:45 CERN PROGRAM LIBRARY FATMEN=Q123
          This version created on      920520  at        1645 
 Current Working Directory = //CERN/DELPHI
FM> \Ucom{fc */*}
 Total of  95141 matches ( 95141 files) in    394 directories
FM> ...
FM> \Ucom{cd $HOME} 
Current Working Directory = //FNAL/D0
FM> \Ucom{fc clmc/*/*}
Total of     41 matches (    41 files) in     22 directories
FM> \Ucom{fc */*}
Total of   2333 matches (  2333 files) in     41 directories
FM> 

\end{XMPt}
\Sbox{FIND}{FIND}{GNAME LOGNAM}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name of the file to be accessed
\item[LOGNAM]Logical name (DDNAME, link etc.) to be associated with
the file. A numeric value is converted according to the FORTRAN
conventions on the local machine, unless the file is to be 
accessed using a special package.
\begin{DLtt}{1234567890}
\item[VM/CMS]nn is converted to FTnnF001. If the logical format is EP,
then it is converted to IOFILEnn.
\item[MVS]nn is converted to FTnnF001. If the logical format is EP,
then it is converted to IOFILEnn.
\item[VAX/VMS]nn is converted to FOR0nn.
\item[Unix]nn is converted to fort.nn
\end{DLtt}
\end{DLtt}
Use the \Rind{FIND} command to FIND the specified file and associate
it with the specified logical unit. If required, the file is
first staged to disk
(See on Page~\pageref{FMFIND} for
the description of the format of the logical unit parameter).
\Sbox{GIME}{GIME}{ }
Use the \Rind{GIME} command to reaccess the disk of the service
machine which maintains the FATMEN catalogue. This command
has no parameters.
\Sbox{INIT}{INIT}{GROUP}
\begin{DLtt}{1234567890}
\item[GROUP]Group or Throng name
\end{DLtt}
Use the \Rind{INIT} command to initialise the FATMEN system for the specified
group or throng, e.g. \Lit{ALEPH}
\par
If the file system name is not \Lit{//CERN}, this should also be given.
\begin{XMPt}{Examples of file system names}
INIT //FNAL/D0

INIT //DESY/H1

INIT //CERN/DELPHI or INIT DELPHI
\end{XMPt}
\index{FATSYS.KUMAC}
\index{FATGRP.KUMAC}
\index{FATUSER.KUMAC}
\index{FATLOGON.KUMAC}
\index{FATMEN.KUMAC}
\index{KUMAC}

FATMEN automatically looks for and executes the files
\Lit{FATSYS.KUMAC, FATGRP.KUMAC, FATUSER.KUMAC} and \Lit{FATLOGON.KUMAC}

The search will be made as follows:
\begin{DLtt}{1234567890}
\item[VAX/VMS]look in directories defined by the logical name \Lit{FATPATH}.
If this logical name is not defined, a default search list of 
\Lit{SYS$DISK:[],SYS$LOGIN} is used. (i.e. current and home directories)
\item[Unix]Look in directories defined in path variable FATPATH.
If this variable is not defined, use current and home directories.
\item[VM/CMS]check disks in global variable \Lit{FATPATH}. 
If not defined, only the A disk is searched.
\item[MVS]The user prefix is prepended to the kumac name, e.g.
\Lit{R01JDS.FATUSER.KUMAC}.
\end{DLtt}

The following examples show how to define the search path on different
systems.

\begin{XMPt}{Defining the search path on VAX/VMS systems}

$!
$! Look for macros in current directory, default directory and
$! public fatmen directory
$!
$  define fatpath sys$disk:[],sys$login,disk$fatmen:[public]
\end{XMPt}

\begin{XMPt}{Defining a search path on Unix systems}

export FATPATH=.:~:/fatmen/public
echo $FATPATH
.:/u/cp/jamie:/fatmen/public

\end{XMPt}

\begin{XMPt}{Defining a search order on VM/CMS systems}

setenv FATPATH a,d,g,q,p,s

\end{XMPt}

For a transition period, the following scheme will also be supported
for backword compatibility purposes.

If a file \Lit{FATMEN.KUMAC} (\Lit{fatmen.kumac} on Unix systems) is found in
the current directory, it will be automatically executed. On VM/CMS
systems, this file must reside on the disk accessed at mode A or G,
or an extension of one of these disks. (e.g. in HEPVM batch, your
191 disk is accessed as a read-only extension of the 191 disk of 
the batch worker in which the job is executing, i.e. B/A)
\Sbox{LD}{LD}{[PATH] [OUTPUT] [NLEVEL] [CHOPT]}
\begin{DLtt}{1234567890}
\item[PATH]Directory name to be listed. If not specified,
the directories below the current working directory are displayed.
The directory name may contain wild cards.
\item[OUTPUT]Output file name. If not specified, the output is
directed to the terminal.
\item[NLEVEL]Number of levels below the current directory to be
displayed when option R is specified. The default is 1 level
without option R and 100 levels with option R.
\item[CHOPT]List of options
\begin{DLtt}{12}
\item[H]write header line in output file
\item[R]list subdirectories recursively
\item[V]'very wide' listing. As W, but 132 columns
\item[W]'wide'. Subdirectories are displayed in multi-column (80) format
\end{DLtt}
\end{DLtt}
Use the \Rind{LD} command to display the contents of a directory
The output of the command may be redirected to a file, e.g.
\begin{XMP}
ld * output=subdirs.lis
\end{XMP}
\begin{XMPt}{Example of \protect\Rind{LD} command}
[zfatal] (796) fm
 FATMEN.KUMAC not found
 Type INIT to initialise FATMEN> init delphi
  
 FMINIT.  Initialisation of FATMEN package
 FATMEN   1.51/04 910918 17:00 CERN PROGRAM LIBRARY FATMEN=Q123                 
 
          This version created on      910918  at        1649 
 Current Working Directory = //CERN/DELPHI
 FM> ld -w
 List of subdirectories...
 
 Directory: //CERN/DELPHI
 
 P01_ALLD P01_UNKN P01_TECH P01_COSM MEOLA 
 Total of          5 subdirectories of which          5 match
 FM>
\end{XMPt}
\Sbox{LOCK}{LOCK}{GENAM [KSN] [CHOPT]}
\index{WRITE-LOCK}
\index{TMS}
\begin{DLtt}{1234567890}
\item[GENAM]generic name of the entry to be processed.
\item[KSN]Key serial number of the entry to be processed. If not specified,
the default FATMEN selection is used with the exception that disk files
are ignored.
\item[CHOPT]Option string
\end{DLtt}
Use the \Rind{LOCK} command to disable WRITE access to the tape on which
the file specified resides. If a negative key serial number is given,
all entries matching the specified generic name will be locked.
\Sbox{LOGLEVEL}{LOGLEVEL}{[LEVEL]}
\begin{DLtt}{1234567890}
\item[LEVEL]Loglevel to be set
\begin{DLtt}{12}
\item[-3]Suppress all log messages
\item[-2]Error messages
\item[-1]Terse logging
\item[0]Normal (\Rind{FMINIT}, \Rind{FMEND} etc.)
\item[1]Log calls to FATMEN routines (FORTRAN callable interface)
\item[2]Log to monitor FATMEN internal decisions, such as selection of a dataset
\item[3]Debug messages
\end{DLtt}
\end{DLtt}
Use the \Rind{LOGLEVEL} command to set the FATMEN loglevel.
\Sbox{LN}{LN}{CHSRCE CHTRGT [CHCOMM] [IW1] [IW2] [IW3] [IW4] [IW5] [IW6] [IW7] [IW8] [IW9] [IW10] [CHOPT]}
\begin{DLtt}{1234567890}
\item[CHSRCE]
Character variable of maximum length 255 to specify the generic name of
the link to an existing object.
\item[CHTRGT]
Character variable of maximum length 255 specifying an existing generic name.
\item[CHCOMM]
Character variable of maximum length 80 specifying the comment to 
be associated to the link. 
\item[IW1]
User word 1
\item[IW2]
User word 2
\item[IW3]
User word 3
\item[IW4]
User word 4
\item[IW5]
User word 5
\item[IW6]
User word 6
\item[IW7]
User word 7
\item[IW8]
User word 8
\item[IW9]
User word 9
\item[IW10]
User word 10
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[C]set the comment field to the string specified in {\tt CHCOMM}
\item[U]set the user words to the values in the vector {\tt IVECT}
\end{DLtt}
\end{DLtt}
Use the LN command to make a link to an existing catalogue entry.
If the existing entry is itself a link, the link will point to the
target of that link.
\Sbox{LS}{LS}{[GNAME] [KSN] [OUTPUT] [NAMES] [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name to be listed, containing wild-cards if
required. If not specified, a * is used, i.e. all files in the
current directory will be displayed.
\item[KSN]Key serial number. If specified only the entry matching
the generic name and key serial number combination will be
displayed. This parameter is ignored if the specified generic
name contains wild cards.
\item[OUTPUT]Output file name. If not specified the output is directed
to the terminal.
\item[NAMES]Name of the names file (if the specified
generic names starts with a \%).
\item[CHOPT]Option string
\begin{DLtt}{12}
\item[A]list all attributes, except DZSHOW (option Z).
\item[B]brief (80) column listing
\item[C]display comment field associated with file
\item[D]to be used to generate a KUMAC file to remove (delete) the entry
\item[E]extended (132) column listing
\item[F]list file attributes, such as start/end record and block
\item[G]list the full generic name of each file
\item[H]write header line]useful in the case of output redirection 
\item[I]sort generic names in Increasing order
\item[J]Just show entries that are accessible
\item[K]list keys associated with this file (copy level, media type, location)
\item[L]list logical attributes, such as FATMEN file format
(ZEBRA exchange etc.)
\item[M]list media attributes, such as VSN, VID, file sequence number for tape
files, host type and operating system for disk files.
\item[N]lists dataset name on disk/tape of this file
\item[O]list owner, node and job of creator etc.
\item[P]list physical attributes, such as record format etc.
\item[Q]obtain volume information from Tape Management System (TMS)
if the entry corresponds to a tape file, and if the TMS
option is installed.
\item[R]display where the data Reside. 
\begin{DLtt}{1234567890}
\item[Disk files]Displays if the file is accessible and the access method, if
known. (e.g. local disk, NFS, AFS, DFS etc.)
\item[Tape files]Displays if the associated volume is in an active library,
i.e. not archived, whether it is staged, and whether a device of the appropriate
type exists on the local node or is served.
\end{DLtt}
\item[S]lists security details of this file (protection)
\item[T]list date and time of creation, last access etc.
\item[U]list user words.
\item[X]display only one entry per generic name (implies I)
\item[W]list generic names across the page (default is one name per line)
\item[Z]dump ZEBRA bank with DZSHOW.
\end{DLtt}
\end{DLtt}
Use the \Rind{LS} command to display the contents of a directory
or display information on a given file within the current or specified
directory.

If the generic name begins with a \$ then it is assumed to be
an environmental variable and is translated using the {\tt CERNLIB}
routine \Rind{GETENVF}. 

If the generic name begins with a \% then it is assumed to be 
a nick name defined in a names file. If no names file is specified
then a default names file is used. This names file resides in
the same directory or on the same minidisk as the current
FATMEN catalogue and is named FMgroup.NAMES. e.g. for the
group {\tt L3} the name would be {\tt fml3.names}.

Note that the filename specified may include wildcards, such as
\Lit{ls t*},
to list all files starting with the letter
\Lit{t} or \Lit{ls \%\%\%}
to list all files with three character filenames.
The syntax (\Lit{mm:nn}) may be used in the filename to specify ranges,
such as \Lit{P(3:45)}. See on page~\pageref{FMATCH} for more details.

If the filename begins with a \%, then the file name is first expanded
using the \Rind{FMNICK} routine. 

If the filename begins with a \$, then it is treated as an environmental
variable and translated using \Rind{GETENVF}.

\begin{XMPt}{Examples of using the LS command}

FM> ls -w

Directory ://FNAL/CDF/FATMEN/8MM

R19570AB R19570AC R19573AB R19573AC R19573AD R19573AE R19573AF R19573AG 
R19573AH R19573AI R19575AB R19575AC R19575AD R19575AE R19575AF R19575AG 
R19575AH R19575AI R19576AB R19576AC R19576AD R19579AA R19579AB R19579AC 
R19579AD R19579AE R19580AA R19580AB R19581AA R19581AC R19581AD R19581AE 
R19581AF R19581AG R19581AH R19581AI R19581AK R19581AM R19581AO R19581AP 
R19583AA R19583AB R19583AC R19587AB R19587AC R19599AA R19599AB R19599AC 
R19599AD R19602AA R19602AB R19603AA R19604AA R19604AB R19604AC R19604AD 
R19604AE R19604AF R19604AG R19604AH R19604AI R19604AJ R19604AK R19604AL 
R19604AM R19604AN R19604AO R19604AP R19604AQ R19604AR R19604AU R19604AZ 
R19614AD R19570AA 
Total of     74 files in      1 directories

FM> ls r19(570:575)* -iw 

Directory ://FNAL/CDF/FATMEN/8MM

R19570AA R19570AB R19570AC R19573AB R19573AC R19573AD R19573AE R19573AF 
R19573AG R19573AH R19573AI R19575AB R19575AC R19575AD R19575AE R19575AF 
R19575AG R19575AH R19575AI 
Total of     19 files in      1 directories

FM> ls r19(570:575)ae -kmop

Directory: //FNAL/CDF/FATMEN/8MM


Generic filename: R19573AE
Copy level:  0 Media type: 4 Location code:      1 File serial number:      8
VSN: CC2010 VID: CC2010 FSEQ:    7
Created by:  CDF_FATM ACCT: E741CD_C on node: FNALE    by job: CDF_FATM
RECFM:  F    LRECL:  2048 BLKSIZE: 43200 Filesize:  2000 Use count:     0

Generic filename: R19575AE
Copy level:  0 Media type: 4 Location code:      1 File serial number:     16
VSN: CC2010 VID: CC2010 FSEQ:   15
Created by:  CDF_FATM ACCT: E741CD_C on node: FNALE    by job: CDF_FATM
RECFM:  F    LRECL:  2048 BLKSIZE: 43200 Filesize:  2000 Use count:     0

Files:    2
Total of      2 files in      1 directories
FM> 
 
 

\end{XMPt}
\Sbox{MAKE}{MAKE}{GNAME LOGNAM}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name of the file to be accessed
\item[LOGNAM]Logical name (DDNAME, link etc.) to be associated with
the file. A numeric value is converted according to the FORTRAN
conventions on the local machine, unless the file is to be 
accessed using a special package.
\begin{DLtt}{1234567890}
\item[VM/CMS]nn is converted to FTnnF001. If the logical format is EP,
then it is converted to IOFILEnn.
\item[MVS]nn is converted to FTnnF001. If the logical format is EP,
then it is converted to IOFILEnn.
\item[VAX/VMS]nn is converted to FOR0nn.
\item[Unix]nn is converted to fort.nn
\end{DLtt}
\end{DLtt}
The \Rind{MAKE} command is similar to the \Rind{FIND} command,
except that it is for write access.
\Sbox{MEDIA}{MEDIA}{MEDIA [TYPE] [MODEL] [SIZE] [DENS] [MNTP] [LABEL]}
\begin{DLtt}{1234567890}
\item[MEDIA]FATMEN media type. This is an integer as used in the
FATMEN keys (MKMTFA) and bank (MMTPFA). 
\item[TYPE]device type. This is the physical device type, e.g. 3480,
3420 etc. 
\item[MODEL]generic device type. This may be the same as the physical
device type. However, on many systems it differs. For example, at CERN
the generic device type for \Lit{3480} is \Lit{CT1}.
This is the resource that is required to access a volume of the
physical type \Lit{TYPE}.
\item[SIZE]capacity in MB
\item[DENS]density      
\item[MNTP]mount-type (M/R)
\item[LABEL]label-type (SL/AL/NL)
\end{DLtt}
\par
Use the \Rind{MEDIA} command to set or list attributes of a given
type of media.
\begin{XMPt}{Example of using the \protect\Rind{MEDIA} command}

MEDIA 2 3480 CT1 200 38K M SL

would set the attributes of FATMEN media type 2 to

model:               3480
generic device type: CT1 (used on STAGE/SETUP requests)
capacity:            200 MB (maximum size on STAGE command)
density:             38K
mount type:          M
label  :             SL

MEDIA with no arguments lists the current settings

MEDIA 3 lists the settings for media type 3
\end{XMPt}

\Sbox{MKDIR}{MKDIR}{PATH}
\begin{DLtt}{1234567890}
\item[PATH]Path name of the directory to be created.
\end{DLtt}
Use the \Rind{MKDIR} command to create a directory or directory tree.
\Sbox{MODIFY}{MODIFY}{GNAME [KSN] [LOCCOD] [DATREP] [MEDTYP] 
[FFORM] [RECFM] [RECL] [BLOCK] [FSIZE] [COMM]}
\begin{DLtt}{1234567890}
\item[FROM]Original file
\item[TO]Target file
\item[KSN]Key serial number to identify a particular source file if
there is more than one entry for the specified generic name
\item[LOCCOD]The location code for the output entry. 
\item[DATREP]The data representation of the output entry.
\item[MEDTYP]The media type of the output entry.
\item[FFORM]File format (FZ, FA, FX, RZ, EP, UN, AS)
\item[RECFM]record format (e.g. FB, VBS)
\item[LRECL]record length (in words)
\item[BLOCK]block length (in words)
\item[FSIZE]file size (in megabytes)
\item[COMM]Comment string 
\end{DLtt}

\Sbox{MV}{MV}{FROM TO [KSN] [LOCCOD DATREP MEDTYP VSN VID FSEQ DSN HOST}
\begin{DLtt}{1234567890}
\item[FROM]Original file
\item[TO]Target file
\item[KSN]Key serial number to identify a particular source file if
there is more than one entry for the specified generic name
\item[LOCCOD]The location code for the output entry. 
If not specified, the location code of the input dataset will be used.
\item[DATREP]The data representation of the output entry.
If not specified, the data representation of the input dataset will be used.
\item[MEDTYP]The media type of the output entry.
If not specified, the media type of the input dataset will be used.
\item[VSN]The VSN of the output entry.
\item[VID]The VID of the output entry.
\item[FSEQ]The file sequence number of the output entry.
\item[DSN]The dataset name of the output entry.
\item[HOST]The hostname of the output entry.
\end{DLtt}
Use the \Rind{MV} command to ``move'' or rename a file.
\Sbox{NICK}{NICK}{NICKNAME CHFILE CHOPT}
\begin{DLtt}{1234567890}
\item[NICKNAME]
\item[CHFILE]
\item[CHOPT]
\end{DLtt}
Use the NICK command to display the generic name and description
corresponding to the specified nickname. See the description
of the \Rind{FMNICK} routine for further information.

\Sbox{PWD}{PWD}{ }
Use the PWD command to print the current (working) directory.
\Sbox{QUIT}{QUIT}{ }
Use the QUIT command to leave the FATMEN shell. Any outstanding
catalogue updates will be purged. See also the description
of the \Rind{EXIT} command.
\Sbox{RM}{RM}{GNAME [KSN] [DSN] [HOST] [VID] [USER] [POOL] [PROT] [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]File to be removed
\item[KSN]Key serial number. Must be specified if more than one
entry exists for the given generic name and the 
\Lit{A} option is not given. 
\item[DSN]Fileid/DSN. Only entries with the specified fileid will be 
deleted.
\item[HOST]Hostname. Only entries with the specified hostname will be
deleted.
\item[VID]VID. Only entries with the specified VID will be
deleted.  
\item[USER]Username. Only entries with the specified username will be
deleted.
\item[POOL]Pool into which the tape volume corresponding to the
specified entry is returned to, if option F is given.
If not specified, a pool name gg\_FAT1 will be used, e.g. \Lit{WS\_FAT1}.
\item[PROT]Protection group to be applied to the freed volume.
The protection group will be set as follows:
\begin{DLtt}{12}
\item[ ]Unchanged
\item[G]Set to the value specified by \Lit{PROT} or \Lit{*None}
if no value is specified.
\item[GP]Set to the value specified by \Lit{PROT} or the value
of \Lit{POOL} if no value of \Lit{PROT} is specified.
\end{DLtt}
\item[CHOPT]Options
\begin{DLtt}{12}
\item[A]remove all occurances of this generic name
\item[E]erase disk file
\item[I]prompt before removing each matching entry
\item[F]free tape associated with specified entry
\item[G]Set protection group 
\item[P]when used with option F, allows privileged TMS 
user to free anyones tapes (within a group)
\item[U]'unlock' or write-enable tape
\item[D]delete TMS tag
\item[B]binary TMS tag
\item[T]text TMS tag
\end{DLtt}
\end{DLtt}
Use the \Rind{RM} command to remove a file from the catalogue. When multiple
entries of the same generic name exist, the key serial number, as
displayed by \Rind{LS} using the K option, should be specified.
Alternatively, one can select which entry should be removed by
specifying the DSN, HOST, VID and/or USER. Any of these fields
may contain wild-cards. 
\begin{XMPt}{Example of using the \protect\Rind{RM} command}
rm run123 -a vid=i* | Remove all entries for run123 for which
                    | the VID begins with an I.
\end{XMPt}

\begin{XMPt}{Example of freeing a tape volume}
rm //cern/l3/prod/data/pdreqq/cc00ws46 90 ! ! ! ! xvprod ! fugp
\end{XMPt}
\index{Free}
\index{TMS}
\index{POOL}
\index{Freeing a tape}
\index{Returning a tape to a TMS pool}
\index{FATMEN pools}

The following example shows how an entry may be removed from the
catalogue, and the corresponding tape freed at the TMS level.

In this example, the tape volume associated with the specified catalogue
entry is write enabled (option U), freed (option F). Option G specifies
that the protection group for the volume is to be set. By default, the
protection group has the same name as the TMS pool into which the
volume is returned. Option P allows suitably privileged users to
free any tapes within their group.

The command is repeated twice: the first form is currently required
if issued from a KUMAC file as named parameters are not currently
supported in macros. The second form may be used if the command is
entered interactively.

\begin{XMPt}{Removing a catalogue entry and freeing a tape volume}
RM //CERN/L3/PROD/DATA/PDREQQ/CC00WS46 90 ! ! ! ! XVPROD ! FUGP


RM //CERN/L3/PROD/DATA/PDREQQ/CC00WS46 ksn=90 pool=XVPROD -FUGP


\end{XMPt}

\Sbox{RMDIR}{RMDIR}{PATH}
\begin{DLtt}{1234567890}
\item[PATH]Name of the directory to be removed. The directory must
contain no files and no subdirectories.
\end{DLtt}
Use the \Rind{RMDIR} command to remove an {\bf empty} 
directory from the catalogue.
 
\Sbox{RMTREE}{RMTREE}{PATH}
\begin{DLtt}{1234567890}
\item[PATH]Name of the directory tree to be removed. The tree must
contain no files.
\end{DLtt}
Use the \Rind{RMTREE} command to remove a complete directory tree from the catalogue.
If any files are found in the directory tree, the command will be refused.

\Sbox{RMLN}{RMLN}{CHLINK [LUN] [CHFILE] [CHOPT]}
\begin{DLtt}{1234567}
\item[CHLINK]Character variable specifying the path to be searched
for dangling links, containing wild-cards as necessary
\item[LUN]Unit number on which the file {\tt CHFILE} is written,
with option {\tt F}
\item[CHFILE]
Character variable specifying the name of the file to be written,
with option {\tt F}.
\item[CHOPT]
Character variable specifying the required options.
\begin{DLtt}{12}
\item[P]Print the names of dangling links
\item[D]Write the names of dangling links in the form {\tt rm generic-name ksn}
\item[R]Remote dangling links
\item[F]Redirect output to the file {\tt CHFILE} on the unit {\tt LUN}
\end{DLtt}
\end{DLtt}
\Sbox{SEARCH}{SEARCH}{GNAME [DSN] [HOST] [VID] [USER] [OUTPUT] [NMATCH] 
[CREATED] [CATALOGED] [ACCESSED] [UFORM] [COMMENT] [OUTPUT] [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name specifying the files to be searched
\item[DSN]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[HOST]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[VID]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[USER]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[NMATCH]Instruct search to stop after \Lit{NMATCH} matches. If
not specified, the entire catalogue will be searched.
\item[CREATED]date range
\item[CATALOGED]date range
\item[ACCESSED]date range
\item[UFORM]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[COMMENT]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[OUTPUT]Output filename. If not specified the output will 
be sent to the terminal.
\item[CHOPT]Options
\begin{DLtt}{12}
\item[A]list all attributes, except DZSHOW (option Z).
\item[B]brief (80) column listing
\item[C]display comment field associated with file
\item[D]to be used to generate a KUMAC file to remove (delete) the entry
\item[E]extended (132) column listing
\item[F]list file attributes, such as start/end record and block
\item[G]list the full generic name of each file
\item[H]write header line]useful in the case of output redirection 
\item[I]sort generic names in Increasing order
\item[J]Just show entries that are accessible
\item[K]list keys associated with this file (copy level, media type, location)
\item[L]list logical attributes, such as FATMEN file format
(ZEBRA exchange etc.)
\item[M]list media attributes, such as VSN, VID, file sequence number for tape
files, host type and operating system for disk files.
\item[N]lists dataset name on disk/tape of this file
\item[O]list owner, node and job of creator etc.
\item[P]list physical attributes, such as record format etc.
\item[Q]obtain volume information from Tape Management System (TMS)
if the entry corresponds to a tape file, and if the TMS
option is installed.
\item[R]display where the data Reside. 
\begin{DLtt}{1234567890}
\item[Disk files]Displays if the file is accessible and the access method, if
known. (e.g. local disk, NFS, AFS, DFS etc.)
\item[Tape files]Displays if the associated volume is in an active library,
i.e. not archived, whether it is staged, and whether a device of the appropriate
type exists on the local node or is served.
\end{DLtt}
\item[S]lists security details of this file (protection)
\item[T]list date and time of creation, last access etc.
\item[U]list user words.
\item[X]display only one entry per generic name (implies I)
\item[W]list generic names across the page (default is one name per line)
\item[Z]dump ZEBRA bank with DZSHOW.
\end{DLtt}
\end{DLtt}
Use the search command to print the generic names of files which
match the specified criteria. Character fields may include the
\Lit{*} or \Lit{\%} wild cards.
e.g. \Lit{SEARCH * VID=I* \#} search current working directory for entries
\Lit{\#} with VID's beginning with I.

Options are passed to \Rind{FMSHOW}.

If \Lit{NMATCH} is non-zero, \Rind{SEARCH} will stop after 
\Lit{NMATCH} matches have been found.

Set the loglevel to \Lit{<0} to stop the printing of the names of
files and directories searched.

Date and time ranges may be given, as in the following example:
which searches for files in the current directory that have been
accessed between 31st January, 1991 and midday on 30th June 1991

To make selections on the user words, use the \Rind{SETUSERWORDS} command.
This allows you to set values or ranges for each of the 10 user words.
Once these values have been set, \Rind{SEARCH} will only display entries
where the userwords match these values or ranges.
Currently, only 0 or positive integers are accepted as values.
\begin{XMP}
SEARCH * accessed=910131-910630.1200
\end{XMP}
The format of the date and time fields is 
\Lit{from\_date\_and\_time-to\_date\_and\_time}.

Dates and times are specified as \Lit{YYMMDD.HHMM}.
 
\begin{XMPt}{Examples of valid date and time ranges}

910125.1230-910227.1630   # Explicit range

910125-910227             # Time fields default to 0000

910125-                   # To date and time default to NOW

-910125                   # From date and time default to 000000.0000


ACCESSED=-910125          # gives files accessed prior to 910125

ACCESSED=910125           # gives files accessed on or after 910125 

ACCESSED=910125-910127    # gives files accessed on 910125 or 910126.
\end{XMPt}

An example of a search command is given below. This example
looks file files KS09, KS10, KS11 in all subdirectories
matching \Lit{88\%/MIN*} for files where the host name is CERNVM, the
VID starts with KR and the username is HAG. The output is sent
to the screen and the LS options M (media details), G (generic name)
and O (owner details) are used.
\begin{XMPt}{Example of \protect\Rind{SEARCH} command}
 FM > sea 88%/min*/ks(09:11) host=cernvm vid=kr* user=hag -mgo output=tty
 Searching directory //CERN/NA31/883/MIN8
 
 //CERN/NA31/883/MIN8/KS09
 VSN: KR5822 VID: KR5822 FSEQ:    1
 Created by:  HAG      ACCT: HAG$VH   on node: CERNVM   by job: HAG
 
 //CERN/NA31/883/MIN8/KS10
 VSN: KR5823 VID: KR5823 FSEQ:    1
 Created by:  HAG      ACCT: HAG$VH   on node: CERNVM   by job: HAG
 
 //CERN/NA31/883/MIN8/KS11
 VSN: KR5832 VID: KR5832 FSEQ:    1
 Created by:  HAG      ACCT: HAG$VH   on node: CERNVM   by job: HAG
 Searching directory //CERN/NA31/885/MIN8
 Searching directory //CERN/NA31/886/MIN8
 
 //CERN/NA31/886/MIN8/KS09
 VSN: KR5847 VID: KR5847 FSEQ:    1
 Created by:  HAG      ACCT: HAG$VH   on node: CERNVM   by job: HAG
 
 //CERN/NA31/886/MIN8/KS10
 VSN: KR5849 VID: KR5849 FSEQ:    1
 Created by:  HAG      ACCT: HAG$VH   on node: CERNVM   by job: HAG
 
 //CERN/NA31/886/MIN8/KS11
 VSN: KR5851 VID: KR5851 FSEQ:    1
 Created by:  HAG      ACCT: HAG$VH   on node: CERNVM   by job: HAG
 
 Matches:    6
 FM>
\end{XMPt}
 
\Sbox{SCAN}{SCAN}{GNAME [NLEVELS] [DSN] [HOST] [VID] [USER] [OUTPUT] [NMATCH] 
[CREATED] [CATALOGED] [ACCESSED] [UFORM] [COMMENT] [OUTPUT] [STRING] [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name specifying the files to be searched
\item[NLEVELS]Number of levels down to be scanned
\item[DSN]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[HOST]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[VID]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[USER]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[NMATCH]Instruct search to stop after \Lit{NMATCH} matches. If
not specified, the entire catalogue will be searched.
\item[CREATED]date range
\item[CATALOGED]date range
\item[ACCESSED]date range
\item[UFORM]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[COMMENT]String containing wild cards, if required. If not specified,
no match is made on this field.
\item[OUTPUT]Output filename. If not specified the output will 
be sent to the terminal.
\item[STRING]String to be appended to the {\tt RM} command, in case
of option D.
\item[CHOPT]Options
\begin{DLtt}{12}
\item[A]list all attributes, except DZSHOW (option Z).
\item[B]brief (80) column listing
\item[C]display comment field associated with file
\item[D]to be used to generate a KUMAC file to remove (delete) the entry
In this case files within a directory will be scanned backwards.
\item[E]extended (132) column listing
\item[F]list file attributes, such as start/end record and block
\item[G]list the full generic name of each file
\item[H]write header line]useful in the case of output redirection 
\item[I]sort generic names in Increasing order
\item[J]Just show entries that are accessible
\item[K]list keys associated with this file (copy level, media type, location)
\item[L]list logical attributes, such as FATMEN file format
(ZEBRA exchange etc.)
\item[M]list media attributes, such as VSN, VID, file sequence number for tape
files, host type and operating system for disk files.
\item[N]lists dataset name on disk/tape of this file
\item[O]list owner, node and job of creator etc.
\item[P]list physical attributes, such as record format etc.
\item[Q]obtain volume information from Tape Management System (TMS)
if the entry corresponds to a tape file, and if the TMS
option is installed.
\item[R]display where the data Reside. 
\begin{DLtt}{1234567890}
\item[Disk files]Displays if the file is accessible and the access method, if
known. (e.g. local disk, NFS, AFS, DFS etc.)
\item[Tape files]Displays if the associated volume is in an active library,
i.e. not archived, whether it is staged, and whether a device of the appropriate
type exists on the local node or is served.
\end{DLtt}
\item[S]lists security details of this file (protection)
\item[T]list date and time of creation, last access etc.
\item[U]list user words.
\item[X]display only one entry per generic name (implies I)
\item[W]list generic names across the page (default is one name per line)
\item[Z]dump ZEBRA bank with DZSHOW.
\end{DLtt}
\end{DLtt}
Use the scan command to print the generic names of files which
match the specified criteria. Character fields may include the
\Lit{*} or \Lit{\%} wild cards.
e.g. \Lit{SEARCH * VID=I* \#} search current working directory for entries
\Lit{\#} with VID's beginning with I.

Options are passed to \Rind{FMSHOW}.

If \Lit{NMATCH} is non-zero, \Rind{SCAN} will stop after 
\Lit{NMATCH} matches have been found.

Set the loglevel to \Lit{<0} to stop the printing of the names of
files and directories searched.

Date and time ranges may be given, as in the following example:
which searches for files in the current directory that have been
accessed between 31st January, 1991 and midday on 30th June 1991

To make selections on the user words, use the \Rind{SETUSERWORDS} command.
This allows you to set values or ranges for each of the 10 user words.
Once these values have been set, \Rind{SEARCH} will only display entries
where the userwords match these values or ranges.
Currently, only 0 or positive integers are accepted as values.
\begin{XMP}
SCAN * accessed=910131-910630.1200
\end{XMP}
The format of the date and time fields is 
\Lit{from\_date\_and\_time-to\_date\_and\_time}.

Dates and times are specified as \Lit{YYMMDD.HHMM}.
 
\begin{XMPt}{Examples of valid date and time ranges}

910125.1230-910227.1630   # Explicit range

910125-910227             # Time fields default to 0000

910125-                   # To date and time default to NOW

-910125                   # From date and time default to 000000.0000


ACCESSED=-910125          # gives files accessed prior to 910125

ACCESSED=910125           # gives files accessed on or after 910125 

ACCESSED=910125-910127    # gives files accessed on 910125 or 910126.
\end{XMPt}

\Sbox{SETCOPYLEVEL}{SET/COPYLEVEL}{[RANGE]}
\begin{DLtt}{1234567890}
\item[RANGE]range of copy levels codes. If a range or list is not specified,
a value of -1 is used, indicating that no check on the copy level
should be made.
\end{DLtt}
Use the \Rind{SETCOPYLEVEL} command to set the copylevel, or range of copylevels
that will be applied to subsequent catalogue searches.

\begin{XMPt}{Example of valid copy level ranges}
FM>set/copy 1,3,5-7 | Set copy levels 1,3 and 5 to 7 inclusive

FM>set/copy -1      | No check on copy level will be made
\end{XMPt}

\Sbox{SETDATAREP}{SET/DATAREP}{[RANGE]}
\begin{DLtt}{1234567890}
\item[RANGE]range of data representation codes. 
If a range or list is not specified,
a value of -1 is used, indicating that no check on the data representation
code should be made.
\end{DLtt}
Use the \Rind{SETDATAREP} command to set the data representation, 
or range of data representation values
that will be applied to subsequent catalogue searches.

\Sbox{SETDESTINATION}{SET/DESTINATION}{DESTINATION-SITE}
\begin{DLtt}{1234567890}
\item[DESTINATION]Destination site for {\tt CHEOPS} transfer
\end{DLtt}
Use the \Rind{SETDESTINATION} command to set the name of the
destination site for {\tt CHEOPS} transfer. The current list
of destination sites is

\begin{DLtt}{1234567}
\item[CERN]
\item[HELSINKI]
\item[LISBON]
\item[SARDINIA]
\item[ATHENS]
\end{DLtt}

If a name that is not in this list is specified, then
a warning message will be issued.


\Sbox{SETLOCATION}{SET/LOCATION}{[RANGE]}

\begin{DLtt}{1234567890}
\item[RANGE]range of location codes. If a range or list is not specified,
a value of \Lit{-1} is used, indicating that no check on the location code
should be made.
\end{DLtt}

Use the \Rind{SETLOCATION} command to set the location code, or range of 
location codes
that will be applied to subsequent catalogue searches.

\begin{XMPt}{Example of valid location code ranges}
FM>set/loc 1,3,5-7 | Set location codes 1,3 and 5 to 7 inclusive

FM>set/loc -1      | No check on location code will be made
\end{XMPt}

\Sbox{SETLOCCODES}{SET/LOCCODES}{[FILE]}
\begin{DLtt}{1234567890}
\item[FILE] Name of the file containing the location code
            definitions. See the description of the \Rind{FMLCOD}
            routine for an example of the file format.
\end{DLtt}

\Sbox{SETMEDIATYPE}{SET/MEDIATYPE}{[RANGE]}

\begin{DLtt}{1234567890}
\item[RANGE]range of media types. If a range or list is not specified,
a value of -1 is used, indicating that no check on the media type
should be made.
\end{DLtt}

Use the \Rind{SETMEDIATYPE} command to set the media type, or range of media types
that will be applied to subsequent catalogue searches.

\begin{XMPt}{Example of valid media type ranges}
FM>set/media 1,3,5-7 | Set media types 1,3 and 5 to 7 inclusive

FM>set/media -1      | No check on media type will be made
\end{XMPt}

\Sbox{SETSOURCE}{SET/SOURCE}{SOURCE-SITE}
\begin{DLtt}{1234567890}
\item[SOURCE]Source site for {\tt CHEOPS} transfer
\end{DLtt}
Use the \Rind{SETSOURCE} command to set the name of the
source site for {\tt CHEOPS} transfer. The current list
of source sites is

\begin{itemize}
\item CERN
\item HELSINKI
\item LISBON
\item SARDINIA
\item ATHENS
\end{itemize}

If a name that is not in this list is specified, then
a warning message will be issued.


\Sbox{SETUSERWORDS}{SET/USERWORDS}{[UWORD1] [UWORD2] [UWORD3] [UWORD4] 
[UWORD5] [UWORD6] [UWORD7] [UWORD8] [UWORD9] [UWORD10]}
\begin{DLtt}{1234567}
\item[UWORD1] range or value for user word 1 
\item[UWORD2] range or value for user word 2
\item[UWORD3] range or value for user word 3
\item[UWORD4] range or value for user word 4
\item[UWORD5] range or value for user word 5
\item[UWORD6] range or value for user word 6
\item[UWORD7] range or value for user word 7
\item[UWORD8] range or value for user word 8
\item[UWORD9] range or value for user word 9
\item[UWORD10] range or value for user word 10
\end{DLtt}
Use the \Rind{SETUSERWORDS} command to set the values or ranges
for the 10 user words that will be used in subsequent search
commands. Values are 0 or positive integers, ranges are 
delimited by a minus sign. To indicate that no check is to
be made on a given user word, specify -1.

\begin{XMPt}{Example of setting userwords}
FM>set/userwords 0 3-5 77 -1 99
\end{XMPt}

With the above settings, entries must have userword 1 be 0, 
userword 2 must be in the range 3 to 5 inclusive, userword 3
must be 77, no check is made on userword 4 and userword 5 must
be 99. No change is made to the acceptable values for userwords
6 to 10, which are set at initialisation time to \Lit{-1}.

\Sbox{SHOWCOPYLEVEL}{SHOW/COPYLEVEL}{RANGE}

Use the \Rind{SHOWCOPYLEVEL} command to display the list of 
\Lit{COPYLEVEL} codes currently in effect
(see \Rind{SETCOPYLEVEL} command).

\Sbox{SHOWDATAREP}{SHOW/DATAREP}{RANGE}

Use the \Rind{SHOWDATAREP} command to display the list of
\Lit{DATAREP} codes currently in effect
(see \Rind{SETDATAREP} command).

\Sbox{SHOWDESTINATION}{SHOW/DESTINATION}{}

Use the \Rind{SHOWDESTINATION} command to display the current
destination site for {\tt CHEOPS} transfers.

\Sbox{SHOWLOCATION}{SHOW/LOCATION}{RANGE}

Use the \Rind{SHOW LOCATION} command to display the list of 
\Lit{LOCATION} codes currently in effect
(see \Rind{SETLOCATION} command).

\Sbox{SHOWLOCCODES}{SHOW/LOCCODES}{ }
\index{location codes}

Use the \Rind{SHOWLOCCODES} command to display the current
location code definitions, as defined in the {\tt fatmen.loccodes}
file.

\Sbox{SHOWMEDIATYPE}{SHOW/MEDIATYPE}{RANGE}

Use the \Rind{SHOWMEDIATYPE} command to display the list of 
\Lit{MEDIATYPE} codes currently in effect
(see \Rind{SETMEDIATYPE} command).

\Sbox{SHOWSOURCE}{SHOW/SOURCE}{}

Use the \Rind{SHOWSOURCE} command to display the current
source site for {\tt CHEOPS} transfers.

\Sbox{SHOWUSERWORDS}{SHOW/USERWORDS}{ }

Use the \Rind{SHOWUSERWORDS} command to display the list of 
\Lit{USERWORD} values or ranges currently in effect
(see \Rind{SETUSERWORDS} command).

\Sbox{TAG}{TAG}{GNAME [KSN] [TAG] [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name of the entry to be tagged
\item[KSN]Key serial number. If not specified, the default FATMEN
selection will be used.
\item[TAG]Tag
\item[CHOPT]Options
\begin{DLtt}{12}
\item[D]delete the tag
\item[G]get and display the tag
\item[S]set the tag
\item[B]to select the BINARY  tag (stored as CHARACTER*255)
\item[T]to select the TEXT    tag (default)
\item[V]to select the VOLINFO tag 
\end{DLtt}
\end{DLtt}
Use the \Rind{TAG} command to get, set or delete the TMS TAG
associated with the a tape volume that corresponds to
the specified generic name.

\Sbox{TOUCH}{TOUCH}{GNAME [KSN] [CHOPT]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name of the entry to be touched
\item[KSN]Key serial number. If not specified, the default FATMEN
selection will be used.
\item[CHOPT]Options
\begin{DLtt}{12}
\item[O]reset owner, node and job of creator etc.
\item[T]update date and time of last access
\item[U]zero use count
\item[A]set account field
\item[C]clear comment field
\end{DLtt}
\end{DLtt}
Use the \Rind{TOUCH} command to reinsert an existing entry in the catalogue.
If a negative key serial number is given, all matching entries
will be updated.

\Sbox{TREE}{TREE}{[PATH] [NLEVEL] [OUTPUT]}
\begin{DLtt}{1234567890}
\item[PATH]Path name
\item[NLEVEL]number of levels to be displayed
\item[OUTPUT]Output filename. If not specified, the output will 
be displayed on the terminal.
\end{DLtt}
Use the \Rind{TREE} command to draw a directory tree starting at the
specified directory down \Lit{NLEVEL} levels.
\begin{XMPt}{Example of using the \protect\Rind{TREE} command}
FM>pwd
Current working directory = //CERN/L3
FM>tree
 FMTREK. directory tree structure below //CERN/L3 down          99  levels      
          /DRE
          /JUNK
          /CDREMM
          /DREMM 
          /PROD
               /DATA
                    /LDRE
                    /SDSUJK
                    /SDREJK
                    /SDSUCR
                    /SDSUBG
                    /SDRECR
                    /SDREBG
                    /SDREQQ
                    /SDSUQQ
                    /SDRESG
                    /SDSUTK
                    /SDSUSG
                    /SDRETK
                    /SDRETT
                    /SDSUTT
                    /SDREMM
                    /SDSUMM
                    /SDSUMX
                    /SDREMX
                    /SDREEM
                    /SDSUEM
                    /SDSUEE
                    /SDRENP
                    /SDREEE
                    /SDSUNP
                    /MDSU
                    /PDRE
                    /HESMRY
                    /MDRE
                    /SDREHG
                    /SDSUBH
                    /SDREGG
                    /SDREBH
                    /SDSUHG
                    /SDSUGG
          /LEBRUN
          /TEST4

          44  subdirectories found
FM>
\end{XMPt}

\Sbox{UNLOCK}{UNLOCK}{GENAM [KSN] [CHOPT]}
\begin{XMP}
\item[GENAM]generic name
\item[KSN]Key serial number. If not specified, the default FATMEN
selection will be used.
\item[CHOPT]Options
\end{XMP}

Use the \Rind{UNLOCK} command to enable WRITE access to the tape on which               
the file specified resides. If a negative key serial number is given,           
all entries for the specified generic name will be unlocked.                    

\Sbox{UPDATE}{UPDATE}{MAX NGROUP IFLAG}

\begin{DLtt}{1234567890}
\item[MAX]Maximum number of updates. If not specified, a default value
of 999 is used.
\item[NGROUP]Number of updates to be grouped together. The default
is to send each update individually. This value is ignored except
on \Lit{VM/CMS} systems
\item[IFLAG]Flag controlling the option required
\begin{DLtt}{12}
\item[-1]Reset to defaults
\item[0]Send any outstanding updates
\item[1]Purge any outstanding updates
\end{DLtt}
\end{DLtt}

Use the \Rind{UPDATE} command to control the updating mode of the FATMEN
package. (See on Page~\pageref{FMUPDT} for details).

{\bf N.B. if updates are grouped together, care must be taken
to leave the FATMEN shell with the exit command}.

\Sbox{VERSION}{VERSION}{ }
Use the \Rind{VERSION} command to display the version of the FATMEN package.
This information is also displayed at initialisation time.

\Sbox{VIEW}{VIEW}{GNAME [KSN]}
\begin{DLtt}{1234567890}
\item[GNAME]Generic name of the file to be editted.
\item[KSN]Key serial number. If not specified, the default
FATMEN selection will be used.
\end{DLtt}
Use the \Rind{VIEW} command to edit a local disk file.
This command will be extended to support tape and remote files.

\Sbox{ZOOM}{ZOOM}{PATH}
\begin{DLtt}{1234567890}
\item[PATH]Path name to be followed
\end{DLtt}
Use the \Rind{ZOOM} command to move to the first directory matching
the specified path name that contains no subdirectories and
one or more files.
\begin{XMPt}{Example of the ZOOM command}
Current Working Directory = //CERN/DELPHI
FM> zoom
Current Working Directory = //CERN/DELPHI/P01_ALLD/CDST/PHYS/Y90V03/E093.3/L0312
FMZOOM. files:          30

...

Current Working Directory = //CERN/OPAL
FM> ld
List of subdirectories...
//CERN/OPAL/PLAY
//CERN/OPAL/PROD
//CERN/OPAL/EVKI
//CERN/OPAL/SIMD
//CERN/OPAL/MDST
//CERN/OPAL/STEST
//CERN/OPAL/RAWD
//CERN/OPAL/DDST
//CERN/OPAL/JAMIE
Total of          9 subdirectories of which          9 match
FM> zoom prod/*/p1*
Current Working Directory = //CERN/OPAL/PROD/PASS3/FILT/P1R1033L039
FMZOOM. files:           4
\end{XMPt}

\Filename{H2Fatmenuserguide-using-command-line-interface}
\Section{4cm}{Using the command line interface}
\par
The command line interface is started by typing FM at the command
level.
\index{starting the FATMEN shell}
\index{shell}
\index{command line interface}
\index{CLI}
If a KUIP macro
named FATMEN KUMAC is found, this will be executed.
It is normally used
used to initialise FATMEN, and set the current default directory,
if required.
For example, the following macro could be used by
a member of ALEPH:
\begin{XMP}
INIT ALEPH
\end{XMP}

An example of starting a session using a FATMEN KUMAC for the throng
CNDIV is given below. Once the session has been started, commands
such as CD and MKDIR can be issued, as shown in the example.

\begin{XMPt}{Starting up FATMEN on VM/CMS and issuing a few commands}
\underline{TYPE FATMEN KUMAC}
INIT CNDIV     | Name of DD throng
\underline{fm}                  | Enter FATMEN
FMINIT.  Initialisation of FATMEN package
         This version created on      891109  at        1049
Linked to FMCNDIV             mode W
FAOPEN : for FARZ on Unit    1 opened File CERN FATRZ
Current Working Directory = //CERN/CNDIV
\underline{CD GOOSSENS}         | Go to user's top directory
Current Working Directory = //CERN/CNDIV/GOOSSENS
\underline{MKDIR DCF}           | Make the DCF subdirectory
FM>
\end{XMPt}

At this point a message is sent to the FATMEN
service machine and since the actual creation of the subdirectory
occurs asynchronously, one should wait a certain time before entering
further commands which would use the sub-directory just created.
\par
Although entries may be made by specifying the full pathname, it
is good practice to first create the desired directory structure to
avoid warning messages from internal ZEBRA RZ routines.
In fact new experiments are strongly recommended to adopt a convention
for file and directory names, and to create their directory tree before
cataloging files in the FATMEN system.
 
\Filename{H2Fatmenuserguide-using-kuip-macros}
\Section{8cm}{Using KUIP macros with FATMEN CLI}
\index{KUIP}

KUIP macros may be used to execute a whole sequence of commands,
e.g. entering data into {\bf pre-existing}
directories (created as shown above).

\begin{XMPt}{The KUIP macro FATEX1 KUMAC containing FATMEN commands}
cd GOOSSENS/DCF/R3             | Go to target directory (DCF Release 3)
*   Enter information about tape MG2325 with its four files
add/tape MG2325 MG2325 1 Prodid file1 VMF 0 CERNVM 'DCF Product idendification'
add/tape MG2325 MG2325 2 MEMO   file2 VMF 0 CERNVM 'Memo to users'
add/tape MG2325 MG2325 3 EXECS  file3 VMF 0 CERNVM 'Installation execs'
add/tape MG2325 MG2325 4 Binary file4 VMF 0 CERNVM 'TEXT files and verification'
cd \bs \bs SMFF/R1         | Reset target directory (SMFF Release 1)
*   Enter information about tapes MG2201 and MG2309 with each one file
add/tape MG2201 MG2201 1 PTF_M5 file1 VMF 0 CERNVM 'SMFF PTF Mod-level 5'
add/tape MG2309 MG2309 1 PTF_M6 file1 VMF 0 CERNVM 'SMFF PTF Mod-level 6'
cd \bs R3                    | Next SMFF subdirectory
*   Enter information about tape MG2401 with one file   (SMFF Release 3)
add/tape MG2401 MG2401 1 PTF_M2 file1 VMF 0 CERNVM 'SMFF PTF Mod-level 2'
\end{XMPt}

The effect of running the KUIP macro file shown above is shown below:

\begin{XMPt}{Running a KUIP macro containing FATMEN commands}
FM> \underline{TRACE ON}           | Set trace to see what is happening
FM> \underline{EXE FATEX1}         | Execute KUIP macro FATEX1
>>> trace on
>>> cd GOOSSENS/DCF/R3
Current Working Directory = //CERN/CNDIV/GOOSSENS/DCF/R3
>>> add/tape IC2325 IC2325 1 Prodid file1 VMF 0 CERNVM 'DCF Product
idendification'
//CERN/CNDIV/GOOSSENS/DCF/R3/PRODID
PUN FILE 0033 SENT TO   FMCNDIV RDR AS  0050 RECS 0009 CPY  001 A NOHOLD NOKEEP
FMFZO - Your update has been sent to the server
>>> add/tape IC2325 IC2325 2 MEMO   file2 VMF 0 CERNVM 'Memo to users'
//CERN/CNDIV/GOOSSENS/DCF/R3/MEMO
PUN FILE 0034 SENT TO   FMCNDIV RDR AS  0051 RECS 0008 CPY  001 A NOHOLD NOKEEP
FMFZO - Your update has been sent to the server
>>> add/tape IC2325 IC2325 3 EXECS  file3 VMF 0 CERNVM 'Installation execs'
//CERN/CNDIV/GOOSSENS/DCF/R3/EXECS
PUN FILE 0035 SENT TO   FMCNDIV RDR AS  0052 RECS 0008 CPY  001 A NOHOLD NOKEEP
FMFZO - Your update has been sent to the server
>>> add/tape IC2325 IC2325 4 Binary file4 VMF 0 CERNVM 'TEXT files and
verification'
//CERN/CNDIV/GOOSSENS/DCF/R3/BINARY
PUN FILE 0036 SENT TO   FMCNDIV RDR AS  0053 RECS 0009 CPY  001 A NOHOLD NOKEEP
FMFZO - Your update has been sent to the server
>>> cd \\SMFF/R1
Current Working Directory = //CERN/CNDIV/GOOSSENS/SMFF/R1
>>> add/tape IC2201 IC2201 1 PTF\_M5 file1 VMF 0 CERNVM 'SMFF PTF Mod-level 5'
//CERN/CNDIV/GOOSSENS/SMFF/R1/PTF\_M5
PUN FILE 0037 SENT TO   FMCNDIV RDR AS  0054 RECS 0009 CPY  001 A NOHOLD NOKEEP
FMFZO - Your update has been sent to the server
>>> add/tape IC2309 IC2309 1 PTF\_M6 file1 VMF 0 CERNVM 'SMFF PTF Mod-level 6'
//CERN/CNDIV/GOOSSENS/SMFF/R1/PTF\_M6
PUN FILE 0038 SENT TO   FMCNDIV RDR AS  0055 RECS 0009 CPY  001 A NOHOLD NOKEEP
FMFZO - Your update has been sent to the server
>>> cd \bs R3
Current Working Directory = //CERN/CNDIV/GOOSSENS/SMFF/R3
>>> add/tape IC2401 IC2401 1 PTF_M2 file1 VMF 0 CERNVM 'SMFF PTF Mod-level 2'
//CERN/CNDIV/GOOSSENS/SMFF/R3/PTF_M2
PUN FILE 0039 SENT TO   FMCNDIV RDR AS  0056 RECS 0009 CPY  001 A NOHOLD NOKEEP
FMFZO - Your update has been sent to the server
FM>
\end{XMPt}

\Subsection{4cm}{Continuation lines within KUIP macros}
\index{continuation lines}

If a command does not fit completely in one line it can be
wrapped on the next line(s). If the last character of a line is
an underscore that line will be logically joined to the next
one (excluding the underscore obviously). The next line may
have also an underscore.
The resulting full command line is however limited to a maximum of 255
characters.

\begin{XMPt}{A FATMEN KUMAC using continuation lines}
CD //CERN/CHARM2/TEST/DST1/ELEC/HO20/NOM/E02
add/tape NH0391 NH0391 1  NOSC FILE1  EP 0 CERNVM _
'(11513) 4001 4002 4003 4004'
CD //CERN/CHARM2/TEST/DST1/ELEC/HO20/NOM/E02.5
add/tape NH0391 NH0391 2  NOSC FILE2  EP 0 CERNVM _
'(8841)  4005 4006'
CD //CERN/CHARM2/TEST/DST1/ELEC/HO20/NOM/E03
add/tape NH0392 NH0392 1  NOSC FILE1  EP 0 CERNVM _
'(19978) 3989 3990 3991 3992 3993 3994'
CD //CERN/CHARM2/TEST/DST1/ELEC/HO20/NOM/E04
add/tape NH0392 NH0392 2  NOSC FILE2  EP 0 CERNVM _
'(12798) 3995 3996 3997'
\end{XMPt}

\Filename{H2Fatmenuserguide-access-data-in-fatmen-database}
\Section{4cm}{Accessing the data in the FATMEN database}
\index{data access}
\index{access data}

The data, which is entered in the FATMEN database can be accessed
interactively running the FATMEN program.
In the session we have a look at the
data, which was entered running the KUIP macro \Lit{FATEX1 KUMAC},
discussed previously.

\begin{XMPt}{Accessing information in the FATMEN database}
FM> \underline{pwd}
Current Working Directory = //CERN/CNDIV/GOOSSENS/SMFF/R3
FM> \underline{cd \bs\bs }                 | Go up two levels in the directory
Current Working Directory = //CERN/CNDIV/GOOSSENS
FM> \underline{ld}
List of subdirectories...
DCF
SMFF
Total of   2 subdirectories
FM> \underline{cd dcf}
Current Working Directory = //CERN/CNDIV/GOOSSENS/DCF
FM> \underline{ld}
List of subdirectories...
R3
Total of   1 subdirectories
FM> \underline{cd r3}
Current Working Directory = //CERN/CNDIV/GOOSSENS/DCF/R3
FM> \underline{ls}
BINARY
PRODID
MEMO
EXECS
Files:    4
FM> \underline{cd \bs\bs }                 | Up to user's top directory again
Current Working Directory = //CERN/CNDIV/GOOSSENS
FM> \underline{cd smff/r1}
Current Working Directory = //CERN/CNDIV/GOOSSENS/SMFF/R1
FM> \underline{ls}
PTF_M5
PTF_M6
Files:    2
FM> \underline{fc}                         | Count files in current working directory
Files:    2
FM> * List files using wildcard construct and display comment field (c option)
FM> *                                                 time and date fields (t option)
FM> \underline{ls ptf_m% -ct}
Generic filename: PTF\_M5
Comment: SMFF PTF MOD-LEVEL 5
Date and time of creation:     891114 1544
Date and time catalogued:      891114 1544
Date and time last accessed:        0    0
Generic filename: PTF_M6
Comment: SMFF PTF MOD-LEVEL 6
Date and time of creation:     891114 1544
Date and time catalogued:      891114 1544
Date and time last accessed:        0    0
Files:    2
FM> \underline{cd \bs \bs dcf/r3}
Current Working Directory = //CERN/CNDIV/GOOSSENS/DCF/R3
FM> \underline{ls binary -a}               | Display all information about entry
Generic filename: BINARY
Copy level:  0 Media type: 2 Location code:   1 File serial number:   4
Comment: INSTALLATION EXECS
Start record:     0 End record:     0 Start block:     0 End block:     0
File format: VMF  user format:
VSN: IC2325 VID: IC2325 FSEQ:    3
Fileid:      FILE3
Created by:  FAT3     ACCT: JDS$CT   on node: CERNVM   by job: FAT3
RECFM:       LRECL:     0 BLKSIZE:     0 FILESIZE:     0
File protection mask:          00000000
Date and time of creation:     891114 1544
Date and time catalogued:      891114 1544
Date and time last accessed:        0    0
User words:  00000000 00000000 00000000 00000000 00000000
             00000000 00000000 00000000 00000000 00000000
Files:    1
FM> \underline{end}
DISK CNDIV (Your 19C Mode W ) released/detached.
FMEND. Terminating FATMEN package
\end{XMPt}
\index{data staging}
\index{staging data}

\begin{XMPt}{Example of data staging with the FATMEN database}
FM > \underline{cd chris}                  | Go to relevant working directory
Current Working Directory = //CERN/CNDIV/CHRIS
FM > \underline{ls tape8 -nmc}
Generic filename: TAPE8
Comment: ANOTHER UA2 TAPE
VSN: UW0060 VID: UW0060 FSEQ:    1
Fileid:      UA2DST
Files:    1
FM> \underline{find tape8 iofile13}
EXEC STAGE IN IOFILE13   UW0060.1.SL.UW0060 (WAIT SIZE 200 DEN 38K
STAGE: Request sent to VMSTAGE - do NOT type at all until it replies. DO NOT
IPL CMS.
VMSTAGE:14Nov89-15:55:13 Staging-in job submitted to read tape
                         UW0060.1.SL.UW0060
VMSTAGE:14Nov89-15:55:13 If you choose not to wait, use HX or RETURN twice to
                         break out. Do NOT IPL CMS
STAGE: 16:00 waited 5/180 mins for staging request.
STAGE: 16:05 waited 10/180 mins for staging request.
STAGE: 16:10 waited 15/180 mins for staging request.
STAGE: 16:15 waited 20/180 mins for staging request.
STAGE: 16:20 waited 25/180 mins for staging request.
VMSTAGE:14Nov89-16:25:00 Staging-in retcode 0 tape info: UW0060.1.SL.UW0060
                         dcb= U 12600 12600 nreads=64 nMbytes=0.769042969
STAGE: 16:25 waited 30/180 mins for staging request.
STG517 ( 019B  V ) RR
FM > \underline{shell q filedef}
Executing ... Q FILEDEF
FT06F001 TERMINAL
FT02F001 PUN
FT05F001 TERMINAL
FT07F001 PUN
DF@@00002 DISK     CERN     FATRZ
IOFILE13 DISK     TUW0060  FSEQ1
\end{XMPt}

\Filename{H2Fatmenuserguide-access-tms}
\Section{4cm}{Access to the Tape Management System}
\index{tape}
\index{TMS}
\index{SYSREQ}

The CERN Tape Management System is fully integrated into the FATMEN
package in an automatic and transparent manner.
In addition, direct access to the
TMS is possible via the SYSREQ interface, which provides both a FORTRAN
callable and a command line interface.

Jobs running on remote systems will interface to the local or CERN TMS
as defined by the local implementation.

The CERN Tape Management System is described in DD/TMS/UG.

\Subsection{4cm}{Accessing existing tape data}

\index{existing data}
\index{accessing existing tape data}

When an attempt is made to access existing data which resides on tape,
the file catalogue routines will check access rights to and availability
of the tape in question.
It will then issue the appropriate STAGE command
to copy the data onto disk.
No knowledge of the tape details, such
as file number, dataset name or location, are required by the user.

\Subsection{2cm}{Creating new tape data}

\index{new data}
\index{creating new tape data}
When creating new datasets on tape, the FATMEN system will use
the next free tape that is allocated to the user or group,
according to the access rules defined in the Tape Management System
for the group in question.
The default medium is 3480. Alternatively,
the user may override the default options, specifying a different
media type, an explicit tape volume etc.
This allows for tape allocation
to be performed at run time, job submission time, or at any time
prior to job submission time.
 
@


1.1
log
@Initial revision
@
text
@d2959 1
a2959 1
the routine \Rind{SYSREQ} described in the {\tt CSPACK}~\cite{CSPACK}
@
