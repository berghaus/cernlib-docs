% \iffalse meta-comment
%
% 
% Copyright (C) 1992 by Frank Mittelbach.  All rights reserved.
% 
% 
% IMPORTANT NOTICE:
% 
% You are not allowed to change this file.  You may however copy this
% file to a file with a different name and then change the copy.
% 
% You are NOT ALLOWED to distribute this file alone.  You are NOT
% ALLOWED to take money for the distribution or use of this file (or a
% changed version) except for a nominal charge for copying etc.
% 
% You are allowed to distribute this file under the condition that it is
% distributed together with all files mentioned in readme.mz7.
% 
% If you receive only some of these files from someone, complain!
% 
% However, if these files are distributed by established suppliers as
% part of a complete TeX distribution, and the structure of the
% distribution would make it difficult to distribute the whole set of
% files, *those parties* are allowed to distribute only some of the
% files provided that it is made clear that the user will get a complete
% distribution-set upon request to that supplier (not me).  Notice that
% this permission is not granted to the end user.
% 
% For error reports in case of UNCHANGED versions see readme files.
% 
% 
% 
% \fi

\def\filename{varioref}
\def\fileversion{v0.1c}
\def\filedate{92/10/08}
\def\docdate {92/10/08}

%% \CheckSum{197}
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
%
% \iffalse
%% Style-option varioref to use with LaTeX v2.09
%% Copyright (C) 1992  Frank Mittelbach, all rights reserved.
% \fi
%
%
% \MakeShortVerb\|
% \setcounter{StandardModuleDepth}{1}
%
%
% \title{The {\tt \filename} option\thanks{This file
%        has version number \fileversion, last
%        revised \filedate, documentation dated \docdate.}}
% \author{Frank Mittelbach}
% \date{\docdate}
%
% \maketitle
%
% \[ *** \mbox{\bf Warning interface likely to change} *** \]
%
% \begin{abstract}
%   This option defines the commands |\vref| and |\vpageref| for
%   \LaTeX2.09. |\vref| is
%   similar to |\ref| but adds an
%   additional page reference, like `on the
%   facing page' or `on page 27' whenever the corresponding |\label|
%   is not on the same page. The command
%   |\vpageref| is a variation to |\pageref|
%   with a similar functionality.
%   Generated strings are customizable so that these commands are
%   usable with other languages.
% \end{abstract}
%
% \section{Introduction}
%
% In many cases it is helpful when refering to a figure or table to
% put both a |\ref| and a |\pageref| command into the document
% especially when there are one or more pages between the reference
% and the object.  Therefore some people use a command like
% \begin{verbatim}
%  \newcommand{\fullref}[1]{\ref{#1} on page~\pageref{#1}}
%\end{verbatim}
% which reduces the number of key strokes, necessary to make such a
% complete reference.  But since one never knows where the referenced
% object finally falls, using such a device may result in a page
% reference to the current page which is disturbing and therefore
% should be avoided.
%
%
%
% \section{The user interface}
%
%\DescribeMacro\vref The implementation of |\vref| below produces only
% a |\ref| when reference and |\label| are on the same page. It will
% additionally produce one of the strings `on the facing page', `on
% the preceding page', or `on the following page', if label and
% reference differ by one and it will produce both |\ref| and
% |\pageref| when the difference is larger.  The word `facing' is used
% when label and reference both fall onto a double spread.  However,
% if a special page numbering scheme is used instead of the usual
% arabic numbering (e.g., |\pagenumbering{roman}|) then there will be
% no distinction between one or many pages off.
%
%\DescribeMacro\vpageref Sometimes one wants to refer only to page
% number and again such a reference should normally be suppressed if
% we are refering to the current page. For this purpose the option
% defines the |\vpageref| command. It will produce the same strings as
% |\vref| except that it doesn't start with the |\ref| and except that
% it will produce the string that is saved in |\reftextcurrent| if
% label and reference fall onto the same page. By defining
% |\reftextcurrent| to produce ``on this page'' or something similar,
% we can avoid that
% \begin{verbatim}
%   ... see the example \vpageref{ex:foo} which shows ...
%\end{verbatim}
% comes out as ``\ldots~see the example which shows~\ldots'', which
% could be misleading.
%
% You can put a space in front of |\vpageref| it will be ignored if
% the command doesn't produce any text at all.
%
% But in fact |\vpageref| allows even more control. If has two
% optional arguments. With the first one, one can specify the text
% that should be used if label and reference fall on the same page.
% This is very helpful if both are near to each other, so that they
% may or may not be separated by a page break. In such a case we
% usually know (!) whether the reference is before or after the label
% so that we can say something like
% \begin{verbatim}
%   ... see the example \vpageref[above]{ex:foo} which shows ...
%\end{verbatim}
% which will then come out as ``\ldots~see the example above which
% shows~\ldots'' if we are still on the same page, but as ``\ldots~see
% the example on the page before which shows~\ldots'' (or something
% similar depending on the settings of the |\reftext..before|
% commands) when there was a page break in the meantime. One warning
% however, if you use |\vpageref| with the optional argument to refer
% to a figure or table, keep in mind that depending on the float
% placement parameters the float may show up on top of the current
% page and therefore before the reference even if it came after it in
% the source file.
%
% But maybe you prefer to say ``\ldots~see the above example'' if
% example and reference fall onto the same page, i.e., reverse the
% word order.  In fact, in some languages the word order automatically
% changes in that case.  To allow for this variation the second
% optional argument can be used. It specifies the text preceding the
% generated reference if object and reference do not fall onto the
% same page. Thus one would write
% \begin{verbatim}
%   ... see the \vpageref[above example][example]{ex:foo}
%       which shows ...
%\end{verbatim}
% to achieve the desired effect.
%
%
%
% \section{Customisation}
%
%\DescribeMacro\reftextbefore
%\DescribeMacro\reftextfacebefore
%\DescribeMacro\reftextafter
%\DescribeMacro\reftextfaceafter To allow customizing the generated
% strings they are all hidden in macros. Backward references use
% |\reftextbefore| if the label is on the preceding page but invisible
% and |\reftextfacebefore| if it is one the facing page (i.e., if the
% current page number is odd).  Similarily |\reftextafter| is used
% when the label comes on the next page but one has to turn the page
% and |\reftextfaceafter| if it is on the following but facing page.
%
%\DescribeMacro\reftextfaraway Finally we have |\reftextfaraway| which
% is used whenever label and reference differ by more than one or when
% they aren't numeric. This macro is a bit different because it takes
% one argument, the symbolic reference string so that one cane make
% use of |\pageref| in its replacement text.
%
%
%\DescribeMacro\vreftextvario To allow a bit random variation in the
% generated strings one can use the command |\reftextvario| inside the
% string macros. It takes two arguments and selects one or the other
% for printing depending on the number of already seens |\vref| or
% |\vpageref| commands.  As an example see the definitions of
% |\reftextbefore| etc.\ \vpageref[below]{reftextbefore}.
%
%
%
% \section{A few warnings}
%
%
% Defining commands like the ones described above poses some
% interesting problems. Suppose, for example, that a generated text
% like `on the next page' gets broken across pages. If this happens it
% is very difficult to find an acceptable solution and in fact can
% even result in a document that will always change from one state to
% another (i.e., inserting one string, finding that this is wrong,
% inserting another string on the next run which makes the first
% string correct again, inserting \ldots).  The current implementation
% of {\tt\filename} regards the end of the generated string as being
% relevant, e.g.,
% \begin{quote}
%   table 5 on the current \meta{page break} page
% \end{quote}
% would be true if table 5 would be found on the page containing the
% word `page' not the one containing the word `current'.  This is not
% completely satisfactory but in such case no solution really is.
%
% At the end final a warning: every use of |\vref| will internally
% generate a macro name. As a result you may run out of name space or
% main memory if you make havy use of this macro on a small \TeX{}
% installation.
%\DescribeMacro\fullref For this reason the primitive command
% |\fullref| is also provided. This command can be used whenever you
% know for sure that label and reference can't fall onto nearby pages.
%
% \StopEventually{\PrintIndex}
%
% \section{The implementation}
%
% The main implementation idea is to generate an internal label
% command for every |\vpageref| and compare the page reference of this
% label with the page reference of the user-requested label.  Since
% this means one additional macro name for each use of |\vpageref| or
% |vref| (which is implemented in terms of |\vpageref|) the memory
% requirements of this style my be high in terms of main and macro
% name memory.  Since the information held in the internal labels is
% used only once one could envision a different scheme if suitable
% primitives for this kind of ``one place information'' would be
% provided by \LaTeX.  This type of data structure is planned for
% \LaTeX3 but for the moment we have to live with the memory
% restrictions.
%
%
% \begin{macro}{\vr@cnt}
%    To generate new labels we use a counter and construct the
%    internal label names by prefixing the current counter value with
%    the string |vr@|.
%    \begin{macrocode}
%<*style>
\newcount\vr@cnt
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\vpageref}
% \begin{macro}{\p@vpageref}
% \begin{macro}{\@vpageref}
%    The command |\vpageref| generates the appropriate string by first
%    parsing the optional arguments (if any) and then compares the
%    internal and the user label.  First it is made robust by
%    prefixing itself with the |\protect| command.
%    \begin{macrocode}
\def\vpageref{\protect\p@vpageref}
\def\p@vpageref{\@ifnextchar[%
%    \end{macrocode}
%    The default for the first optional argument is the string hidden
%    in the macro |\reftextcurrent|.
%    \begin{macrocode}
  \@vpageref{\@vpageref[\reftextcurrent]}%
}
\def\@vpageref[#1]{\@ifnextchar[%
%    \end{macrocode}
%    The default for the second optional argument is a space which is
%    prefixed by |\unskip| to get rid of any leading space inserted
%    already.
%    \begin{macrocode}
  \@@vpageref{\@@vpageref[#1][\unskip\space]}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@vpageref}
%     The |\@@vpageref| macro finally generates the references by
%    comparing the value of an internal label with the value of the
%    user label.
%    \begin{macrocode}
\def\@@vpageref[#1][#2]#3{%
%    \end{macrocode}
%    First it switches to horizontal mode if necessary and also
%    removes any leading space.
%    \begin{macrocode}
  \leavevmode\unskip
%    \end{macrocode}
%    The it advances the counter |\vr@cnt| by one which is used to
%    generate internal label names.
%    \begin{macrocode}
  \global\advance\vr@cnt\@ne
%    \end{macrocode}
%    The it checks if for the current value of |\vr@cnt| a label
%    command was issued in the last run. If not it pretents that there
%    was one with the value |{??}{??}|.  Thereafter it stores the the
%    pageref value for this label in the macro |\@tempa|.
%    \begin{macrocode}
  \@ifundefined{r@vr@\the\vr@cnt}%
         {\@namedef{r@vr@\the\vr@cnt}{{??}{??}}}{}%
  \edef\@tempa{\expandafter\expandafter\expandafter
                \@cdr\csname r@vr@\the\vr@cnt\endcsname
                \@nil}%
%    \end{macrocode}
%    Same game for the user requested label; this time the page
%    reference is saved in |\@tempb|.
%    \begin{macrocode}
  \@ifundefined{r@#3}{\@namedef{r@#3}{{??}{??}}}{}%
  \edef\@tempb{\expandafter\expandafter\expandafter
                \@cdr\csname r@#3\endcsname
                \@nil}%
%    \end{macrocode}
%    Now after the internal label has served its purpose if would be
%    nice to free the memory it occupies by using something like
%    \begin{verbatim}
% \global\expandafter\let
%        \csname r@vr@\the\vr@cnt\endcsname\@empty
%\end{verbatim}
%    But this is not possible because it would result in getting
%    `Labels may have changed\ldots' warnings for every run.  Now we
%    are ready to produce the textual strings.  Since we have removed
%    any leading space we now insert a space and then compare the two
%    page references.
%    \begin{macrocode}
  \space
  \ifx\@tempa\@tempb
%    \end{macrocode}
%    If they are the same we insert the first argument into the input
%    stream.  Otherwise we insert the second argument.  Recall that
%    those are the two optional arguments of |...|.
%    \begin{macrocode}
    #1%
  \else
    #2%
%    \end{macrocode}
%    Now we check if the page number of the referenced object (stored
%    in |\@tempb| is a single positive number.
%    \begin{macrocode}
    \is@pos@number\@tempb
       {%
%    \end{macrocode}
%    If so, we check if the current position (stored in |\@tempa|) is
%    a positive number. If this is the case we assign this number to
%    the counter register |\@tempcnta| and add one to it.
%    \begin{macrocode}
        \is@pos@number\@tempa
         {\@tempcnta\@tempa
          \advance\@tempcnta\@ne
         }%
%    \end{macrocode}
%    If it is not a positive number we assign the largest possible
%    number to |\@tempcnta| and thereby pretending that label and
%    reference are miles away from each other.
%    \begin{macrocode}
         {\@tempcnta\maxdimen}%
%    \end{macrocode}
%    Now we are ready to check if reference and object are on nearby
%    pages. |\@tempb| will expand to the page number of the object
%    (and we know that this is a number) and |\@tempcnta| is either
%    one higher than the reference page or completely out of bounds.
%    So if both represend the same value then the object lies one page
%    after its reference.
%    \begin{macrocode}
        \ifnum \@tempb =\@tempcnta
%    \end{macrocode}
%    Thus if the object falls onto an odd page then the reference is
%    on the facing even page (and so we insert |\reftextfaceafter|),
%    otherwise the object can not be seen from the reference (and we
%    in insert |\reftextafter|).  Don't be surprised if we are not
%    using |\@tempb| in the check. Since |\@tempcnta| has the same
%    value it is faster to use the register instead of parsing the
%    macro contents anew.
%    \begin{macrocode}
         \ifodd\@tempcnta
         \reftextfaceafter
         \else
           \reftextafter
         \fi
%    \end{macrocode}
%    If the object is not on the page following the reference we check
%    if it is on the page before the reference. In \LaTeX this
%    situation is not too common, for example with floats it normally
%    does not occur, but of course it isn't impossible if you more
%    than one reference to the same object, or if you have back
%    references to sections, theorems, etc.  To test this we now
%    substract two from the current value of |\@tempcnta| (which was
%    set to one higher as the reference page number). Note, that
%    substraction is also possible if the value was |\maxdimen| --- we
%    still get something that is much larger than any sensible page
%    number.
%    \begin{macrocode}
        \else
          \advance\@tempcnta-2
%    \end{macrocode}
%    If now |\@tempb| and |\@tempcnta| have the same value then the
%    object lies one page before the reference.
%    \begin{macrocode}
          \ifnum \@tempb =\@tempcnta
%    \end{macrocode}
%    Again we have to check for odd or even pages to distinguish
%    between the facing and the non-facing situation.
%    \begin{macrocode}
            \ifodd\@tempcnta
              \reftextbefore
            \else
              \reftextfacebefore
            \fi
%    \end{macrocode}
%    If the above test also returns false then we have object and
%    references on pages which are far away or don't contain simple
%    page numbers. Therefore we generate the |\reftextfaraway| string.
%    Recall that this is a macro which has the user label as an
%    argument.
%    \begin{macrocode}
          \else
            \reftextfaraway{#3}%
          \fi
        \fi
       }%
%    \end{macrocode}
%    We do the same if our first test (that the page with the object
%    has a positive page number) turns out to be false.
%    \begin{macrocode}
       {\reftextfaraway{#3}}%
  \fi
%    \end{macrocode}
%    Finally we generate the internal label so that it can be check on
%    the next run. This means that we compare the position after the
%    string with the position of the referenced object. There is one
%    thing to note: to conserve space we locally make |\@currentlabel|
%    empty since we are only interested in the page number value of
%    this internal label.
%    \begin{macrocode}
  {\let\@currentlabel\@empty\label{vr@\the\vr@cnt}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\vref}
% \begin{macro}{\p@vref}
% Undoc
%    \begin{macrocode}
\def\vref{\protect\p@vref}
\def\p@vref#1{%
%    \end{macrocode}
%    \begin{macrocode}
  \unskip~\ref{#1}%
  \@vpageref[\unskip]{#1}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%  \begin{macro}{\is@pos@number}
%    The utitlity macro |\is@pos@number| takes three arguments: a
%    string that is tested for being a valid integer and the actions
%    to be taken in case the test comes out true or false.
%
%    We start by passing the string to the macro |\is@pos@num| after
%    prefixing it with a {\tt 0} and adding a space after it. To have
%    a welldefined ending point we also add |\@nil| at the end.
%\label{isposnumber}
%    \begin{macrocode}
\def\is@pos@number#1{\is@pos@num0#1\space\@nil}
%    \end{macrocode}
%    Now we parse the enlarged string into a counter register.  To get
%    control back after everything that is regarded by \TeX{} as a
%    number is put into that register we assign |\is@pos@num@| to the
%    |\afterassignment| token.  Since the string started with 0, we
%    can be sure that the register assignment will be carried out
%    without an error message.  In case of counter assignments leading
%    zeros are discarded.
%    \begin{macrocode}
\def\is@pos@num{\afterassignment\is@pos@num@ \count@}
%    \end{macrocode}
%    Now we have to check whether or not the whole string was parsed
%    into that register or some remainder was left over. Since we have
%    added a |\@nil| token at the very end we can use that to delimit
%    the argument of |\is@pos@num@|. Note, that the added space in
%    |\is@pos@number| \vpageref[above]{isposnumber} gets parsed away
%    by the counter assignment. If it would be missing, and the full
%    string would consist of a number, \TeX{}would try to replace
%    |\@nil| by its definition to see if it would contain additional
%    digits and thus we would be in trouble at this point.
%    \begin{macrocode}
\def\is@pos@num@#1\@nil{%
%    \end{macrocode}
%    Now we have to check if the argument is empty. We can do this
%    with an |\if| test (i.e., in an expandable way) since we know for
%    sure that it can not start with a digit
%    \begin{macrocode}
  \if0#10%
%    \end{macrocode}
%    Depending on the result we execute the second or third argument
%    of the command |\is@pos@number| using a technique that removes
%    the |\else| or |\fi| from the input stream first, so that in
%    principle input stream parsing could be done from within the
%    arguments.
%    \begin{macrocode}
    \expandafter\@firstarg \else
    \expandafter\@secondarg  \fi}
%    \end{macrocode}
%    Finally two trival definitions used above.
%    \begin{macrocode}
\def\@firstarg#1#2{#1}
\def\@secondarg#1#2{#2}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\reftextvario}
%    This macro gives a little bit of random variation in the text
%    because the outcome depends on the number of |\vref| commands
%    seen before.
%    \begin{macrocode}
\def\reftextvario#1#2{\ifodd\vr@cnt #1\else#2\fi}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\reftextfaceafter}
%  \begin{macro}{\reftextfacebefore}
%  \begin{macro}{\reftextafter}
%  \begin{macro}{\reftextbefore}
%  \begin{macro}{\reftextcurrent}
%  \begin{macro}{\reftextfaraway}
%  \label{reftextbefore}
%    Here are the macros that generate the textual strings. Note, that
%    they not start with a space, the space is already added in the
%    main macro above.
%    \begin{macrocode}
\def\reftextfaceafter {on the \reftextvario{facing}{next} page}
\def\reftextfacebefore{on the \reftextvario{facing}{preceding} page}
\def\reftextafter     {on the \reftextvario{following}{next} page}
\def\reftextbefore    {on the \reftextvario{preceding page}{page before}}
\def\reftextcurrent   {on \reftextvario{this}{the current} page}
%    \end{macrocode}
%    Finally the macro that generates the text when label and
%    reference are far away from each other.
%    \begin{macrocode}
\def\reftextfaraway#1{on page~\pageref{#1}}
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%  \end{macro}
%
%  \begin{macro}{\fullref}
%    And here is the primitive command that always produces a |\ref|
%    and a |\pageref|.
%    \begin{macrocode}
\def\fullref#1{\ref{#1} on page~\pageref{#1}}
%</style>
%    \end{macrocode}
%  \end{macro}
%
%
%
% \section{The documentation driver file}
%
% The next bit of code contains the documentation driver file for
% \TeX{}, i.e., the file that will produce the documentation you are
% currently reading. It will be extracted from this file by the {\tt
% docstrip} program.
%    \begin{macrocode}
%<+driver>\documentstyle[varioref,doc]{article}
%<+driver>
%<+driver>% dimensions from ltugboat.sty:
%<+driver>
%<+driver>\setlength\textwidth{31pc} \setlength\textheight{54pc}
%<+driver>\setlength{\parindent}{0pt}
%<+driver>\setlength{\parskip}{2pt plus 1pt minus 1pt}
%<+driver>\setlength{\oddsidemargin}{8pc}
%<+driver>\setlength{\marginparwidth}{8pc}
%<+driver>\setlength{\topmargin}{-2.5pc} \setlength{\headsep}{20pt}
%<+driver>\setlength{\columnsep}{1.5pc} 
%<+driver>\setlength{\columnwidth}{18.75pc}
%<+driver>
%<+driver>\EnableCrossrefs         
%<+driver>%\DisableCrossrefs   % Say \DisableCrossrefs if index is ready
%<+driver>
%<+driver>\RecordChanges                  % Gather update information
%<+driver>
%<+driver>\CodelineIndex                  % Index code by line number
%<+driver>
%<+driver>%\OnlyDescription    % comment out for implementation details
%<+driver>%\OldMakeindex       % use if your MakeIndex is pre-v2.9
%<+driver>\begin{document}
%<+driver>   \DocInput{varioref.doc}
%<+driver>\end{document}
%    \end{macrocode}
%
% \Finale
%
% \PrintChanges
%
\endinput

