%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
%   HIGZ  User Guide -- LaTeX Source                                           %
%                                                                              %
%   Chapter: The X Windows System interface routines                           %
%                                                                              %
%   Editor: Olivier Couet / CN-AS                                              %
%   Last Mod.: 9 July 1993 oc                                                  %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Filename{H1TheXWinterfaceroutines}
\chapter{The \XW{} interface routines}
\index{X Window System!interface routines}

The interface between \HIGZ{} and the \XW{} (\X11) is done via a set of C
routines callable from a \FORTRAN{} program. This set of routine provide a low
level interface to \X11. It allows to write \X11{} programs with a small number
of simple routines and it does not require the knowledge of the complete \X11{}
library (\XLIB). This set of interface routines are described in this appendix.
The "normal" \HIGZ{} user does not need to read this chapter, which is useful
only to write \X11{} drivers in \FORTRAN.

\Filename{H2X11interfacecontrolroutines}
\section{\X11{} interface control routines}
\index{X11!interface control routines}
\subsection{Open \X11{} display}
\index{open!X11!display}
\Sfunc{IXOPNDS}{I = IXOPNDS (LENHST,CHOST)}
\Action
Open the display. Returns -1 if the opening fails.
\Pdesc
\begin{DLtt}{1234567}
\item[LENHST] Host name length.
\item[CHOST] Host name.
\end{DLtt}
\subsection{Open an \X11{} window}
\index{open!X11!window}
\Sfunc{IXOPNWI}{IWID = IXOPNWI (IX,IY,IW,IH,LENTIT,CHTIT,IFLAG)}
\Action
Open a \X11{} window and returns a window number which can be used with
\Rind{IXSELWI}, \Rind{IXRSCWI}, \Rind{IXMOVWI}, \Rind{IXCLIP}, \Rind{IXNOCLI} etc ...\\
Returns \Lit{-1} if the window creation fails. It is possible to
open up to 20 different windows.
\Pdesc
\begin{DLtt}{1234567}
\item[IX] Initial window X position in pixels.
\item[IY] Initial window Y position in pixels.
\item[IW] Initial window width in pixels.
\item[IH] Initial window height in pixels.
\item[LENTIT] Window title length.
\item[CHTIT] Window title.
\item[IFLAG] If it is not equal to 1 it allows to open a non \MOTIF{} window
             even if \Rind{ixmotif} has been called.
\end{DLtt}
The name of machine on which the program is running is automatically
apend to the window title except if the window title begin with "-".
\subsection{Select the current \X11{} window}
\index{select!current X11 window}
%
\Shubr{IXSELWI}{(IWID)}
\Action
Select the window to which subsequent output will be directed.
\Pdesc
\begin{DLtt}{1234567}
\item[IWID] Window number returned by \Rind{IXOPNWI}.
\end{DLtt}

\subsection{Close an \X11{} window}
\index{close!X11!window}
%
\Shubr{IXCLSWI}{ }
\Action
Close the current window.
\subsection{Close an \X11{} session}
\index{close!X11!connection}
%
\Shubr{IXCLSDS}{ }
\Action
Close all opened windows and close the \X11{} connection.
\subsection{Set \X11{} host name}
\index{X11!host name}
%
\Shubr{IXSETHN}{(LENHST,CHOST)}
\Action
Set host name.
\Pdesc
\begin{DLtt}{1234567}
\item[LENHST] Host name length.
\item[CHOST] Host name.
\end{DLtt}
%
\subsection{Clear an \X11{} window}
\index{clear!X11 window}
\Shubr{IXCLRWI}{ }
\Action
Clear the current window.
%
\subsection{Update an \X11{} window}
\index{update!X11 window}
\Shubr{IXUPDWI}{(MODE)}
\Action
Update the display and raise current window to top of stack.
Synchronise client and server once (not permanent).
Copy the pixmap on the window if the double buffer is on.
\begin{DLtt}{1234567}
\item[MODE] Control the update mode.
\begin{DLtt}{123456789012}
\item[(1) or (11)] The window is raised.
\item[(0) or (10)] The window is not raised.
\item[(0) or (1)]  No synchronisation between client and server.
\item[(10) or (11)] Synchronisation between client and server.
\end{DLtt}
\end{DLtt}
%
\subsection{Resize an \X11{} window}
\index{X11!resize window}
\Shubr{IXRSCWI}{(IWID,IW,IH)}
\Action
Resize (rescale) the \X11{} window IWID.
\Pdesc
\begin{DLtt}{1234567}
\item[IWID] Window number returned by \Rind{IXOPNWI}.
\item[IW] New width.
\item[IH] New height.
\end{DLtt}
%
\subsection{Move an \X11{} window}
\index{X11!move window}
\Shubr{IXMOVWI}{(IWID,IX,IY)}
\Action
Move the \X11{} window IWID to the position (IX,IY).
\Pdesc
\begin{DLtt}{1234567}
\item[IWID] Window number returned by \Rind{IXOPNWI}.
\item[IW] New X position.
\item[IH] New Y position.
\end{DLtt}



\subsection{Define the \X11{} clipping rectangle}
\index{X11!clipping}
\Shubr{IXCLIP}{(IWID,IX,IY,IW,IH)}
\Action
Set clipping region for all windows.
\Pdesc
\begin{DLtt}{1234567}
\item[IWID] Window number returned by \Rind{IXOPNWI}.
\item[IX] X clipping rectangle position.
\item[IY] Y clipping rectangle position.
\item[IW] Clipping rectangle width.
\item[IH] Clipping rectangle height.
\end{DLtt}
%
\subsection{Deactivate the \X11{} clipping rectangle}
\index{X11!clipping!off}
\Shubr{IXNOCLI}{(IWID)}
\Action
Switch off the clipping rectangle.
\begin{DLtt}{1234567}
\item[IWID] Window number returned by \Rind{IXOPNWI}.
\end{DLtt}
%
\begin{XMPt}{Example}
      program example
      character*8 machinename
      character*1 wait
*
      machinename='hphigz:0.0'               ! Open display
      if(ixopnds(10,machinename).ne.0)print*, 'Can''t open display'
*
      iwid=ixopnwi(0,0,200,200,5,'Hello')    !  Open window
*
      call ixselwi(iwid)                     ! Select window identified by iwinid
*
      call ixbox(10,190,10,190,0)            ! Draw boxes
      call ixbox(20,180,20,180,0)
      call ixbox(30,170,30,170,0)
*
      call ixupdwi(0)                        ! Flush X11 buffer and Wait
      read(*,'(a)') wait
*
      call ixclswi                           ! Close window
      call ixclsds                           ! Close display
*
      end
\end{XMPt}
%
% PRIMITIVES
%

\Filename{H2X11outputprimitives}
\section{\X11{} output primitives}
\subsection{\X11{} lines}
\index{X11!line}
\Shubr{IXLINE}{(N,IXY)}
\Action
Draw a line through all points.
\Pdesc
\begin{DLtt}{1234567}
\item[N] Number of points
\item[IXY(2,N)] List of points. This is an INTEGER*2 array.
\end{DLtt}
\subsection{\X11{} markers}
\index{X11!marker}
%
\Shubr{IXMARKE}{(N,IXY)}
\Action
Draw a marker at each point.
\Pdesc
\begin{DLtt}{1234567}
\item[N] Number of points.
\item[IXY(2,N)] List of points (INTEGER*2).
\end{DLtt}
\subsection{\X11{} fill area}
\index{X11!fill area}
%
\Shubr{IXFLARE}{(N,IXY)}
\Action
Fill area described by polygon.
\Pdesc
\begin{DLtt}{1234567}
\item[N] Number of points.
\item[IXY(2,N)] List of points (INTEGER*2).
\end{DLtt}
\subsection{\X11{} text}
\index{X11!text}
%
\Shubr{IXTEXT}{(MODE,IX,IY,ANGLE,RMAGN,LENTXT,CHTEXT)}
\Action
Draw a text string using the current font.
\Pdesc
\begin{DLtt}{1234567}
\item[MODE]   Drawing mode.
\item[MODE = 0] The background is not drawn.
\item[MODE = 1] The background is drawn.
\item[IX]     X text position.
\item[IY]     Y text position.
\item[ANGLE]  Text angle.
\item[RMAGN]  Magnification factor.
\item[LENTXT] Text length.
\item[CHTEXT] Text string.
\end{DLtt}

%
% ATTRIBUTES
%
\Filename{H2X11outputattributes}
\section{\X11{} output attributes}
\subsection{\X11{} colour representation}
\index{X11!colour representation}
%
\Shubr{IXSETCO}{(INDEX,R,G,B)}
\Action
Set colour intensities for given colour index.
\Pdesc
\begin{DLtt}{1234567}
\item[INDEX] Colour index.
\item[R] Red intensity between 0.0 and 1.0.
\item[G] Green intensity between 0.0 and 1.0.
\item[B] Blue intensity between 0.0 and 1.0.
\end{DLtt}
\subsection{\X11{} line width}
\index{X11!line!width}
%
\Shubr{IXSETLN}{(IWID)}
\Action
Set line width.
\Pdesc
\begin{DLtt}{1234567}
\item[IWID] Line width in pixels.
\end{DLtt}

\subsection{\X11{} line style}
\index{X11!line!style}
%
\Shubr{IXSETLS}{(N,IDASH)}
\Action
Set line style.
\Pdesc
\begin{DLtt}{1234567}
\item[N] Length of dash list.
\item[IDASH(N)] Dash segment lengths.
\begin{DLtt}{12345}
\item[N = 0] Use solid lines.
\item[N > 0] Use dashed lines described by \Rarg{DASH(N)}. For example
             \Lit{N=4, DASH=(6,3,1,3)} will produce a
       dashed-dotted line of 6 drawn pixels followed by 3 blank pixels, 1
       drawn pixel and 3 blank pixels.
\end{DLtt}
\end{DLtt}
\index{X11!line!colour}
\subsection{\X11{} lines colour}
%
\Shubr{IXSETLC}{(INDEX)}
\Action
Set colour index for lines.
\Pdesc
\begin{DLtt}{1234567}
\item[INDEX] Colour index defined by IXSETCOL.
\end{DLtt}



\subsection{\X11{} marker style}
\index{X11!marker!style}
%
\Shubr{IXSETMS}{(ITYPE,N,IXY)}
\Action
Set marker style.
\Pdesc
\begin{DLtt}{1234567}
\item[ITYPE] Marker type
\item[N] Length of marker description.
\item[IXY(2,N)] List of points describing marker shape (INTEGER*2)
\begin{DLtt}{1234567890}
\item[N.EQ.0] Marker is a single point.
\item[ITYPE = 0 ] Marker is hollow circle of diameter \Rarg{N}.
\item[ITYPE = 1 ] Marker is filled circle of diameter \Rarg{N}.
\item[ITYPE = 2 ] Marker is a hollow polygon described by line \Rarg{IXY}.
\item[ITYPE = 3 ] Marker is a filled polygon described by line \Rarg{IXY}.
\item[ITYPE = 4 ] Marker is described by segmented line \Rarg{IXY}.
\end{DLtt}
\end{DLtt}
Example: \Lit{ITYPE=4, N=4, XY=(-3,0,3,0,0,-3,0,3)} sets a plus shape of
7x7 pixels
\subsection{\X11{} markers colour}
\index{X11!marker!colour}
%
\Shubr{IXSETMC}{(INDEX)}
\Action
Set colour index for markers.
\Pdesc
\begin{DLtt}{1234567}
\item[INDEX] Colour index defined by \Rind{IXSETCO}.
\end{DLtt}
\subsection{\X11{} fill area style}
\index{X11!fill area!style}
%
\Shubr{IXSETFS}{(ISTYL,IFASI)}
\Action
Set fill area style.
\Pdesc
\begin{DLtt}{1234567}
\item[ISTYL] fill area interior style hollow or solid.
\item[IFASI] fill area style index.
\end{DLtt}
\subsection{\X11{} fill area colour}
\index{X11!fill area!colour}
%
\Shubr{IXSETFC}{(INDEX)}
\Action
Set colour index for fill area.
\Pdesc
\begin{DLtt}{1234567}
\item[INDEX] Colour index defined by \Rind{IXSETCO}.
\end{DLtt}



\subsection{\X11{} text alignment}
\index{X11!text!alignment}
%
\Shubr{IXSETTA}{(IH,IV)}
\Action
Set text alignment.
\Pdesc
\begin{DLtt}{1234567}
\item[IH] Horizontal alignment.
\item[IV] Vertical alignment.
\end{DLtt}
\subsection{\X11{} text fonts}
\index{X11!text!fonts}
%
\Shubr{IXSETTF}{(MODE,LENFNT,CHFONT)}
\Action
Set text font to specified name. This function returns 0 if
the specified font is found, 1 if not.
\Pdesc
\begin{DLtt}{1234567}
\item[LENFNT] Font name length.
\item[CHFONT] Font name.
\item[MODE] Loading flag.
\begin{DLtt}{12345}
\item[0] Search if the font exist.
\item[1] Search the font and load it if it exist.
\end{DLtt}
\end{DLtt}
\subsection{\X11{} text colour}
\index{X11!text!colour}
%
\Shubr{IXSETTC}{(INDEX)}
\Action
Set colour index for text.
\Pdesc
\begin{DLtt}{1234567}
\item[INDEX] Colour index defined my IXSETCOL.
\end{DLtt}
\subsection{\X11{} text size}
\index{X11!text!size}
%
\Shubr{IXTXTL}{(IW*,IH*,LENTXT,CHTEXT)}
\Action
Return the width and the height of a character string in the current font.
\Pdesc
\begin{DLtt}{1234567}
\item[IW] Text width.
\item[IH] Text height.
\item[LENTXT] Text length
\item[CHTEXT] Message
\end{DLtt}



\subsection{\X11{} box}
\index{X11!box}
%
\Shubr{IXBOX}{(IX1,IX2,IY1,IY2,MODE)}
\Action
Draw a box.
\Pdesc
\begin{DLtt}{1234567}
\item[IX1] X left down corner position.
\item[IY1] Y left down corner position.
\item[IX2] X right up corner position.
\item[IY2] Y right up corner position.
\item[MODE] drawing mode.
\begin{DLtt}{123456789}
\item[MODE = 0 ] Hollow.
\item[MODE = 1 ] The Box is filled with the Fill area colour index.
\end{DLtt}
\end{DLtt}
\subsection{\X11{} drawing mode}
\index{X11!drawing mode}
%
\Shubr{IXDRMDE}{(MODE)}
\Action
Set the drawing mode
\Pdesc
\begin{DLtt}{1234567}
\item[MODE] Drawing mode.
\begin{DLtt}{123456789}
\item[MODE = 1 ] Copy.
\item[MODE = 2 ] Xor.
\item[MODE = 3 ] Invert.
\end{DLtt}
\end{DLtt}
Note that the Xor and Invert modes work only when the
double buffer is off.
\subsection{\X11{} synchronization}
\index{X11!synchronization}
%
\Shubr{IXSYNC}{(MODE)}
\Action
Set synchronization on or off. By default the \XW{} bufferize all the
graphics outputs (synchronization off). It is possible to switch off this
capability with this routine (synchronization on) but the trafic
on the network is more important and the speed of the graphics decrease
by a factor 10 or 20 depending on the machine used.
\Pdesc
\begin{DLtt}{1234567}
\item[MODE] synchronization ON or OFF.
\begin{DLtt}{12}
\item[1] ON.
\item[0] OFF.
\end{DLtt}
\end{DLtt}



\Filename{H2X11inputfunctions}
\section{\X11{} input functions}
\subsection{\X11{} request locator}
\index{X11!request!locator}
%
\Shubr{IXREQLO}{(MODE,ITYP,IX*,IY*)}
\Action
Request locator input.
Return button number (1=left, 2=middle, 3=right)
\Pdesc
\begin{DLtt}{1234567}
\item[IX] Cursor position at the moment when the button is pressed.
\item[IY] Cursor position at the moment when the button is pressed.
\item[ITYP] Cursor type.
\begin{DLtt}{12345}
\item[ITYP=1] Tracking cross.
\item[ITYP=2] Cross-hair.
\item[ITYP=3] Rubber circle.
\item[ITYP=4] Rubber band.
\item[ITYP=5] Rubber rectangle.
\end{DLtt}
\item[MODE] Input mode.
\begin{DLtt}{12345}
\item[MODE=0] Request.
\item[MODE=1] Sample
\end{DLtt}
\end{DLtt}
\subsection{\X11{} request string}
\index{X11!request!string}
%
\Shubr{IXREQST}{(IX,IY,LENTXT,*CHTEXT*)}
\Action
Request a string input.The text is displayed and can be edited with
Emacs-like keybinding
return termination code (0 for ESC, 1 for RETURN)
\Pdesc
\begin{DLtt}{1234567}
\item[IX,IY] Position where text is displayed.
\item[LENTXT] Text length.
\item[CHTEXT] Text displayed (input), edited text (output).
\end{DLtt}

\Filename{H2X11inquiryroutines}
\section{\X11{} inquiry routines}
\subsection{Get the window size}
\index{get!X11!window geometry}
%
\Shubr{IXGETGE}{(IWID,IX*,IY*,IW*,IH*)}
\Action
Returns position and size of Window \Rarg{IWID}.
If \Lit{\Rarg{IWID}<0}, the size of the Display is returned in
variables \Rarg{IW} and \Rarg{IH}.
\Pdesc
\begin{DLtt}{1234567}
\item[IWID] Window identifier.
\item[IX] X Window position.
\item[IY] Y Window position.
\item[IW] Window or Display width.
\item[IH] Window or Display height.
\end{DLtt}



\subsection{Get window identifier}
\index{get!X11!window identifier}
%
\Shubr{IXGETWI}{(IWID, IDG*)}
\Action
Returns the \X11{} window identifier (return by {\em XCreateWindow})
of the window identified IWID.
\Pdesc
\begin{DLtt}{1234567}
\item[IWID] Window number returned by \Rind{IXOPNWI}.
\item[IDG] Window identifier.
\end{DLtt}
\subsection{Get the maximum number of planes}
\index{get!X11!planes}
%
\Shubr{IXGETPL}{(NBPLAN*)}
\Action
Returns the maximal number of planes of the display.
\Pdesc
\begin{DLtt}{1234567}
\item[NBPLAN] Number of planes.
\end{DLtt}
%
\Filename{H2Pixmapmanipulation}
\section{Pixmap manipulation}
\index{X11!Pixmap}
\subsection{Open a pixmap}
%
\Sfunc{IXOPNPX}{I = IXOPNPX(IW, IH)}
\Action
Open a new pixmap, and return the pixmap adress.
\Pdesc
\begin{DLtt}{1234567}
\item[IW] Pixmap width.
\item[IH] Pixmap height.
\end{DLtt}



\subsection{Close pixmap}
%
\Shubr{IXCLPX}{ }
\Action
Close the current opened pixmap.

\subsection{Copy pixmap}
%
\Shubr{IXCPPX}{(IPIX, IX, IY)}
\Action
Copy the pixmap {\tt IPIX} at the position ({\tt IX}, {\tt IY}) in the
current window.
\begin{DLtt}{1234567}
\item[IPIX] Pixmap adress.
\item[IX] X Pixmap position.
\item[IY] Y Pixmap position.
\end{DLtt}

\subsection{CLear pixmap}
%
\Shubr{IXCLRPX}{(IPIX)}
\Action
Clear the pixmap IPIX.
\begin{DLtt}{1234567}
\item[IPIX] Pixmap adress.
\end{DLtt}

\subsection{Remove pixmap}
%
\Shubr{IXRMPX}{(IPIX)}
\Action
Remove the pixmap IPIX.
\begin{DLtt}{1234567}
\item[IPIX] Pixmap adress.
\end{DLtt}

\subsection{Write pixmap on bitmap file}
%
\Shubr{IXWRPX}{(IPIX,IW,IH,ILEN,CHPX)}
\Action
Write the pixmap IPX in the bitmap file CHPX.
\begin{DLtt}{1234567}
\item[IPIX] Pixmap adress.
\item[IW] Pixmap width.
\item[IH] Pixmap height.
\item[ILEN] Pixmap name length.
\item[CHPX] Pixmap name.
\end{DLtt}

\subsection{Save a part of the screen in a pixmap}
%
\Shubr{IXWIPX}{(IPIX,IXPOS,IYPOS)}
\Action
Copy the area at the position IXPOS IYPOS in the current
window in the pixmap IPIX. The area copied has the size
of the pixmap IPIX.
\begin{DLtt}{1234567}
\item[IPIX] Pixmap adress.
\item[IXPOS] X position in the current window.
\item[IYPOS] Y position in the current window.
\end{DLtt}


\subsection{Double buffer}
%
\Shubr{IXS2BUF}{(IWID, MODE)}
Set the double buffer ON or OFF for the window IWID.
\begin{DLtt}{1234567}
\item[IWID] Window identifier. 999 means all the opened windows.
\item[MODE] 1: double buffer is on, 0: double buffer is off.
\end{DLtt}
%
%        Motif
%
\Filename{H2HIGZintegrationwithMotif}
\section{\HIGZ{} integration with Motif}
\index{HIGZ@{HIGZ}!integration with Motif}
\Shubr{ixsdswi}{(dsp, win)}

It is often useful to give to \HIGZ{} (i.e. the \Lit{IX...} routines), the 
address of
a pre-opened window in which the \HIGZ{} output will be directed,
in particular in the context of \MOTIF{} applications written in C. This
routine, callable from C, provides this facility.
\Action
Allows to set the DISPLAY and the WINDOW address
from outside \HIGZ{} (e.g. a \MOTIF{} program).
The next call to \Rind{IXOPNWI} (after the call to \Rind{ixsdswi})
will use \Rarg{dsp} and \Rarg{win} to create the window.
\Pdesc
\begin{DLtt}{1234567}
\item[dsp] Display.
\item[win] Window.
\end{DLtt}


\Shubr{ixmotif}{(dsp, motifopen, motifinit, motifclose)}
Allows \KUIP{} (or any other C package) to give to \HIGZ{} the adress of three
routines.
\begin{DLtt}{12345678901}
\item[dsp] Display.
\item[motifopen] to open a \KUIP{}/\MOTIF{} window
\item[motifinit] to initalize a \KUIP{}/\MOTIF{} window (add the callbacks)
\item[motifclose] to close a \KUIP{}/\MOTIF{} window
\end{DLtt}

\Shubr{IXMINIT}{(IWID)}
Initialize the \MOTIF{} windows (add the callbacks with \Rind{motifinit}).
\begin{DLtt}{1234567}
\item[IWID] Window number returned by \Rind{IXOPNWI}.
\end{DLtt}
