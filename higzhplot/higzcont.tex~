%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
%   HIGZ  User Guide -- LaTeX Source                                           %
%                                                                              %
%   Chapter: Control routines                                                  %
%                                                                              %
%   This document needs the following external EPS files:                      %
%     none                                                                     %
%                                                                              %
%   Editor: Michel Goossens / AS-MI                                            %
%   Last Mod.: 9 July 1993 oc                                                  %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Filename{H1Overallcontrolroutines}
\chapter{Overall control routines}

\Filename{H2Controlroutines}
\section{Control routines}
\index{control!routines}
 
\subsection{Initialization}
\index{initialization}
\Shubr{IGINIT}{(NWHIGZ)}
\Action
This routine initializes \HIGZ. This must be the first function to be used in
the \HIGZ~package.
\Pdesc
\begin{DLtt}{1234567}
\item[NWHIGZ] Minimal \ZEBRA~dynamic space in memory for the \HIGZ~division;
              A value of 0, indicates that allocation will be done
	      automatically. {\tt NWHIGZ} must be less than {\tt NWORDS-5000}
              where {\tt NWORDS} is the size of the common block {\tt PAWC}
              (see below).
\end{DLtt}
The \ZEBRA~memory allocation must be defined in the application program with
the common block:
\begin{XMP}
      COMMON/PAWC/RPAW(NWORDS)
\end{XMP}
If \HIGZ~is used outside the context of \PAW~the routine \Rind{MZPAW} must be
called in the main program in order to initialize the \ZEBRA~package
\cite{bib-ZEBRA}, before calling \Rind{IGINIT}. Note that packages like
\HBOOK\cite{bib-HBOOK}, \HPLOT\cite{bib-HPLOT}, \PAW\cite{bib-PAW} and
\KUIP\cite{bib-KUIP} call \Rind{MZPAW} directly and therefore the user should
not issue such a call. These packages store dynamic structures in the same
common {\tt/PAWC/}.
\begin{XMP}
      CALL MZPAW(NWORDS,'M')
\end{XMP}
 
\subsection{Termination}
\index{termination}
\Shubr{IGEND}{ }
\Action
This routine terminates \HIGZ. This must be the last call to be issued in a
\HIGZ~session. \Rind{IGEND} deactivates and closes all open workstations.
It also closes the basic graphics package by calling \Rind{IDAWK}, \Rind{ICLWK},
\Rind{ICLKS}.
 
\subsection{Graphic package control}
\index{graphic!package!control}
\Shubr{IGSSE}{(IERRF,KWTYPE)}
\Action
In general, the initialization of the underlaying graphics package consists in
several calls to different routines, in order to set the environment parameters.
For user's convenience and for most applications, \Rind{IGSSE} initializes the
standard graphic package environment. In particular, the default primitives
attributes and the default window, viewport, workstation window and workstation
viewport are initialized. Sophisticated applications may need to call the
specialized basic control routines, namely \Rind{IOPKS}, \Rind{IOPWK},
\Rind{IACWK}, \Rind{ISWKWN} and \Rind{ISWKVP}, instead of using \Rind{IGSSE}.
\Rind{IGSSE} opens only a single workstation.
\Pdesc
\begin{DLtt}{1234567}
\item[IERRF] Error file logical unit number.
\item[KWTYPE] Workstation type. See the description of \Rind{IOPWK} section
\ref{IOPWK}.
\end{DLtt}
\par
\Rind{IGSSE} calls the following routines:
\begin{DLtt}{1234567890123456789012345}
\item[IOPKS] See section \ref{IOPKS}.
\item[IOPWK(1,KONID,KWTYPE)] See section \ref{IOPWK}.
\item[IACWK(1)] See section \ref{IACWK}.
\end{DLtt}
Note that {\tt KONID} is initialized in \Rind{IGSSE} depending on the \UGP~
used. In general {\tt KONID} is set to 1.
\par
The workstation window and viewport are also initialized in
\Rind{IGSSE} as follows:
\begin{XMP}
     CALL ISWKWN(1,0.,1.,0.,1.)
     CALL ISWKVP (1,0.,XMAX,0.,YMAX)
\end{XMP}
where {\tt XMAX} and {\tt YMAX} are the screen dimensions in pixels.
\par
The following primitives attributes are
initialized:
\index{polyline!colour index!default value}
\index{polyline!type!default value}
\index{polyline!width!default value}
\index{polymarker!colour index!default value}
\index{polymarker!type!default value}
\index{polymarker!scale factor!default value}
\index{fill area!colour index!default value}
\index{fill area!interior style!default value}
\index{fill area!style index!default value}
\index{text!character height!default value}
\index{text!character up vector!default value}
\index{text!alignment!default value}
\index{text!font and precision!default value}
\index{text!colour index!default value}
\index{clipping!default value}
\index{GKS@{{\sf GKS}}!aspect source flag}
\index{default attributes values}
 
\begin{center}
\begin{tabular}{||l|l||}
\hline
 Attributes names            & Default values         \\
\hline
Polyline colour index        & 1                      \\
Line type                    & 1                      \\
Line width                   & 1.0                    \\
Polymarker colour index      & 1                      \\
Marker type                  & 1                      \\
Marker scale factor          & 1.0                    \\
Fill area colour index       & 1                      \\
Fill area interior style     & 0                      \\
Fill area style index        & 1                      \\
Character height             & 0.01                   \\
Character up vector          & 0.0,1.0                \\
Text alignment               & 0,0                    \\
Text font and precision      & 0,2                    \\
Text colour index            & 1                      \\
Clipping indicator           & 1                      \\
\GKS~Aspect source flag      & Individual attributes  \\
\hline
\end{tabular}
\end{center}

\par
\index{colour table}
The first heigh elements of the colour table are initialized as follow:
\begin{center}
\begin{tabular}{||c|l||}
\hline
 Colour indeces              & Colour                 \\
\hline
            0                & White                  \\
            1                & Black                  \\
            2                & Red                    \\
            3                & Green                  \\
            4                & Blue                   \\
            5                & Yellow                 \\
            6                & Magenta                \\
            7                & Cyan                   \\
\hline
\end{tabular}
\end{center}
 
\index{telnetg}
In addition to this initialization role, \Rind{IGSSE}, when it is used in the
context of the \TELNETG~program, allows to open the connection between the
remote machine and the local one even if the \XW~is not available.
This is done by giving to \Rind{IGSSE} the negative value of the local
workstation type.
\subsection{Display control}
\index{display!control}
\par
Many terminals provide different modes: for example a Tektronix emulation mode
(or graphics mode) and a VT100 emulation mode (or alphanumeric mode). Some
terminals have (additionally) two overlayed screens: a graphics screen and an
alphanumeric screen (or dialog scroll). If a \FORTRAN~input is requested, the
operating system generally displays a prompt (for example ``{\tt CMS READ}''),
which belongs to the alphanumeric screen in VT100 emulation mode.
\index{alphanumeric mode}
\par
\HIGZ~provides two functions to switch between these modes and to enable
\FORTRAN~input and output. In some systems (e.g. IBM's VM/CMS) it is essential
that all \FORTRAN~input/output be performed in alphanumeric mode, else an
abend will occur.

\begin{minipage}[t]{.49\textwidth}
\subsubsection*{Graphic mode}
\index{graphic!mode}
\Shubr{IGSG}{(KWKID)}
\Action
This routine takes the terminal back into graphics mode and e\-na\-bles
gra\-phics in\-put/out\-put. This task is in general performed automatically by
all the basic graphics routines.
\Pdesc
\begin{DLtt}{1234567}
\item[KWKID] Workstation identifier
\end{DLtt}
\end{minipage}
\hfill
\begin{minipage}[t]{.49\textwidth} 
\subsubsection{Alphanumeric mode}
\index{alphanumeric mode}
\Shubr{IGSA}{(KWKID)}
\Action
This routine takes the terminal out of graphics mode into alphanumeric mode. On 
terminals like Pericom Graphics the bell is rung and the user has to press the 
{\tt <CR>} key to continue.
\Pdesc
\begin{DLtt}{1234567}
\item[KWKID] Workstation identifier
\end{DLtt}
\end{minipage}
 
\Filename{H2TheminimalHIGZprogram}
\section{The minimal \HIGZ~program}
We are now able to write the minimal \HIGZ~program which only opens and closes
\HIGZ~without doing any graphics. All the graphics routines described in the
rest of this manual will be placed between the call to \Rind{IGSSE} and the
call to \Rind{IGEND}.
\begin{XMPt}{The minimal \HIGZ~program}
      PROGRAM MINIMAL
*
      PARAMETER (NWPAW=20000)
      COMMON/PAWC/RPAW(NWPAW)
*                                Initialize storage in /PAWC/.
      CALL MZPAW(NWPAW,'M')
*                                Initialize \HIGZ.
      CALL IGINIT(0)
*                                Set standard environment.
*                                Errors are written to standard output (UNIT 6).
*                                Workstation type is 1.
      CALL IGSSE(6,1)
*                                Deactivate and close all open workstations 
*                                Close \HIGZ.
      CALL IGEND
*
      END
\end{XMPt}
Note that by default the \Rind{MZPAW} routine does a verbose initialization of
\ZEBRA. 
To have a quiet initialization the single call to \Rind{MZPAW} should be replaced by:

\begin{XMP}
      CALL MZEBRA(-3)
      CALL MZPAW(NWPAW,' ')
\end{XMP}

{\bf
 Warning: on the IBM VM/CMS systems, a: 

\begin{XMP}
      CALL INITC
\end{XMP}

is mandatory in the main program to force the loading of the C library.
\index{IBM VM!INITC}
}
