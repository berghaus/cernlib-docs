head	1.2;
access;
symbols;
locks; strict;


1.2
date	98.08.19.14.16.13;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	94.01.17.12.31.02;	author goossens;	state Exp;
branches;
next	;


desc
@Initial installment
@


1.2
log
@Version put on WWWASD/cernlib/comis
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                 %
%   COMIS - Reference Manual -- LaTeX Source                      %
%                                                                 %
%   Appendix 3                                                    %
%                                                                 %
%   Files referenced: none                                        %
%                                                                 %
%   Editor: Michel Goossens / CN-AS                               %
%   Last Mod.: 29 Jun 1993  20:10  mg                             %
%                                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\Filename{H1comisappendix-actual-parameters}
\chapter{Obtaining the values of actual arguments}
\label{sec:obtain-values-for-actual-paramers}
 
A group of routines to handle actual arguments is provided
by \COMIS{}.
These routines allow the user
\begin{UL}
\item to obtain the number of actual arguments;
\item to obtain the type and the mode of each argument;
\item to get the value or execute argument's code.
\end{UL}
These routines can be
used at the \COMIS{} level or at the Fortran one, if the user's
routine was called from the \COMIS{} level.

The number of actual arguments, \Lit{NPAR}, can be obtained with:

\Sfunc{CSNPAR}{NPAR = CSNPAR(DUMMY)}
\index{actual arguments}\index{arguments!actual}

The type and mode of the K-th argument can be obtained by:

\Sfunc{CSKPAR}{IT=CSKPAR(K,MODE)}

where
\begin{alltt}
  IT=0    unknown              MODE=0   unknown
     1    integer                   1   expression
     2    real                      2   constant
     3    character                 3   variable
     4    logical                   4   array element
     5    double precision          5   function call
     6    Hollerith                 6   array name
                                    7   external
                                    8   [sequence of statements]
                                    9   omitted (empty) argument
\end{alltt}

The value of the \Lit{K}th argument or the execution of its code
is obtained by:

\Shubr{CSCPAR}{(K)}
 
In fact this subroutine fills the system COMMON block \Lit{CSWPAR},
whose definition is described below:
\index{CSWPAR@@{\tt CSWPAR}!system common block}

\begin{alltt}
 DOUBLE PRECISION DVPAR
 COMMON/CSWPAR/LORN,IREP,NPAR,ITPAR,MDPAR,JRESP,JCHPAR,NCHPAR,IVPAR,RVPAR,DVPAR,JCHVP,NCHVP
\end{alltt}
where
\begin{DLtt}{123456}
\item[LORN]   is set by the user. It specifies  the manner  of argument
      processing:
\begin{DLtt}{1}
\item[0] ordinary Fortran-like processing, i.e. the value
     of the argument is taken immediately using the argument
     address.
\item[1] ALGOL-like processing ``by name'': the argument
     is re-evaluated as if it was in the routine's
     text at that point.
\end{DLtt}
\item[IREP]    the reply word:
        1 - o.k.;  less or equal 0 - error.
\item[NPAR]    the number of actual arguments.
\item[ITPAR]   the type of the argument.
\item[MDPAR]   the mode of the argument .
\item[JRESP]   the address of the argument's value.
\item[JCHPAR]  the 'character' address
\item[NCHPAR]  the length of the argument's text.
\item[IVPAR]   the integer value of the argument.
\item[RVPAR]   the real value of the argument.
\item[DVPAR]   the double precision value of the argument.
\item[JCHVP]   the 'character' address
\item[NCHVP]   the length of the character type argument.
\end{DLtt}
To obtain the value of the integer type argument the
next integer function may be used:

\Sfunc{CSIPAR}{I=CSIPAR(K)}

To obtain the value of the real type argument the
next function may be used:

\Sfunc{CSRPAR}{R=CSRPAR(K)}
 
These two latter functions call subroutine  \Rind{CSCPAR} internally.
 
\Examples

Using an Algol-like manner of argument processing.

\begin{alltt}
  FUNCTION SUM(P1,I,N)
  SUM=0.
  DO I=1,N  SUM=SUM+CSRPAR(1) OD
  END
\end{alltt}
 
The \COMIS{} main program
\begin{alltt}
  .....
  LORN=1  I=1  S=SUM(A(I),I,N) END  \textrm{produces}  S=A(1)+A(2)+ ... +A(N)

\textrm{while the program}
  .....
  LORN=1  K=1  S=SUM(A(I,K)*B(K,J),K,M) END \textrm{produces the} \Lit{(I,J)}th \textrm{inner product of} \Lit{A} \textrm{and} \Lit{B}.
\end{alltt}
 


The length of the K-th argument's text can be obtained by

\Sfunc{CSLPAR}{L=CSLPAR(K)}

The K-th argument's text can be moved into a variable of
character type by

\Shubr{CSTPAR}{(K,CHARVAR)}

The code of the K-th argument with the mode "sequence of statements"
can be stored in the \COMIS{} internal buffer as the \COMIS{} routine
with given name \Lit{NAME} by

\Shubr{CSSPAR}{CSSPAR(K,'NAME',IADP)}
 
where output parameter \Lit{IADP} is the address of the \COMIS{} routine.
 
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
\begin{XMP}
d51 1
a51 1
\end{XMP}
d62 1
a62 1
\begin{XMP}
d65 1
a65 1
\end{XMP}
d108 1
a108 1
\begin{XMP}
d113 1
a113 1
\end{XMP}
d116 1
a116 1
\begin{XMP}
d123 1
a123 1
\end{XMP}
@
