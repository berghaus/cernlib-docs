head	1.2;
access;
symbols;
locks; strict;


1.2
date	98.08.19.14.16.19;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	94.01.17.12.31.04;	author goossens;	state Exp;
branches;
next	;


desc
@Initial installment
@


1.2
log
@Version put on WWWASD/cernlib/comis
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                 %
%   COMIS - Reference Manual -- LaTeX Source                      %
%                                                                 %
%   Chapter 1                                                     %
%                                                                 %
%   Files referenced: none                                        %
%                                                                 %
%   Editor: Michel Goossens / CN-AS                               %
%   Last Mod.: 17 Jan 1993  12:15  mg                             %
%                                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\Filename{H1comisintroduction}
\chapter{Introduction}

\Filename{H2comis-what-is-it}
\section{\COMIS{} - What is it ?}
 
\COMIS{} (a COMpilation and Interpretation System)
is a Fortran interpreter.
With \COMIS{} you can interactively define, edit and execute any
Fortran-like routines (e.g., consisting of one simple
output statement), without recompiling and relinking.
A small user interface system is part of \COMIS{}, and an interface
with the local editor is also provided.
 
\COMIS{} is one of the key components of the \PAW{} system and is
currently implemented on IBM VM/CMS, VAX/VMS, Apollo (Aegis and Unix),
IBM RS/6000, DEC Station 3100, Silicon Graphics, Sun, HP/UX and MSDOS.
It can also be used as an interactive compiler and
interpreter from inside a Fortran 77 program.
If the source of your program to be compiled is in a file
\Lit{IFORT.FOR} then you should use the following code:

\subsection*{Example of calling \COMIS{} from within Fortran}
\begin{alltt}
    PROGRAM MAIN
    CALL HLIMIT(10000)
    CALL CSINIT(2000)
  1 CALL CSPAUS('IFORT')
    GO TO 1
    END
$ \Ucom{Fortran IFORT}
$ \Ucom{link IFORT,'LIB$'}
$ \Ucom{run IFORT}
\end{alltt}
 
You can run the simple example below by typing the lines
below in response to the \COMIS{} prompt ``\Lit{CS>}'':
\begin{alltt}
  \Ucom{DO 1 X=3.14, -3.14,-0.7}
  \Ucom{PRINT *,X,SIN(X)}
\Ucom{1 CONTINUE}
  \Ucom{END}
\end{alltt}
or the same code in short notation as: 
\Ucom{DO X=3.14, -3.14,-0.7  PRINT *,X,SIN(X)  OD \#}
 
The sequence \Ucom{STOP END} will cause exit from \COMIS{}.

\Filename{H2comis-at-a-glance}
\section{\COMIS{} at a glance}
 
\COMIS{} is a library of routines written in Fortran 77. 
A few routines exist also in assembler on IBM. 
\COMIS{} has two major components:

\begin{UL}
\item A set of subroutines to interactively compile and execute
      Fortran-like routines.
\item A package of subroutines, handling the interface between
      the user's routines compiled with the normal Fortran compiler
      and those compiled interactively.
\end{UL}
 
The \COMIS{} system supports the following facilities:
\begin{UL}
\item The interpretation of \COMIS{} routines entered
      either interactively or through text files.
\item The ability to call any user routine from the \COMIS{}
      program  and vice versa.
\item The access to user COMMON\index{COMMON} blocks data from the
      \COMIS{} program.
\item The ability to redefine any \COMIS{} program.
\end{UL}

\Filename{H2comis-with-PAW}
\section{\COMIS{} with PAW}
\label{sec:comis-with-paw}
 
A high level interface to \COMIS{} is provided by \PAW.
The PAW user creates and edit text files containing Fortran code
using the local editor. These files are automatically interpreted
and executed by the PAW commands without typing any \COMIS{} commands.
From the PAW level \COMIS{} may be invoked in one of the three following
ways:

\begin{UL}
\item Using a \COMIS{} command. Example:
\begin{alltt}
PAW > \COMIS{}
CS >   do x=1.,10.
MND>      sq=sqrt(x)*10.
MND>      print *,x,sq
MND>   od
MND>   end
CS > quit
PAW >
\end{alltt}
\item Using an APPLication command. Example:
\begin{alltt}
PAW > Vector/Create Y(10) r 1 2 3 4 5 6 7 8 9 10
PAW > APPLication \COMIS{} QUIT
CS >     subroutine demo
FSD>     vector y, x(10)
FSD>     do 10 i=1,10
FSD>       xx=i
FSD>       x(i)=y(i)*sqrt(xx)*10.
FSD>  10 continue
FSD>     end
CS >     call demo
MND>     end
CS > quit
PAW> Vector/print X
\end{alltt}
\item Using a CALL command: \Lit{CALL urout}.
\begin{UL}
\item Case 1:\\
  \Lit{urout} is a routine compiled and linked with \PAW,
  for example \Lit{HPRINT}.
  Then one can type \Lit{CALL HPRINT(10)}
\item Case 2:\\
  \Lit{urout} is the name of a file which can be edited interactively
  with the \PAW{} \Cind{EDIT} command. For example if the file \Lit{UROUT.FOR}
  contains:
\begin{alltt}
      SUBROUTINE UROUT(N)
      SUM=0.
      DO 10 I=1,N
        SUM=SUM+I
  10  CONTINUE
      PRINT *,SUM
      END
\end{alltt}
Then one can type \Lit{CALL UROUT.FOR(10)}.
\end{UL}
\end{UL}
 
PAW users are recommended to use the standard Fortran notation
and to read the following chapter to be aware of the few \COMIS{}
restrictions.





@


1.1
log
@Initial revision
@
text
@d35 3
a37 1
\begin{XMPt}{Example of calling \COMIS{} from within Fortran}
d47 1
a47 1
\end{XMPt}
d51 1
a51 1
\begin{XMP}
d56 1
a56 1
\end{XMP}
d101 1
a101 1
\begin{XMP}
d110 1
a110 1
\end{XMP}
d112 1
a112 1
\begin{XMP}
d126 1
a126 1
\end{XMP}
d137 1
a137 1
\begin{XMP}
d145 1
a145 1
\end{XMP}
@
