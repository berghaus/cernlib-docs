


CERN Program Library Long Writeup Q100


        ZEBRA RZ

   Random Access Package

 Version 3.67 (October 1991)

             R. Brun/CN

   M. Goossens/CN (Document Editor)

       CERN Geneva, Switzerland
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ____________________________________________________________________________*
 *________||||
   ||||                                                                        *
 *        |
   ||||                                  Copyright Notice                      *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||   ZEBRA RZ # File and Tape Management System                           *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||   CERN Program Library entry Q123                                      *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||   Copyright CERN, Geneva 1991                                          *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||   Copyright and any other appropriate legal protection of these compute*
 *r programs|and associated documen-
   ||||                                                                        *
 *        |
   ||||   tation reserved in all countries of the world.                       *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||   These programs or documentation may not be reproduced by any method w*
 *ithout prior|written consent of
   ||||                                                                        *
 *        |
   ||||   the Director-General of CERN or his delegate.                        *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||   Permission for the usage of any programs described herein is granted *
 *apriori to|those scienti#c institutes
   ||||   associated with the CERN experimental program or with whom CERN has c*
 *oncluded|a scienti#c collaboration
   ||||                                                                        *
 *        |
   ||||   agreement.                                                           *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||   Requests for information should be addressed to:                     *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||                       CERN Program Library Office                      *
 *        |
   ||||                                                                        *
 *        |
   ||||                       CERN-CN Division                                 *
 *        |
   ||||                                                                        *
 *        |
   ||||                       CH-1211 Geneva 23                                *
 *        |
   ||||                                                                        *
 *        |
   ||||                       Switzerland                                      *
 *        |
   ||||                                                                        *
 *        |
   ||||                       Tel.  +41 22 767 4951                            *
 *        |
   ||||                                                                        *
 *        |
   ||||                       Fax.  +41 22 767 7155                            *
 *        |
   ||||                                                                        *
 *        |
   ||||                       Bitnet:  CERNLIB@CERNVM                          *
 *        |
   ||||                       DECnet:  VXCERN::CERNLIB (node 22.190)           *
 *        |
   ||||                                                                        *
 *        |
   ||||                       Internet:  CERNLIB@CERNVM.CERN.CH                *
 *        |
   ||||                                                                        *
 *        |
   ||||                                                                        *
 *        |
   ||||________________________________________________________________________*
 *________|
Trademark notice: All trademarks appearing in this guide are acknowledged as su*
 *ch.
                                                                               *
 * i


Preliminary remarks


This Complete Reference of the ZEBRA RZ system consists of three parts:


   1 An overview of the system.

   2 A user guide, describing each routine.

   3 A technical description of the system.


the CERNMAN style option. All pictures shown are produced with PAW and are incl*
 *uded in PostScript[?] format in the
manual.


Related Documents


This document can be complemented by the following documents:


   o ZEBRA - Data Structure Management System[?]

   o CSPACK - Client Server package[?]

   o FATMEN - Distributed File and Tape Management System[?]


Table of Contents
List of Figures
List of Tables

       Part I


RZ overview


           1




Chapter 1: Direct access input-output


1.1  Main goals


General


The ZEBRA RZ package permits the storage and retrieval of ZEBRA data structures*
 * or FORTRAN vectors in random
access #les. Files may reside on standard direct access devices such as magneti*
 *c disk, or be mapped to virtual memory.
RZ #les can be accessed by several users simultaneously, even across networks. *
 *Remote #le access and transfer is
provided for RZ #les using standard tools, such as NFS and ftp. In the heteroge*
 *neous environment, the tools provided
in the CSPACK package may be used.

The RZ package is not a relational database management system, but organises da*
 *ta in a hierarchical manner which is
suitable for many applications in High Energy Physics, and probably outside.


Pathnames


The basic unit of information addressed in an RZ #le is a ZEBRA data structure,*
 * in the simplest case a single ZEBRA
bank. We call this an RZ data object. Each data object is referred to by a uniq*
 *ue object name. Object names are
composed of a pathname, and one or more identi#ers known as keys.

The pathnames used by the RZ package were inspired by the Unix #le naming synta*
 *x and hence they typically carry
mnemonic meanings and show the relationships between different objects. Unlike *
 *UNIX, however, RZ pathnames are
not case sensitive, i.e. upper and lower case are both treated as upper case.

As in the Unix #le system, one may have directories and subdirectories seperate*
 *d by slash characters /. An interelated
group of objects may be grouped together in a directory.

When an RZ #le is opened, a user speci#ed name is associated with it. This name*
 * is known as the top directory and is
not part of the #le itself. This allows the user to have simultaneous access to*
 * multiple #les with the same RZ directory
structure.

At the very highest level in the RZ tree is the root, referred to by a double s*
 *lash, //.

The directory above a given subdirectory is known as the parent directory and m*
 *ay be referred to by a backslash
character ".

Two other concepts are also provided, namely the current working directory, or *
 *CWD and the naming directory.
Objects are retrieved and stored relative to the current working directory. The*
 * naming directory is a mechanism for
referring to a frequently used directory. It is initially set to the top direct*
 *ory, but may be reset at any time. The naming
directory may be referred to by the symbol ".

The following FORTRAN program provides examples of the above terms. For simplic*
 *ity, the code to initialise the
ZEBRA system and open the RZ #les (via the routine RZOPEN) has been omitted.

   ||||___________________________ Example of RZ pathnames and_terms___________*
 *________|
*
*     Initialise RZ files on FORTRAN units LUN1, LUN2
*     with top directory names TOP1 and TOP2
*
      CALL RZFILE(LUN1,'TOP1',' ')
      CALL RZFILE(LUN2,'TOP2',' ')
*
*     Print the current naming directory
*     (It will have been set to TOP2 by RZFILE)
*
      CALL RZNDIR(' ','P')
*
*     Set the current working directory
*
      CALL RZCDIR('//TOP1/SUB1/SUB2/SUB3',' ')
*
*     Change directory relative to current working directory
*     (to parent directory in this case)
*
      CALL RZCDIR('" ',' ')
*


                                        3
4                                                      Chapter 1. Direct access*
 * input-output


*     Change directory to naming directory
*
      CALL RZCDIR('"',' ')
|_________________________ End of Example of RZ pathnames and_terms____________*
 *____|


Keys and Cycles


Data objects are identi#ed beyond the pathname by keys, which may be a single w*
 *ord of information (integer, bit
string or Hollerith) or a vector of such words. The keys are not part of the pa*
 *thname itself.

For example, in the case of HBOOK histograms a single integer key, the histogra*
 *m ID, may be used. Histograms
relating to different information could be stored in separate subdirectories an*
 *d referred to in a unique and clear manner
by the associated pathname and key, e.g. //HISTOS/CUT1, keys (or IDs) 1-10.

Successive versions of objects with identical pathname/key combination may exis*
 *t simultaneously. They are distin-
guished by a cycle number, which is incremented automatically upon creation of *
 *successive data objects. Cycles may
be referred to explicitly, the usual default is the highest cycle number. The c*
 *oncept of cycles for successive versions
of data objects with identical names was taken from the VAX/VMS #le system.


1.2  Pratical examples of usage of the RZ package


HBOOK


The RZ package is probably most widely used to store HBOOK histograms and ntupl*
 *es, e.g. for subsequent analysis
with PAW. In such cases, shared write access is not normally required. The #le *
 *is typically created by a single user or
job and subsequently read a small number of times.

|______________________ Example of storing HBOOK histograms in_an_RZ_#le_______*
 *____|
PAW > ldir

 ************** Directory ===> //LUN1 <===


                 Created 911030/1215  Modified 911030/1215



 ===> List of objects
     HBOOK-ID  CYCLE   DATE/TIME   NDATA   OFFSET    REC1    REC2
         1       1   911030/1215    103       1       3
         2       1   911030/1215    104     104       3
         3       1   911030/1215    107     208       3
         4       1   911030/1215    106     315       3
         5       1   911030/1215    106     421       3
         6       1   911030/1215     56     527       3


  Number of records =    2  Number of megawords =  0 +  1606 words
  Per cent of directory quota used =    .050
  Per cent of file used           =    .050
  Blocking factor                 =  28.418
 PAW >
|___________________ End of Example of storing HBOOK histograms_in_an_RZ_#le___*
 *___|

The above output from the PAW command LDIR shows the contents of an RZ #le whic*
 *h has no subdirectories and a
few histograms. The objects are accessed using the top directory name //LUN1 an*
 *d the histogram ID.

One could of course have used a more complex directory structure, but the numbe*
 *r of directories and objects such a
#le is typically rather small.


FATMEN


The FATMEN system uses the ZEBRA RZ package in a more complex manner. In this c*
 *ase the RZ #les are read by
many jobs simultaneously, often over the network. Much more complex object name*
 *s are used, with pathnames such
as the following example from the DELPHI collaboration.

|__________________________ Example of an RZ pathname in FATMEN________________*
 *____|
1.2. Pratical examples of usage of the RZ package                              *
 *               5


FM> pwd
Current Working Directory = //CERN/DELPHI/P01`ALLD/CDST/PHYS/Y90V03/E093.3/L0312
FM>

   ||||_______________________ End of Example of an RZ pathname in_FATMEN______*
 *_________|

A single RZ #le that is used by FATMEN may well contain in excess of one hundre*
 *d thousand entries in several
thousand directories. In addition, these RZ #les are constantly updated and mus*
 *t retain consistancy to long running
batch jobs.

These goals are met by ensuring that only a single process ever has write acces*
 *s to a FATMEN RZ #le. All updates
are performed by dedicated servers.
6                                                     Chapter 1. Direct access *
 *input-output

              Part II


RZ callable routines


                  7




Chapter 2: Description of user callable RZ routines


2.1  Open a direct access #le


   ____________________________________________________________________________*
 *______
   ||||   CALL RZOPEN (LUN,CHDIR*,CHNAME,CHOPT,*LRECL*,ISTAT*)                 *
 *       |
   ||||________________________________________________________________________*
 *______ |

Input parameter description:

LUN     Logical unit number associated with the RZ #le. The RZOPEN routine issu*
 *es a FORTRAN OPEN statement
        for the speci#ed logical unit.
CHDIR   Character variable in which the top directory name is returned (option *
 *W). The name has the form 'LUNn',
        e.g. 'LUN1' or 'LUN99'
CHNAME  Character variable specifying the name of the #le to be opened.
CHOPT   Character variable specifying the options required.

        ' ' default, open #le in readonly mode
        'L' create #le with relative organization (VAX only)
        'N' open a new #le
        'S' open #le in shared readonly mode
        'U' open #le in update mode
        'SU'open #le in shared update mode
        '1' open #le read/write assume single user
        'W' return in CHDIR directory name include
        'Y' suppress LRECL consistency check
        'C' Use C I/O instead of FORTRAN I/O

LRECL   Integer variable specifying the record length of the #le in machine wor*
 *ds. If a value of zero (0) is speci#ed,
        the RZOPEN routine will attempt to obtain the correct record length fro*
 *m the #le itself. A value of zero
        must not be speci#ed for new #les.
ISTAT   Integer variable in which the status code is returned.

The RZOPEN routine opens a new or existing RZ #le on the speci#ed logical unit.*
 * A call to RZFILE, for existing
#les, or RZMAKE, for new #les, must follow a successful call to RZOPEN.

On MVS systems, the pre#x for the current userid will be automatically prepende*
 *d to the #lename unless the #lename
begins with a dot ('.').


   ||||_____________________________ Example of valid MVS #lenames_____________*
 *__________|
*
*     RZOPEN will open the file R01JDS.RZFILE.DATA
*     for both of the following filenames, assuming
*     that R01JDS is the current userid prefix.
*
      CHFILE = 'RZTEST.DATA'
      CHFILE = '.R01JDS.RZTEST.DATA'

   ||||__________________________ End of Example of valid MVS #lenames_________*
 *_________|


2.2  Create a new RZ #le


   ____________________________________________________________________________*
 *______
   ||||   CALL RZMAKE (LUN,CHDIR,NWKEY,CHFORM,CHTAG,NREC,CHOPT)                *
 *       |
   ||||________________________________________________________________________*
 *______ |

Input parameter description:

LUN     Logical unit number associated with the RZ #le. A FORTRAN OPEN statemen*
 *t or call to the routine
        RZOPEN must precede the call to RZMAKE.
        Starting address of the memory area which will contain the RZ informati*
 *on ('M' option)
CHDIR   Character variable specifying the name of the top directory to be assoc*
 *iated with unit LUN (up to 16
        characters).
NWKEY   Number of words associated to a key (maximum 9)


                                        9
10                                           Chapter 2. Description of user cal*
 *lable RZ routines


CHFORM  Character variable describing each element of the key vector

        'B' Bit string but not zero
        'H' Hollerith (4 characters)
        'A' Same as H except for RZLDIR (see RZLDIR)
        'I' Integer (nonzero)

CHTAG   Character array de#ned as CHARACTER*8 CHTAG(NWKEY).
        Each element of the array allows the description of the corresponding e*
 *lement in the key vector with a tag
        of up to 8 characters.
NREC    Number of physical records for the primary allocation
CHOPT   Character variable specifying the selected options.

        medium  ' 'Disk (default)
                'M'Memory - The user must allocate at least NREC*LUN words of m*
 *emory starting at address
                   LUN if he uses this option.
        mode    ' 'Native mode (default)
                'X'Exchange mode (32 bit machines only)
        other   'F'Format NREC records, unless option M.

Subroutine RZMAKE creates a new RZ #le on the speci#ed logical unit. Should the*
 * #le already exist, the routine
RZFILE should be used.

On return from RZMAKE, IQUEST(1) will be set to 0 if the routine was successful*
 *. A non-zero value for IQUEST(1)
indicates an error.

The following example opens and creates a new RZ #le, whose top directory conta*
 *ins three words per key, the #rst
one being an integer (the year) and the two others being Hollerith (the month a*
 *nd the day). A total of 5000 records of
length 4096 bytes are requested.

|__________________________ Example of using the routine_RZMAKE________________*
 *___|
      CHARACTER*16 CHDIR
      CHARACTER    CHTAG(3)*8
      DATA CHTAG/'Year','Month','Day'/


      LRECL = 1024
      CALL RZOPEN(LUN,CHDIR,'RZTEST.DAT','N',LRECL,ISTAT)
      IF(ISTAT.NE.0) GOTO 999
      CALL RZMAKE(LUN,'Top`Dir',3,'IHH',CHTAG,5000,' ')


  999 PRINT *,' ERROR issuing RZOPEN'
"end-XMPt"
"par
Option F is particularly important for RZ files on
VM/CMS systems, when shared access is required. Further
details are given in Appendix A.
"section-Access an existing RZ file"
"index-RZ!access"
"Subr-CALL RZFILE (LUN,CHDIR,CHOPT)"
"Idesc
"begin-DLtt"-1234567"
"item[LUN]Logical unit number associated with the RZ file.
A FORTRAN -"tt OPEN" statement must precede the call to "Rind-RZFILE".
"item[CHDIR]Character variable specifying the name of the top directory to be
associated with unit -"tt LUN".
"item[CHOPT]Character variable specifying the selected options.
"begin-DLtt"-1234567"
"item[medium]
"begin-DLtt"-12"
"item[' ']Disk (default)
"end-DLtt"
"item[mode]
"begin-DLtt"-12"
"item[' ']Read mode (default)
"item['S']Shared mode
"item['U']Update mode
2.2. Create a new RZ #le                                                       *
 *      11


"item['1']Update mode and only one user (no LOCKs necessary)
"item['L']List current LOCK identifiers
"item['D']Reset "locking" word of the file (after program crash !)
"end-DLtt"
"end-DLtt"
"end-DLtt"
"index-RZ!file-mode shared"
"index-RZ!file-mode update"
"par
Subroutine "Rind-RZFILE" accesses an existing RZ file on the specified
logical unit. Should the file not yet exist, the routine
"Rind-RZMAKE" should be used.
"par
On return from RZFILE, IQUEST(1) will be set to 0
if the routine was successful. A non-zero value for
IQUEST(1) indicates an error.
"section-Set the logging level"
"Subr-CALL RZLOGL (LUN,LOGLEV)"
"index-RZ!logging level"
"index-logging level"
"Idesc
"begin-DLtt"-1234567"
"item[LUN]Logical unit number for which the logging level has to be set
"item[LOGLEV]Logging level
"begin-DLtt"-12"
"item[-3]Suppress all messages
"item[-2]Error messages only
"item[-1]Terse logging
"item[ 0]Normal logging: "Rind-RZFILE", "Rind-RZMAKE", "Rind-RZEND"
"item[ 1]Log to watch rare events
"item[ 2]Log to monitor calls
"item[ 3]Short dumps to debug user-written output routines
"item[ 4]Full dumps to debug user-written output routines
"end-DLtt"
"end-DLtt"
"par
The logging level
(i.e. the verboseness of the messages of the ZEBRA system) can be
controlled for a given RZ unit number by a call to "Rind-RZLOGL".
"par
Each declaration of an RZ file via "Rind-RZMAKE" or "Rind-RZFILE"
associates a default logging level of 0 to the file.
At any point in a program the logging level can be reset to a new
value by calling "Rind-RZLOGL" with the appropriate parameters.
"section-Close a direct access file"
"par A direct access file, identified by a top directory name,
is closed by a call to "Rind-RZEND".
The directories present in memory,
when they have been changed,
are copied to the file and then deleted from memory, else
the directories in memory are simply deleted.
Note that a FORTRAN close statment must be provided by the
user for the associated file.
"index-RZ!file close"
"Subr-CALL RZCLOS (CHDIR)"
"Idesc
"begin-DLtt"-1234567"
"item[CHDIR]Character variable specifying the name of the top directory of the
file to be closed.
"end-DLtt"
"par
This routine terminates RZ access to the file referenced
by the specified top directory CHDIR, and issues a FORTRAN
or C close for the associated file. For this reason,
12                                           Chapter 2. Description of user cal*
 *lable RZ routines


it should be used in preference to the routine RZEND.
"index-RZ!file deaccess"
"Subr-CALL RZEND (CHDIR)"
"Idesc
"begin-DLtt"-1234567"
"item[CHDIR]Character variable specifying the name of the top directory of the
file to be closed.
"end-DLtt"
"section-Save the modified directories"
"index-RZ!save modified directory"
"Subr-CALL RZSAVE"
"par
All directories which have been modified in memory
and the current output buffer are written to the output file by a call
to "Rind-RZSAVE". This routine is called
automatically by the system when using "Rind-RZCDIR",
"Rind-RCLOS", "Rind-RZEND" or "Rind-RZFREE".
In an interactive environment it may save to call "Rind-RZSAVE" from
time to time.
"section-Operations on RZ directories"
"subsection-Define the naming directory"
"index-RZ!naming directory"
"Subr-CALL RZNDIR (*CHPATH*,CHOPT)"
"Idesc
"begin-DLtt"-1234567"
"item[*CHPATH*]Character variable specifying the complete pathname of the
naming directory ('S' option)
"item[CHOPT]Character variable specifying the option
"begin-DLtt"-12"
"item[' ']Set the naming directory to the path specified in
-"tt CHPATH" (default)
"item['P']Print the naming directory
"item['R']Read the naming directory pathname into -"tt CHPATH"
"end-DLtt"
"end-DLtt"
"Odesc
"begin-DLtt"-1234567"
"item[*CHPATH*]Character variable containing the complete pathname of the
naming directory ('R' option).
"end-DLtt"
"par
When one is working with many different directories, and has to
refer frequently the same directory, then the latter can be defined
as the -"bf naming directory", designated by the symbol
'"verb!"!'
in pathnames.
A typical example would be an application where subdirectories have
to be created in user routines in which the complete pathname of the
naming directory is unknown.
To set the naming directory a call to "Rind-RZNDIR" must be made.
"subsection-RZNDIR return codes"
"begin-DLtt"-12"
"item[0]Normal completion
"item[1]'S' (default) option and the pathname -"tt CHPATH" is invalid
"end-DLtt"
"subsection-Define the current working directory"
"index-RZ!current working directory"
"index-RZ!CWD"
"Subr-CALL RZCDIR (*CHPATH*,CHOPT)"
"Idesc
"begin-DLtt"-1234567"
"item[*CHPATH*]Character variable specifying the pathname of the -"tt CWD"
(default).
"newline -"tt CHPATH = ' '" means the -"tt CWD" (useful with the 'U' option)
2.2. Create a new RZ #le                                                       *
 *      13


"newline
Unless several RZ files are open at the same time, the path name can
be specified either as a path starting with the character '/', in
which case an absolute pathname is intended for the given top directory.
When several RZ files are open, an absolute pathname must start with a
double slash '//' and the top directory.
When the pathname does not start with a '/', the pathname is prefixed
with the path of the -"tt CWD".
"item[CHOPT]Character variable specifying the option
"begin-DLtt"-12"
"item[' ']Set the -"tt CWD" (default)
"item['P']Print the -"tt CWD"
"item['R']Read the -"tt CWD" pathname into -"tt CHPATH"
"item['U']The same as the default but the time stamp in the
directory in memory is checked against the one on the file and if
needed the directory in memory is brought up to date.
This option should be used when the user expects that directories can be
changed concurrently by another user and he wants to use the latest
version.
"item['K']Keep the Current Directory in memory. By default, space occupied
by the Current Directory may be released in case there is not enough
space to accomodate the new directory.
"end-DLtt"
"end-DLtt"
"Odesc
"begin-DLtt"-1234567"
"item[*CHPATH*]Character variable containing the complete pathname of the
-"tt CWD" ('R' option)
"end-DLtt"
"par
The -"tt CWD" is set to the top directory after a call to "Rind-RZMAKE".
The -"tt CWD" can be changed, displayed or obtained by a call to "Rind-RZCDIR".
"par
All operations of RZ routines manipulating keys
(i.e. "Rind-RZIN", "Rind-RZOUT", "Rind-RZRDIR", "Rind-RZKEYS",
"Rind-RZPURG", "Rind-RZDELK", "Rind-RZDELT", "Rind-RZQUOT",
"Rind-RZPASS") refer to objects in
the "Current Working Directory" or -"tt CWD" for short.
"subsection-RZCDIR return codes"
"index-QUEST!IQUEST"
"begin-DLtt"-1234567"
"item[IQUEST(1)]Error status
"begin-DLtt"-1"
"item[0]Normal completion
"item[1]The pathname -"tt CHPATH" is invalid (default option)
"end-DLtt"
"par
"item[IQUEST(7)]NKEYS, number of keys in the directory
"item[IQUEST(8)]NWKEY, number of words in a key
"item[IQUEST(9)]Number of directories below -"tt CWD".
"item[IQUEST(10)]NQUOTA, the record quota for the -"tt CWD" tree.
"end-DLtt"
"subsection-Examples:"
"par It is not necessary to specify -"tt //Top"`dir" in a pathname
unless several RZ files are open simultaneously.
If only one RZ file is declared, the following two calls
are equivalent:
"begin-verbatim"
      CALL RZCDIR('//top`dir/dira/dirb/dirc',' ')
and
      CALL RZCDIR('/dira/dirb/dirc',' ')



 If the  CWD was already set to  /dira/dirb
