head	1.1;
access;
symbols;
locks
	goossens:1.1; strict;
comment	@% @;


1.1
date	93.11.13.15.25.14;	author goossens;	state Exp;
branches;
next	;


desc
@initial entry
@


1.1
log
@Initial revision
@
text
@\Filename{H1-MZ-Global-operational-aids}
\chapter{Global operational aids}
\label{sec:H1-MZ-Global-operational-aids}

\Filename{H2-ZPHASE-set-program-phase}
\section{ZPHASE - set program phase}

Primarily to avoid recovery to 'next event' at the wrong moment,
ZEBRA needs to know in which phase the user program is at any
given moment.
We distinguish three phases:

\begin{enumerate}
\item during the initialization phase the user prepares the context for
\item the operation phase of his program;
\item during the termination phase accumulated results are output,
      files are closed, etc.
\end{enumerate}
 
The user may subdivide the operation phase for his own purpose.
With the change to 'termination' one may request \Rind{ZPHASE} to take
action of tidying up the primary store,
to make room for end-processing routines (like output of histograms)
which may need a large amount of working memory.

\Shubr{ZPHASE}{(JPH)}

signals to Zebra a change of phase, preset by \Rind{MZEBRA} to 'initialization'.

\begin{verbatim}
   Normal operation phase:  JPH .GE. 0

   Termination phase:       JPH .LT. 0

      JPH = -1:  reset the working space to be of zero length,
                  but leave the store as it is;

            -2:  reset the working space,
                  wipe all user short-range divisions;

            -3:  reset, wipe, and collapse upwards all short-range user
                  divisions to be of zero length, giving their space to
                  division 1 for use by termination routines; perform
                  clean-up garbage collection in all other divisions.
\end{verbatim} 

The program phase is recorded on the variable \Lit{NQPHAS} of \FCind{/ZSTATE/}
and has the following significance~:
\begin{verbatim}
   NQPHAS =   0  initialisation phase
             >0  = MAX(JPH,1):  normal operation phase
             <0  = JPH: termination phase
\end{verbatim} 
If the user whishes to subdivide the operation phase,
he can pick up the current state from this variable.

\Rind{ZPHASE} prints a log message at level --1 for major phase changes,
and at level 2 for minor changes.

\Filename{H2-ZEND-normal-program-end}
\section{ZEND - normal program end}

\Shubr{ZEND}{}

The routine \Rind{ZEND}, which has no parameters, is defined to be the 
entry-point for normal run termination.
It is normally provided by the user
to close files and print accumulated results.
It is important that all closing down operations are
done through this routine,
if the user wants them to happen even in abnormal
run termination.
It would normally look like this:

\begin{verbatim}
       SUBROUTINE ZEND
 +CDE, ZSTATE.

       CALL ZPHASE (-3)           start termination
       . . .                      any user termination code

       CALL MZEND
       IF (NQERR.NE.0)  CALL ABEND
       STOP
       END
\end{verbatim} 

\Rind{MZEND} is a little routine which prints statistics about
the usage of all divisions.

\Lit{NQERR} in \FCind{/ZSTATE/} is zero for normal run termination,
it is non-zero if \Rind{ZEND} has been reached via \Rind{ZFATAL}.
On some machines the recovery system of the machine
expects the user to re-enter it.
The KernLib routine ABEND (Z 035) looks after this.

The Zebra system contains a little default routine
\Rind{ZEND} which is the above without any user termination.

A user routine similar to \Rind{ZEND} is defined for taking over control
of fatal error termination. 
It is called \Rind{ZABEND} and it is
described in the next paragraph.
This should perform in there any extra operations needed
for fatal termination and then it should transfer
to \Rind{ZEND} for closing down.

\Filename{H2-ZABEND-ZFATAL}
\section{ZABEND - abnormal program end through ZFATAL}

\Shubr{ZFATAL}{}
is defined to be the entry point for fatal run termination.

\Shubr{ZFATAM}{(chMESSAGE)}

is identical to \Rind{ZFATAL},
except that it prints a message,
given in the parameter as a character
string of not more than 30 characters,
terminated by the character '.'.

These routines are supplied by the system;
they are protected against recovery loops,
and they must not be supplied by the user.
They should only be called when the run cannot usefully continue.
If the application program discovers such a fatal condition
it too should call \Rind{ZFATAL} or \Rind{ZFATAM},
preceded with some diagnostic printing or
with loading to \IQUEST{} some clue to the trouble.

\Shubr{ZABEND}{}

and

\Shubr{ZPOSTM}{chOPT}


This routine receives control from \Rind{ZFATAL} to handle fatal run termination.
This routine may be supplied by the user.

The Zebra system contains the standard routine as follows:

\begin{verbatim}
       SUBROUTINE ZABEND
 +CDE, ZSTATE.

       CALL ZPOSTM ('TCWM.')
       IF (NQPHAS.LE.0)  CALL ABEND
       NQPHAS = -2
       CALL ZEND
       RETURN
       END
\end{verbatim} 

This is not just a dummy,
it causes a post-mortem dump,
including a subroutine trace-back (if possible),
followed by any normal user output programmed in \Rind{ZEND}.
Transfer to \Rind{ZEND} takes place only if the break-down happened
during normal operation,
but not if the program is still in the initialisation phase
or if it is already under \Rind{ZEND} control.

The parameter to \Rind{ZPOSTM} is passed from there to \Rind{DZSNAP}
to select the options for dumping the dynamic store,
see section~\ref{sec:DZSNAP} for details.

\Filename{H2-ZTELL-ZTELUS}
\section{ZTELL  - recover trouble through ZTELL-ZTELUS}

During normal operation any request from the user for space
with \Rind{MZWORK}, \Rind{MZLIFT} {\it et al.} is satisfied,
after garbage collection if necessary and possible.
If however the request cannot be satisfied,
the normal course of the program must be broken.
To deliver the user from the burden of checking for success
after each space request,
the garbage collector sends control to the user at the
entry-point \Rind{QNEXT} (via \Rind{ZTELL} 
and the KERNLIB routine \Rind{QNEXTE}),
where he can program the recovery of the problem.
Normally this will be to skip the current event and to continue
with processing the next one.

Other Zebra packages, apart from MZ, and maybe the user himself,
have similar problems.
Therefore a general trouble control routine \Rind{ZTELL} has been
included into Zebra.
This is a switching routine with several modes of continuation,
one of which is to send control to \Rind{QNEXT}.
\Rind{ZTELL} can also be called by the user program, thus:

\Shubr{ZTELL}{(ID,IFLAG)}

\begin{verbatim}
    ID     is an integer between 101 and 999,
           ID's below 100 are reserved for system usage,
           ID=99 for 'no memory left' from MZGARB.

    IFLAG  is a flag indicating whether the calling code can
           accept a RETURN from ZTELL:
           = 0 ZTELL may return;
           = 1 the calling code is not capable to accept a RETURN;
           = 2 fatal error, the run must stop.
\end{verbatim} 

\Rind{ZTELL} prints a message,
sets up a reasonable exit mode as a function of \Rarg{ID} 
and \Rarg{IFLAG} into the little labelled common \FCind{/ZTELLC/}
and calls \Rind{ZTELUS} to give the user a chance to modify this mode.
On the \textbf{obligatory}
return from \Rind{ZTELUS} it takes the selected exit as follows:

\begin{verbatim}
    COMMON /ZTELLC/ ID, MODE

    ID     is a copy of the first parameter to ZTELL;
    MODE   is the selected exit mode:
           = 0 RETURN to let the calling routine continue;
           = 1 CALL QNEXTE to enter QNEXT
           = 2 CALL ZFATAL
           = 3 CALL ZEND
\end{verbatim} 

The exit mode to \Rind{QNEXT} is enabled only if \Lit{NQPHAS} in \FCind{/ZSTATE/}
is larger than zero, indicating that the program is
in the normal operation phase.
During the initialisation or the termination phase of the program
transfer is to \Rind{ZFATAL} instead,
to avoid a program crash to be 'recovered' into normal operation.

The pre-loading of \Lit{MODE} is  \Lit{MODE=IFLAG}  for user calls 
\Lit{(ID>100)};
and for system calls \Lit{(ID<100)} it is as shown
in the diagnostics chapter for \Rind{ZTELL}.

\Shubr{ZTELUS}{}

Here is an example of a \Rind{ZTELUS}
which is happy with the default modes,
except that it wants to go to \Rind{ZEND} for \Lit{ID=8}:

\begin{verbatim}
      SUBROUTINE ZTELUS
      COMMON /ZTELLC/ ID,MODE

      IF (ID.EQ.8)  MODE=3
      RETURN
      END
\end{verbatim} 
The default subroutine \Rind{ZTELUS} on the library is a do-nothing dummy.
The default subroutine \Rind{QNEXT} goes straight to \Rind{ZFATAL}.

\Shubr{QNEXT}{}

On most machines repeated recovery directly to \Rind{QNEXT} causes
trouble with the Fortran trace-back and the subroutine stack.
For this reason ZEBRA relies on the KERNLIB routine \Rind{QNEXTE},
which implies an organization for event processing as follows:

\newpage
\begin{verbatim}
 _________________________
|                         |          Program flow with QNEXT recovery
|    MAIN program         |
|                         |
|    CALL MZEBRA (0)      |
|    CALL MZSTOR (...)    |
|                         |
|    program              |                                _________
|    initialization       |                               |         |
|                         |                               |         |
|    CALL ZPHASE (0)      | first entry           recover |         |
|    CALL QNEXTE          | ------       _________       _|         |
|_________________________|      `----> |         |     |           |
                                        | routine |     |  routine  |
          <---------------------------< | QNEXTE  | <-- |  ZTELL    |
         |                              |_________|     |_          |
 ________|________________                                |         |
|                         |                               |         |
|    subr QNEXT           |                               |         |
|                         |                               |         |
| 11 CALL MZWIPE (0)      |       requests                |         |
|    read event           | ----------------------------> |  Zebra  |
|    IF (end) CALL ZEND   |                               |  system |
|    process event        | <---------------------------- |         |
|    output event         |               normal RETURN's |         |
|    GO TO 11             |                               |         |
|_________________________|                               |         |
         |                                                |         |
 ________|________________        __________              |         |
|                         |      |          |             |         |
|    subr ZEND            | <--- |  subr    | <---        |         |
|                         |      |  ZABEND  |     |      _|         |
|    CALL ZPHASE (-3)     |      |__________|     |     |           |
|                         |                       |     |  routine  |
|    program              |                       `---< |  ZFATAL   |
|    termination          |                             |_          |
|_________________________|                               |_________|

\end{verbatim} 
The initialisation part prepares the program to be ready
for execution and then calls itself 
\Rind{QNEXTE} for entry to \Rind{QNEXT}
to process the 'next event',
being the first event in this case.
\Rind{QNEXT} loops internally to process all events.

CALL's from the processing program to the Zebra system
are normally satisfied,
and control comes back to the user with normal RETURN.
Abnormal returns are either via \Rind{ZFATAL} to \Rind{ZEND},
or straight to \Rind{ZEND},
or to \Rind{QNEXT} via \Rind{QNEXTE}.


The Fortran version of \Rind{QNEXTE} 
is a simple \Lit{CALL \Rind{QNEXT}}
followed by RETURN.
If necessary on a given computer,
\Rind{QNEXTE} is a machine-language or a C routine to unwind to itself
the Fortran trace-back and the subroutine stack.
So, if the user wishes at some point to abandon himself
the curent event and to go to the next one,
he should \Lit{CALL \Rind{QNEXTE}} and not \Rind{QNEXT}.

\Rind{QNEXT} is a user routine to the KERNLIB routine \Rind{QNEXTE} and
has thus the usual problem of user routines called
from a library routine in that it must be loaded explicitely:
\begin{verbatim}
   either:  compile it together with the other material
       or:  if it resides on a user library it must be
             INCLUDEd explicitly, for example on the VAX with
             $ LINK  ...   MYLIB/INC=QNEXT/LIB  ...
\end{verbatim} 

This flow-diagram is only an example for the most common case
of actual usage of Zebra.
If one's program is not of the event-processing type
one has to look at \Rind{QNEXTE}/\Rind{QNEXT} from a different angle:
program flow from MAIN has to go to \Rind{QNEXTE} to initialize
for re-entry.
Entry and all re-entries are then to \Rind{QNEXT},
which has to control the further program flow according
to some flags,
conveniently \Lit{ID} in \FCind{/ZTELLC/} and \Lit{NQPHAS} in \FCind{/ZSTATE/}.
ID is not initialized by \Rind{MZEBRA},
it is only changed by \Rind{ZTELL} which copies its first parameter to \Lit{ID}.
This number is an integer in the range 1 to 99 for calls
from the Zebra system.
\Lit{NQPHAS} is initialized to zero by \Rind{MZEBRA},
it is then changed only by the user (or the default \Rind{ZABEND})
either directly or with \Rind{ZPHASE}.

\Filename{H2-ZVERIF}
\section{ZVERIF - check logical integrity of Zebra stores}

\Shubr{ZVERIF}{(IXDIV,IFLRTN,chTEXT)}

\begin{verbatim}
with   IXDIV  1) the index of a single division to be verified;
              2) the index of the store to be verified;
                 = -1: all stores
                        (other negative values are reserved)

      IFLRTN  return flag, see below;

      chTEXT  identifying text to be printed if trouble.
\end{verbatim} 

This routine has two somewhat different modes of operation:

Normally \Rind{ZVERIF} checks all the data in and relevant to a complete
store, or even several stores. It goes to \Rind{ZFATAL} if it finds
trouble.

But if verification is for one single division only, only the banks
of this division are checked and control is given back to the caller
if the flag \Lit{IFLRTN} is non-zero, in which case the number of
normally fatal conditions is delivered in \Lit{IQUEST(1)}.
This is intended to be used if one receives a data-structure
in memory (with \Rind{FZIN}, say) which may be bad. Rather than letting
the program run to crash one can realize the situation and
wipe the division. This must be done with \Rind{MZWIPE} because this
is the only way to get rid of the data without Zebra looking
at them.

This routine inspects all link areas and all banks in the stores
selected, performing the following checks:

\begin{verbatim}
    (0)  process and store control tables intact;
    (1)  bank chaining intact;
    (2)  a non-zero structural link must point to a true bank address;
    (3)  consistency of "up" and "origin" links;
    (4)  a link in a bank in division A pointing to division B
         is checked for consistency with the cross-reference matrix;
    (5)  a non-zero reference link in a bank must not point
         into a reserve area;
\end{verbatim} 

\Rind{ZVERIF} is used by the automatic verification procedure
\Rind{ZVAUTO}, see next section.

\Filename{H2-ZVAUTO}
\section{ZVAUTO - running with automatic verification}

The routines of this complex are provided as the {\it ultima ratio regis}
for finding program errors which destroy data in a Zebra store
by faulty handling of links; they consume a lot of CPU time.

With automatic verification switched on calls to the Zebra system
transfer to \Rind{ZVAUTY},
which handles the verification process:

The "verify identifier" (\Lit{VID}) is constructed by counting the number
of entries to \Rind{ZVAUTY}. 
The \Lit{VID} is a two-word object, because 32 bits
may not be sufficient, it identifies every call to Zebra, it gives
us a handle on where we are in the job, and it is available to the
user via the common \FCind{/ZVFAUT/} to be printed together with the event
number, for example. 
\Rind{ZVAUTY} will remember separately the \Lit{VID} for the
last garbage collection, for the last \Rind{MZWIPE}, and for the last \Rind{FZIN},
for printing on fatal error.

In "active mode" \Rind{ZVAUTY} will call \Rind{ZVERIF} for the stores selected
by the user initially, causing a transfer to \Rind{ZFATAL} in case of trouble,
which in turn will transfer control to the user by calling \Rind{ZABEND},
where he may code any display wanted.

In "dummy mode" the time-consuming calls to \Rind{ZVERIF} will not take place,
but the \Lit{VID} is checked to see whether the "action threshold" defined
by the user is reached. If so, the mode is switched to "active", and
the log-level is set for all stores to be verified.
From this point on one may get rather a lot of output, tracing the
execution of the program step-by-step.

Suppose now one has a particular run, "run A" say, of a lengthy
production job which collapses with the memory destroyed.
The reason for this will be somewhere in the past.
One could re-submit the job switching on true automatic verification 
right away, but this could be excessively time consuming and produce
much too much output.
If so, it is better to re-submit the job first with "dummy verification"
switched on by inserting a call to \Rind{ZVAUTO} at the point where one wants
to start verification, after the initialization phase for example,
and with the connection routine \Rind{ZVAUTX} supplied,
"run B" say.
Dummy verification goes through the
same motion as active verification, but it does not call \Rind{ZVERIF}
and hence costs only little more time than run A. This run should also
end up in \Rind{ZFATAL}, which will now print the \Lit{VID}'s remembered for the last
garbage collection, for the last wipe, for the last \Rind{FZIN},
and maybe other \Lit{VID}'s entered by the user with \Rind{ZVAUTU}.

One can now re-submit the job, "run C" say, having changed the call to
\Rind{ZVAUTO} by giving the action threshold, thereby defining the moment
when active verification will start.

Automatic verification is initiated with

\Shubr{ZVAUTO}{(MSTORE,IDVTH1,IDVTH2,LOGLEV)}

\begin{verbatim}
with  MSTORE  a bit-by-bit word indicating the stores to be verified,
              store i = 0,1,2,... selected if bit (i+1) is set to one;
              if MSTORE = 0: all stores

    IDVTH1/2  the two-word VID at which true verification should start,
              give both words zero if dummy verification only
              ("run B" in the discussion above);
              give 0,-1 if active verification is to start right away;

      LOGLEV  set the log-level of the existing stores to be verified
              to this value at the moment of changing to active mode,
              give 2 for maximum logging.
\end{verbatim} 

To avoid loading the non-negligeable code of the \Rind{ZVAUTO} complex with
normal production jobs, this trick is used: all relevant Zebra routines
contain a conditional call to \Rind{ZVAUTX} (which does not take place if
\Rind{ZVAUTO} has not been called), and the Zebra library contains a dummy
routine \Rind{ZVAUTX}. But the true process is controlled by \Rind{ZVAUTY}, which
is not normally loaded. The user makes the connection by supplying
this routine:

\begin{verbatim}
      SUBROUTINE ZVAUTX
      CALL ZVAUTY
      END
\end{verbatim} 
as part of the material to be compiled and linked.

In the list of "last \Lit{VID}s remembered" there are 3 places for user
triggered storage, which is done with

\Shubr{ZVAUTU}{}

\Shubrii{ZVAUTX}{}{ZVAUTY}{}
                 
This will push the \Lit{VID} in position 2 to position 3, and the one in
position 1 to position 2, entering the current \Lit{VID} into position 1.
Thus, if one were to call \Rind{ZVAUTU} at the start of each event,
one would see the start points of the last 3 events in a dump
from \Rind{ZFATAL}.

The user has access to the verification parameters via this common:

\begin{verbatim}
      COMMON /ZVFAUT/IQVID(2),IQVSTA,IQVLOG,IQVTHR(2),IQVREM(2,6)

           IQVID  the current VID

          IQVSTA  the verification status:
                    zero  automatic verifying not running
                      -1  dummy verification
                      +1  active verification

          IQVLOG  the log level to be set at the activation threshold
          IQVTHR  the threshold VID

     IQVREM(2,J)  VID remembered in position J,
                    J = 1  last garbage collection
                        2  last call to MZWIPE
                        3  last call to FZIN
                        4  last call to ZVAUTU
                        5  last-but-one call to ZVAUTU
                        6  last-but-two call to ZVAUTU
\end{verbatim} 


\Examples

\begin{verbatim}
      Do not forget to supply the connection routine ZVAUTX !

      CALL ZVAUTO (7,0,0,0)

           to start a dummy verification run for store numbers 0, 1, 2;
           "run B" of the discussion above.

           Supposing that the ZFATAL output of this run tells us the
           VID of the last-but-one event, by changing to
 
      CALL ZVAUTO (7,0,123456,2)

           we may start "run C" to give detailed logging for the
           last two events.

      CALL ZVAUTO (1,0,-1,0)

           to start an active verification run for store number 0;
           one might do this on a limited data sample before going
           into production with a new program, just to verify that
           the program is alright.
\end{verbatim} 

% Local Variables: 
% mode: latex
% TeX-master: t
% End: 
@
