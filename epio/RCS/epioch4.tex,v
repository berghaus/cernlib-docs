head     1.1;
access   ;
symbols  ;
locks    goossens:1.1; strict;
comment  @@;


1.1
date     93.11.15.20.37.27;  author goossens;  state Exp;
branches ;
next     ;


desc
@Initial entry
@



1.1
log
@Initial revision
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                 %
%   EPIO User Guide -- LaTeX Source                               %
%                                                                 %
%   Chapter 4                                                     %
%                                                                 %
%   The following external EPS files are referenced:              %
%                                                                 %
%   Editor: Michel Goossens / CN-AS                               %
%   Last Mod.: 15 Nov 1993 20:15 mg                               %
%                                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
\Filename{H1EPIO-Auxiliary-routines}
\chapter{Auxiliary routines used by EP read/write}
\label{sec:H1Auxiliaryroutines}

These routines will have to be provided by the user when  he
installs the package on his computer, if no version for his computer yet
exists (see list in chapter~\ref{sec:H1introduction}).

\subsection*{Important remark:}

The source and target word positions in some of these routines
are given in 16-bit word counts.
 
It should be stressed that, due to different representation in different
computers, floating and integer type conversion have to be called
separately.

\Filename{H2EPIO-Auxiliary-routines-Move-Blow-Bunch}
\section{Move, Blow, and Bunch}

\Shubr{W16MOV}{(SOURCE,N1,TARGET,N2,N3)}
 
Moves 16-bit words in packed form.
 
\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] source array
\item[N1]     starting 16-bit word in source
\item[TARGET] target array
\item[N2]     starting 16-bit word in target
\item[N3]     no. of 16-bit words to move
\end{DLtt}

\Shubr{BLO8W}{(SOURCE,N1,TARGET,N2,N3)}
 
Blows (unpacks) 8-bit words into machine words.

\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] array containing 8-bit words in packed form
\item[N1]     first 8-bit word in source to blow
\item[TARGET] target array for unpacked 8-bit words
\item[N2]     \Lit{TARGET(N2)} will contain first unpacked word
\item[N3]     no. of 8-bit words to unpack
\end{DLtt}

\Shubr{BUN8W}{(SOURCE,N1,TARGET,N2,N3)}
 
Bunches (packs) 8-bit words (right adjusted, zero filled)
into a continuous bit string.

\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] array containing 8-bit words in unpacked form
\item[N1]     first 8-bit word in source to packed
\item[TARGET] target array for packed 8-bit words
\item[N2]     first 8-bit word in target to pack into
\item[N3]     no. of 8-bit words to pack
\end{DLtt}

\Shubr{BLO16W}{(SOURCE,N1,TARGET,N2,N3)}
 
Blows (unpacks) 16-bit words into machine words.

\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] array containing 16-bit words in packed form
\item[N1]     first 16-bit word in source to blow
\item[TARGET] target array for unpacked 16-bit words
\item[N2]     \Lit{TARGET(N2)} will contain first unpacked word
\item[N3]     no. of 16-bit words to unpack
\end{DLtt}

\Shubr{BUN16W}{(SOURCE,N1,TARGET,N2,N3)}
 
Bunches (packs) 16-bit words (right adjusted, zero filled)
into a continuous-bit string.

\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] array containing 16-bit words in unpacked form
\item[N1]     first 16-bit word in source to packed
\item[TARGET] target array for packed 16-bit words
\item[N2]     first 16-bit word in target to pack into
\item[N3]     no. of 16-bit words to pack
\end{DLtt}

\Shubr{BLO32W}{(SOURCE,N1,TARGET,N2,N3)}
 
Blows (unpacks) 32-bit words into machine words.
{\bf\it Important remark:} Counts partly in 16-bit words.

\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] array containing 32-bit words in packed form
\item[N1]     first 32-bit word in source to blow
\item[TARGET] target array for unpacked 32-bit words
\item[N2]     \Lit{TARGET(N2)} will contain first unpacked word
\item[N3]     no. of 32-bit words to unpack
\end{DLtt}

\Shubr{BUN32W}{(SOURCE,N1,TARGET,N2,N3)}
 
Bunches (packs) 32-bit words (right adjusted, zero filled)
into a continuous-bit string.
{\bf\it Important remark:} Counts partly in 16-bit words.

\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] array containing 32-bit words in unpacked form
\item[N1]     first 32-bit word in source to packed
\item[TARGET] target array for packed 32-bit words
\item[N2]     first 32-bit word in target to pack into
\item[N3]     no. of 32-bit words to pack
\end{DLtt}

\Sfunc{IWD16}{IVAL=IWD16 (A,N)}

Function returns the 16-bit word no. \Lit{N} of string \Lit{A}. 
The first 16-bit word coincides with the start of \Lit{A}.

\Filename{H2EPIO-Auxiliary-conversion}
\section{Conversion}

The following routines are optional, but useful when data are written
in IBM integer or floating format.

\Shubr{CTOIBM}{(*ARRAY*,NW,MODE)}

\begin{DLtt}{123456}
\item[{\rm\bf Input/Output buffer:}]
\item[ARRAY] On input contains words to be converted to IBM format.
             After conversion itwill contain the IBM formatted 
             words right adjusted, zero filled after the call.
\item[{\rm\bf Input parameters:}]
\item[NW]    number of words to be converted
\item[MODE]  Conversion mode
  \begin{DLtt}{1}
    \item[1:] convert to 16-bit (signed) IBM integers. Conversion of
              unsigned integers before writing is not necessary (they
              must not be longer than 16-bit, of course)
    \item[2:]  convert to 32-bit IBM integers.
    \item[3:]  convert to 32-bit IBM floating.
  \end{DLtt}
\end{DLtt}

\Shubr{CFRIBM}{(ARRAY,NW,MODE)}
 
The routine converts from IBM format to local machine format. The
input has to be right adjusted, zero filled in \Lit{ARRAY}.
The arguments are the same as for \Rind{CTOIBM} above. 

\Shubr{CFRASC}{(ARRAY,NW)}
 
The routine converts from ASCII character to local character format.
\Lit{ARRAY} contains \Lit{NW} ASCII characters, 
in the form of one character (per
word, right adjusted, zero filled). The conversion is performed in place.

\Shubr{CTOASC}{(ARRAY,NW)}
 
Inverse action of \Rind{CFRASC}.

\Shubr{SFRASC}{(SOURCE,N1,TARGET,N2,NCH)}

\subsection*{IBM version}
 
Converts a Hollerith string from ASCII to EBCDIC (IBM internal)
 
\subsection*{CDC version}
 
\Rind{SFRASC} converts a string of 8-bit ASCII characters
into a string of 6-bit display characters.
 
\subsection*{VAX version}
 
Converts a Hollerith string from external ASCII to
internal ASCII, i.e. on VAX performs byte swapping only.
By making source and target, and \Lit{N1} and \Lit{N2} identical, the routine
can be used for byte swapping only (identical to \Rind{STOASC}).
 
\subsection*{Parameters}

\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] array containing the ASCII string
\item[N1]     first character in source to convert
\item[TARGET] array receiving the EBCDIC string
\item[N2]     first character position of converted string in target
\item[N3]     number of characters to convert
\end{DLtt}
 
The routine allows the simultaneous conversion and
concatenation of a string. 
On VAX, IBM (not CDC !), source and
target may overlap as long as \Lit{N2\(\leq\)N1}.

\Shubr{STOASC}{(SOURCE,N1,TARGET,N2,NCH)}

\subsection*{IBM version}
 
Converts a Hollerith string from EBCDIC (IBM internal) to ASCII
 
\subsection*{CDC version}
 
\Rind{STOASC} converts a string of CDC display characters
into a string of 8-bit ASCII characters.
 
\subsection*{VAX version}
 
Converts a Hollerith string from external ASCII to internal ASCII,
i.e. on VAX performs byte swapping only. By making source and target,
and \Lit{N1} and \Lit{N2} identical, 
the routine can be used for byte swapping only.
 
\subsection*{Parameters}

\begin{DLtt}{123456}
\item[{\rm\bf Input parameters:}]
\item[SOURCE] array containing the EBCDIC string
\item[N1]     first character in source to convert
\item[TARGET] array receiving the ASCII string
\item[N2]     first character position of converted string in target
\item[N3]     number of characters to convert
\end{DLtt}
 
The routine allows the simultaneous conversion and
concatenation of a string. 
On VAX, IBM (not CDC !), source and
target may overlap as long as \Lit{N2\(\leq\)N1}.

@
