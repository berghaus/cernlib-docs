head	1.3;
access;
symbols;
locks;


1.3
date	96.05.14.08.07.29;	author goossens;	state Exp;
branches;
next	1.2;

1.2
date	94.04.05.12.37.05;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	94.04.02.16.47.12;	author goossens;	state Exp;
branches;
next	;


desc
@Initial entry
@


1.3
log
@Optimized version (KSK)
@
text
@\Version{RNDM}                         \Routid{V104}
\Keywords{DISTRIBUTION UNIFORM NUMBER RANDOM}
\Author{CDC: H. von  Eicken, IBM: T. Lindel\"of}  \Library{KERNLIB}
\Submitter{}                               \Submitted{07.12.1970}
\Language{Assembler}                       \Revised{15.09.1978}
\Cernhead {Uniform Random Numbers}
\begin{center}
\fbox{\parbox{120mm}{\OBSOLETE
Please note that this routine has been obsoleted in CNL 215. Users are
advised not to use it any longer and to replace it in older programs.
No maintenance for it will take place and it will eventually disappear.
\\[3mm]
Suggested replacement: \\
{\tt RANMAR} (V113) or {\tt RANECU} (V114) or {\tt RANLUX} (V115) }}
\end{center}
{\tt RNDM} generates uniformly distributed pseudo-random numbers
in the interval (0,1) in type {\tt REAL} and in the interval
$(1,2^{47}-1)$ (CDC) or $(1,2^{31}-1)$ (IBM) in type {\tt INTEGER}.
The CDC version has a period of more than $10^{13}$. The IBM period,
however, is only about $5 \times 10^8 $ which may not be good enough
for some calculations. In that case {\tt RNDM2} (V107) should be used
instead.
\Structure
{\tt SUBROUTINE} subprogram \\
User Entry Names: \Rdef{IRNDM}, \Rdef{RNDM}, \Rdef{RDMIN},
\Rdef{RDMOUT}
\Usage
\begin{verbatim}
    Y = RNDM(X)
\end{verbatim}
where {\tt X} is a dummy argument (see {\bf Notes}), sets {\tt Y} to a
pseudo-random number in the interval (0,1). {\tt X} and {\tt Y} are of
type {\tt REAL}.
\begin{verbatim}
    I = IRNDM(X)
\end{verbatim}
where {\tt X} is a dummy argument (see {\bf Notes}), sets {\tt I} to an
integer pseudo-random number in the interval $(1,2^{47}-1)$ on CDC,
$(1,2^{31}-1)$ on IBM. {\tt X} is of type {\tt REAL} and {\tt I} is of
type {\tt INTEGER}.
\begin{verbatim}
    CALL RDMOUT(SEED)
\end{verbatim}
replaces {\tt SEED} by the current value of the integer pseudo-random
number. This {\tt SEED} may then be used to restart the sequence at this
point, by a call to {\tt RDMIN}. {\tt SEED} is of type {\tt REAL}.
\begin{verbatim}
    CALL RDMIN(SEED)
\end{verbatim}
replaces the current value of the integer pseudo-random number by the
value of the variable {\tt SEED}. {\tt SEED} is of type {\tt REAL}.
The value of {\tt SEED} should not be chosen by the user but should be
obtained by a previous call to {\tt RDMOUT}. If this is not complied
with, the numbers generated may have serious defects in their randomness.
\Method
CDC: \\
Consider the sequence:
\begin{eqnarray*}
r_i & = & \alpha r_{i-1}(\mbox{ mod } 2^{47})\mbox{ for } i=1,2,\ldots\\
\mbox{with } r_0   & = & 2000\ 0000\ 0110\ 6047\ 1625_8 \\
\mbox{and } \alpha & = & 2000\ 0000\ 3432\ 7724\ 4615_8
\end{eqnarray*}
where $r_0$ and $\alpha$ are the unnormalised floating-point
representation of the starting number and $5^{15}$ respectively.
The $j$-th floating-point number $R_j$ is obtained by packing $r_j$
with an exponent $(-47)$ and normalising it. This ensures that $R_j$
falls in the interval (0,1).
\par
The product $\alpha r_{j-1}$ is generated in a 96 bit accumulator.
The integer number $N_j$ returned is the low order 47 bits of the
contents of this accumulator, except that the right-most 11 bits are
replaced by those occupying bit positions 48-58. This replacement is
done in order to increase the time period of the low order bits.\\[2mm]
IBM:
See write-up for {\tt RNDM2} (V107).
\Notes
While the argument is dummy, in the sense that the generator makes no
use of it, it must be noted that if a reference to {\tt RNDM} occurs
\begin{DLtt}{12}
\item[$\bullet$] more than once within a Fortran statement, the
argument to it should be different in each case;
\item[$\bullet$] in a {\tt DO}-loop, the argument must depend either
directly or indirectly on the index of this loop.
\end{DLtt}
These rules must be observed since the compilers, in their
attempt to optimise the object code, assume that functions called
with identical arguments return the same function value.
\\ $\bullet$
@


1.2
log
@latest by Siegfried
@
text
@d8 1
a8 4
\fbox{\parbox{120mm}{
\begin{center}
{\bf OBSOLETE}
\end{center}
@


1.1
log
@Initial revision
@
text
@d7 12
@
