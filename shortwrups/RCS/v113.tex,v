head	1.3;
access;
symbols;
locks;


1.3
date	95.02.28.08.33.10;	author goossens;	state Exp;
branches;
next	1.2;

1.2
date	94.04.05.12.37.42;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	94.04.02.16.47.13;	author goossens;	state Exp;
branches;
next	;


desc
@Initial entry
@


1.3
log
@ Version of Feb. 28th
@
text
@% 20 jan 95   ksk
\Version {RANMAR}                    \Routid{V113}
\Keywords{DISTRIBUTION UNIFORM NUMBER RANDOM GENERATOR}
\Author{G. Marsaglia, A. Zaman}                  \Library{MATHLIB}
\Submitter{F. Carminati, F. James}                \Submitted{08.06.1989}
\Language{Fortran}                          %\Revised{}
\Cernhead {Fast Uniform Random Number Generator}
{\tt RANMAR} generates a sequence of 32-bit floating-point random
numbers uniformly distributed in the interval (0,1), the end
points excluded. These numbers are returned in a vector.
The period is about $10^{43}$ and the quality is good but it fails
some tests. For better quality use {\tt RANLUX} (V115), which is
slower.
\par
Several independent sequences can be initialized and used
in the same run.
\Structure
{\tt SUBROUTINE} subprograms \\
User Entry Names: \Rdef{RMMAR}, \Rdef{RMMAQ}, \Rdef{RANMAR},
\Rdef{RMARIN}, \Rdef{RMARUT} \\
{\tt COMMON} Block Names and Length: {\tt /RANMA1/ 104},
{\tt /RANMA2/ 104}
\Usage
{\bf For a single sequence:}
\begin{verbatim}
    CALL RANMAR(VEC,LEN)
\end{verbatim}
\begin{DLtt}{123456}
\item[VEC] ({\tt REAL}) Array of length {\tt LEN} at least.
On exit, it will contain the in (0,1) uniformly distributed random
numbers.
\item[LEN] ({\tt INTEGER}) Number of random numbers to be generated.
Unchanged on exit.
\end{DLtt}
The initialization is made by
\begin{verbatim}
    CALL RMARIN(IJKLIN,NTOTIN,NTO2IN)
\end{verbatim}
\begin{DLtt}{12345678}
\item[IJKLIN] ({\tt INTEGER}) Seed from which to start the sequence.
Every integer number from {\tt 1} to {\tt 900 000 000} originates
an independent sequence of random numbers with operand of $2^{144}$
(about $10^{43}$).
\item[NTOTIN] ({\tt INTEGER}) Number (mod $10^9$) of random number
generated.
\item[NTO2IN] ({\tt INTEGER}) Billions ($10^9$)
of random numbers generated.
\end{DLtt}
The arguments {\tt NTOTIN} and {\tt NTO2IN} are used to restart the
generation from a given point by skipping over already performed
extractions. They are returned by {\tt RMARUT} and should not be
touched by the user.
\begin{verbatim}
    CALL RMARUT(IJKLUT,NTOTUT,NTO2UT)
\end{verbatim}
\begin{DLtt}{12345678}
\item[IJKLUT] ({\tt INTEGER}) Seed from which the sequence
was started.
\item[NTOTUT] ({\tt INTEGER}) Number (mod $10^9$) of random number
generated so far.
\item[NTO2UT] ({\tt INTEGER}) Billions ($10^9$)
of random numbers generated so far.
\end{DLtt}
\newpage
{\bf For multiple sequences:}
\begin{verbatim}
    CALL RMMAR(VEC,LEN,ISEQ)
\end{verbatim}
\begin{DLtt}{123456}
\item[VEC] ({\tt REAL}) Array of length {\tt LEN} at least.
On exit, it will contain the in (0,1) uniformly distributed random
numbers.
\item[LEN] ({\tt INTEGER}) Number of random numbers to be generated.
Unchanged on exit.
\item[ISEQ] ({\tt INTEGER}) Number of the independent sequence from which
the {\tt LEN} numbers should be extracted. If $\mathtt{\leq 0}$, the
last valid sequence explicitely defined is used. Unchanged on exit.
\end{DLtt}
Several independent sequences can be defined and used. Each
sequence {\bf must} be initialized by the user, otherwise the result is
unpredictable. By default the routine contains a buffer of space to
handle only one sequence. If more sequences are needed, then a bigger
buffer should be allocated in the main program defining the {\tt COMMON}
block {\tt /RANMA2/} to the appropriate size. The space needed is 1 word
+ 103 words for every random sequence initialized.
\par
The sequences are initialized by
\begin{verbatim}
    CALL RMMAQ(ISEED,ISEQ,CHOPT)
\end{verbatim}
\begin{DLtt}{123456}
\item[ISEED] ({\tt INTEGER}) Array of length {\tt 3} or {\tt 103}
according to the option specified in {\tt CHOPT}. The first location
contains the integer seed from which to start the sequence.
Every integer number from {\tt 1} to {\tt 900 000 000} originates an
independent sequence of random numbers, with a period of $2^{144}$
(about $10^{43}$). The second and the third location contain numbers
used internally to re-initialize the generator by skipping and should
not be touched by the user. The other numbers are a snapshot of the
complete status of the generator. If saved, they can be used to
restart the generator without skipping over numbers already generated.
\item[ISEQ] ({\tt INTEGER}) This variable contains, on entry,
the number of the independent random number sequence which should be
addressed by the present call. If $\mathtt{\leq 0}$, then the last valid
sequence used will be addressed either for a save or a store. If option
{\tt 'R'} is specified, on exit the variable will contain the sequence
actually used.
\item[CHOPT] ({\tt CHARACTER}) Specifies the action which {\tt RMMAQ}
should take. Possible options are:
\begin{DLtt}{1234}
\item[' '] (Blank) The sequence number {\tt 1} will be initialized
with a default seed. All arguments are ignored.
\item['R'] Get the present status of the generator. If option {\tt 'V'}
is also present, then the complete status of the generator will be dumped
in the array {\tt ISEED}. This options will use 103 words in {\tt ISEED}
but has the advantage that the generator can be restarted immediately
without skipping numbers.
If option {\tt 'V'} is not present, then only 3 words will be used but
the generator will have to be restarted by skipping the number
of events generated so far.
\item['S'] Set the status of the generator to a previously saved state.
If option {\tt 'V'} is also present, then an array {\tt ISEED} of 103
words is expected, which comes from a previous call to the routine with
option {\tt 'RV'}. This kind of initialization is very fast. If the
option {\tt 'V'} is not specified
then the generator will be restarted regenerating the same number
of random extractions it generated at the time the status was saved.
In this case only the first 3 locations of {\tt ISEED} will be used.
\item['V'] Vector option. 103 words will be saved/restored. This allows
to restart the generator without skipping
over numbers already generated.
\end{DLtt}
\end{DLtt}
\newpage
For {\tt RMMAR} one seed is needed to initialize the random
number, but it is a one-way initialization. The seed cannot be
output and used to restart the sequence. In order to restart the
generation, the number of random numbers generated is recorded by
the generator. The sequence is restarted either generating this
many random numbers or saving and restoring a vector of 103 words.
The number of generations is stored in the two array elements
{\tt ISEED(2),ISEED(3)} as the period is bigger than the maximum
number which can be represented by a 32-bit integer.
\Timing
Time in $\mu$sec for extractions and skips:
\begin{center}
\begin{tabular}{|l|r|r|r|r|r|}
\hline
Extractions  &     &     &     &     & $1000/10^5$ \\
per call     & 1   & 4   & 16  & 128 & skips \\ \hline
APOLLO 10000 & 7.4 & 6.0 & 5.6 & 5.5 & 15/4.6 \\
APOLLO 4000  & 69  & 55  & 51  & 50  & 120/73 \\
IBM390E      & 4.3 & 2.5 & 2.0 & 1.9 & 7.4/1.2\\
CRAY X-MP/48 & 4.1 & 2.1 & 1.7 & 1.5 & 6.9/1.6\\
VAX8650      & 14  & 7.3 & 5.9 & 5.8 & 4.7/4.6\\ \hline
\end{tabular}
\end{center}
\Refer
\begin{enumerate}
\item G. Marsaglia and A. Zaman, Toward a Universal Random Number
Generator, Florida State University FSU-SCRI-87-50 (1987).
\item F. James, A Review of Pseudorandom Number Generators,
Computer Phys. Comm. {\bf 60} (1990) 329--344.
\end{enumerate}
$\bullet$
@


1.2
log
@latest by Siegfried
@
text
@d1 1
a1 1
% ksk 22.02.94
d4 1
a4 1
\Author{G. Marsaglia, A. Zaman}                  \Library{KERNLIB}
@


1.1
log
@Initial revision
@
text
@d1 1
d7 10
a16 5
\Cernhead {Uniform Random Number Generator}
{\tt RANMAR} generates a sequence of random numbers uniformly
distributed in the interval (0,1), the end points excluded.
These numbers are returned in a vector. Several
independent sequences can be initialized and used in the same run.
d24 1
d26 41
d108 1
a108 2
\newpage
\item[CHOPT] ({\tt CHARACTER}) Specifies the action which {\tt RANMAQ}
d119 1
a119 2
the
generator will have to be restarted by skipping the number
d134 1
a143 39
\begin{verbatim}
    CALL RANMAR(VEC,LEN)
\end{verbatim}
\begin{DLtt}{123456}
\item[VEC] ({\tt REAL}) Array of length {\tt LEN} at least.
On exit, it will contain the in (0,1) uniformly distributed random
numbers.
\item[LEN] ({\tt INTEGER}) Number of random numbers to be generated.
Unchanged on exit.
\end{DLtt}
The initialization is made by
\begin{verbatim}
    CALL RMARIN(IJKLIN,NTOTIN,NTO2IN)
\end{verbatim}
\begin{DLtt}{12345678}
\item[IJKLIN] ({\tt INTEGER}) Seed from which to start the sequence.
Every integer number from {\tt 1} to {\tt 900 000 000} originates
an independent sequence of random numbers with operand of $2^{144}$
(about $10^{43}$).
\item[NTOTIN] ({\tt INTEGER}) Number (mod $10^9$) of random number
generated.
\item[NTO2IN] ({\tt INTEGER}) Billions of random numbers generated.
\end{DLtt}
The arguments {\tt NTOTIN} and {\tt NTO2IN} are used to restart the
generation from a given point by skipping over already performed
extractions. They are returned by {\tt RMARUT} and should not be
touched by the user.
\begin{verbatim}
    CALL RMARUT(IJKLUT,NTOTUT,NTO2UT)
\end{verbatim}
\begin{DLtt}{12345678}
\item[IJKLUT] ({\tt INTEGER}) Seed from which the sequence
was started.
\item[NTOTUT] ({\tt INTEGER}) Number (mod $10^9$) of random number
generated so far.
\item[NTO2UT] ({\tt INTEGER}) Billions of random numbers generated so
far.
\end{DLtt}
\newpage
@
