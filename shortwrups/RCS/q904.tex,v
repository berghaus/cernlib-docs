head	1.2;
access;
symbols;
locks;


1.2
date	96.05.08.07.08.08;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	94.04.02.16.47.09;	author goossens;	state Exp;
branches;
next	;


desc
@Initial entry
@


1.2
log
@new version
@
text
@%  1 Jul 1992 mg
\Version {CONVERT}                       \Routid{Q904}
\Keywords{FORTRAN FORTRAN90 CONVERT SOURCE}
\Author{M. Metcalf}                      \Library{PGMLIB}
\Submitter{}                              \Submitted{01.02.1992}
\Language{Fortran}                  %\Revised{}
\Cernhead {Fortran 77 to Fortran 90 source form conversion tool}
Users of Fortran 90 can choose between two different
styles of source form, the old (Fortran 77) and a new.
 
This program reads code written according to the
Fortran 77 {\em fixed} source form
from a specified input file
and writes it according to
the Fortran 90 {\em free} source form
to a specified output file.
It also formats the code by indenting the bodies of \texttt{DO}-loops
and \texttt{IF}-blocks, and performs a small number of syntax conversions.
\Structure
Complete {\tt PROGRAM}\\
User Entry Names: \Rdef{CONVERT}\\
Files Referenced: Input and output units, either default or user defined.
\Usage
{\tt CONVERT} has the following calling sequence on all systems:
\begin{verbatim}
        convert [-b] [-id n] [-il m] [-sb] ifile[.f] [ofile[.f90]]
                [+b]                 [+sb]
\end{verbatim}
where the meaning of the arguments is as follows:
\begin{DLtt}{123}
\item[-id] Indenting depth   (default = \texttt{3}).
\item[-il] Maximal indenting level   (default = \texttt{10}).
\item[-sb] Handle significant blanks (default).
\item[-b]  Generate interface blocks only.
\end{DLtt}
If no options are specified, significant blanks will be handled
(\texttt{-sb}) and all code will be processed (\texttt{+b}).
In order to do nothing but change the source form, type e.g.:
 
\begin{quote}
 \Ucom{convert -id 0 -il 0 +sb mysource.f}
\end{quote}
 
\Method
 
The program converts between the old fixed Fortran 77 source form
to the new Fortran 90 free source form.
Note that blanks are significant in the new source form.
In addition it is able to perform a few other useful operations
on the fly.
 
Statement keywords are
followed if necessary by a blank, and blanks within tokens
are suppressed; this handling of blanks is optional, but the default
(\texttt{-sb}).
 
If a \texttt{CONTINUE} statement terminates a single
\texttt{DO} loop, it is replaced by \texttt{END DO}.
 
Procedure \texttt{END} statements have the procedure name added, if
blanks are handled (\texttt{-sb}).
 
Statements like \texttt{INTEGER*2} are converted to
\texttt{INTEGER(2)}, if blanks are handled (\texttt{-sb}).
Depending on the target processor, a further global
edit might be required (e.g. where 2 bytes correspond to \texttt{KIND=1)}.
Typed functions and assumed-length character specifications are
treated similarly. The length specification \texttt{*4} is removed for all
data types except \texttt{CHARACTER}, as is \texttt{*8} for \texttt{COMPLEX}.
This treatment of non-standard type declarations includes any
non-standard \texttt{IMPLICIT} statements.
 
Optionally, interface blocks only may be produced (\texttt{-b});
this requires blank  processing to be requested (\texttt{-sb}).
The interface blocks are written in a form
compatible with both the old and the new source forms.
 
The program is able to handle    Patchy Card files,
as a \texttt{+} in column 1 is treated as a comment line
\Restrict
The program does not indent \texttt{FORMAT} statements or
any statement containing a character string with an
embedded multiple blank.
The order of comment lines and Fortran statements
is slightly modified if there are sequences of
more than 200 comment lines.
If there are syntax errors, continued lines do not
have a trailing \texttt{\&}.
 
When producing interface blocks, a check is required
that any dummy argument that is a procedure has a
corresponding \texttt{EXTERNAL} statement.
Also, since no
\texttt{COMMON} blocks or \texttt{PARAMETER} statements are copied,
part of an assumed-size array declaration may be
missing. Similarly, parts of an assumed-length
character symbolic constant might be copied and have
to be deleted.
\texttt{BLOCK DATA} statements are copied and
must be deleted.
These problems would normally be
detected by a compiler and are trivially corrected.
 
Within a given keyword, the case must be all upper
or all lower, and lower case programs require
blank handling for correct indenting.
\Errorh
Primitive syntax checks protect the program from most non-Fortran
source input.
\Refer
\begin{enumerate}
\item M. Metcalf and J.Reid, Fortran 90 explained,
Oxford  Science Publications (1990), Chapter 2
\end{enumerate}
$\bullet$
@


1.1
log
@Initial revision
@
text
@d17 2
a18 2
It also formats the code by indenting the bodies of \Lit{DO}-loops
and \Lit{IF}-blocks, and performs a small number of syntax conversions.
d31 2
a32 2
\item[-id] Indenting depth   (default = \Lit{3}).
\item[-il] Maximal indenting level   (default = \Lit{10}).
d37 1
a37 1
(\Lit{-sb}) and all code will be processed (\Lit{+b}).
d55 1
a55 1
(\Lit{-sb}).
d57 2
a58 2
If a \Lit{CONTINUE} statement terminates a single
\Lit{DO} loop, it is replaced by \Lit{END DO}.
d60 2
a61 2
Procedure \Lit{END} statements have the procedure name added, if
blanks are handled (\Lit{-sb}).
d63 2
a64 2
Statements like \Lit{INTEGER*2} are converted to
\Lit{INTEGER(2)}, if blanks are handled (\Lit{-sb}).
d66 1
a66 1
edit might be required (e.g. where 2 bytes correspond to \Lit{KIND=1)}.
d68 2
a69 2
treated similarly. The length specification \Lit{*4} is removed for all
data types except \Lit{CHARACTER}, as is \Lit{*8} for \Lit{COMPLEX}.
d71 1
a71 1
non-standard \Lit{IMPLICIT} statements.
d73 2
a74 2
Optionally, interface blocks only may be produced (\Lit{-b});
this requires blank  processing to be requested (\Lit{-sb}).
d79 1
a79 1
as a \Lit{+} in column 1 is treated as a comment line
d81 1
a81 1
The program does not indent \Lit{FORMAT} statements or
d88 1
a88 1
have a trailing \Lit{&}.
d92 1
a92 1
corresponding \Lit{EXTERNAL} statement.
d94 1
a94 1
\Lit{COMMON} blocks or \Lit{PARAMETER} statements are copied,
d99 1
a99 1
\Lit{BLOCK DATA} statements are copied and
@
