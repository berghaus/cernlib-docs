head	1.1;
access;
symbols;
locks;


1.1
date	94.04.02.16.47.03;	author goossens;	state Exp;
branches;
next	;


desc
@Initial entry
@



1.1
log
@Initial revision
@
text
@\Version {BITPAK}                          \Routid{M441}
\Keywords{BIT BYTE HANDLING}
\Author{M. Metcalf}        \Library{KERNLIB or Fortran library}
\Submitter{}                         \Submitted{10.12.1984}
\Language{Fortran with ISA extensions}  \Revised{18.10.1985}
\Cernhead {Handling Bits and Bytes, Bit Zero the Least Significant}
{\tt BITPAK} handles bits and bytes in a single word, with bit zero
being the least significant bit.
\Structure
{\tt SUBROUTINE} and {\tt FUNCTION} subprograms \\
User Entry Names:
\begin{tabular}[t]{l*{7}{@@{\hspace{4pt}}l}}
\Rdef{IOR},    & \Rdef{IAND},   & \Rdef{NOT},   & \Rdef{IEOR},  &
\Rdef{ISHFT},  & \Rdef{ISHFTC}, & \Rdef{IBITS}, & \Rdef{MVBITS}, \\
\Rdef{BTEST},  & \Rdef{IBSET},  & \Rdef{IBCLR}
\end{tabular}
\Usage
A numeric storage unit is considered to consist of a
string of bits numbered from {\it right to left}, starting at {\it zero}.
The standard MIL-STD-l753 defines ll bit manipulation functions on such
units, 8 of which are the ANSI/ISA functions found as intrinsic
functions in many compilers. This package complements the functions
available in compilers, ensuring that the full range is available on
all machines. This description includes all the functions for the sake
of completeness. \\[2mm]
{\bf Logical operations:} \\[2mm]
\begin{tabular}{@@{\hspace*{5mm}}l@@{\qquad}l}
{\tt IOR(M,N)}   & provides the inclusive {\tt OR} of the two integer
arguments. \\
{\tt IAND(M,N)}  & provides the logical {\tt AND} of the two integer
arguments. \\
{\tt NOT(M)}     & provides the logical complement of the integer
argument. \\
{\tt IEOR(M,N)}  & provides the exclusive {\tt OR} of the two integer
arguments.
\end{tabular} \\[2mm]
{\bf Shift operations:}
\[ \mbox{A shift count {\tt K} specifies}
\left\{
\begin{array}{l@@{\qquad}l}
\mbox{a left shift}   & \mbox{for $\mathtt{K > 0}$} \\
\mbox{no shift}       & \mbox{for $\mathtt{K = 0}$} \\
\mbox{a right shift}  & \mbox{for $\mathtt{K < 0}$}.
\end{array} \right. \]
\begin{tabular}{@@{\hspace*{5mm}}ll}
{\tt ISHFT(M,K)}       & \parbox[t]{125mm}
{provides the value of the integer argument {\tt M} with the bits
shifted. Bits shifted out to the left or right are lost, and zeros are
shifted in from the opposite end.} \\
{\tt ISHFTC(M,K,IC)}   & \parbox[t]{125mm}
{provides the value of the integer argument {\tt M} with the rightmost
{\tt IC} bits shifted, and the remaining bits untouched. The shift is
circular; no bits are lost.}
\end{tabular} \\
{\bf Bit subfields:} \\[2mm]
\begin{tabular}{@@{\hspace*{5mm}}ll}
{\tt IBITS(M,I,LEN)}   & \parbox[t]{105mm}
{provides, right justified, the value of the {\tt LEN} bits of the
integer argument {\tt M}, starting from position {\tt I}.} \\
{\tt CALL MVBITS(M,I,LEN,N,J)} & \parbox[t]{105mm}
{moves {\tt LEN} bits of integer argument {\tt M}, starting at position
{\tt I}, to the integer argument {\tt N}, starting at position {\tt J}.
All other bits of {\tt N} are left untouched. The arguments {\tt M}
and {\tt N} may refer to the same numeric storage unit.}
\end{tabular} \\
\newpage
{\bf Bit testing:} \\[2mm]
\begin{tabular}{@@{\hspace*{5mm}}ll}
{\tt BTEST(N,I)} & \parbox[t]{130mm}
{has the value {\tt .TRUE.} if bit {\tt I} of the
integer argument {\tt N} is set, and {\tt .FALSE.} otherwise.
Note that many compilers require {\tt BTEST} to be declared type
{\tt LOGICAL}.} \\
{\tt IBSET(N,I)} & has the value of the integer argument {\tt N}
with bit {\tt I} set to {\tt 1}. \\
{\tt IBCLR(N,I)} & has the value of the integer argument {\tt N} with
bit {\tt I} set to {\tt 0}.
\end{tabular}
\Notes
If bits are specified outside the range of one numeric storage unit,
or if fields are specified which are longer than one numeric storage
unit or zero, or if shifts are specified which are longer than the
fields being shifted, then the results are undefined.
\\ $\bullet$
@
