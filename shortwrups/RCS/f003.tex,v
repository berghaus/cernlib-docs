head	1.4;
access;
symbols;
locks;


1.4
date	97.06.23.14.59.38;	author goossens;	state Exp;
branches;
next	1.3;

1.3
date	96.05.14.08.07.29;	author goossens;	state Exp;
branches;
next	1.2;

1.2
date	95.11.15.08.15.54;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	94.04.02.16.46.43;	author goossens;	state Exp;
branches;
next	;


desc
@Initial entry
@


1.4
log
@add parameters ,missing for thwo routines
@
text
@%  19 Jun 97 mg
\Version{RMADD}                          \Routid{F003}
\Keywords{ELEMENTARY MATRIX OPERATION}
\Authors{H. Lipps}                      \Library{KERNLIB}
\Submitter{}                           \Submitted{18.12.1979}
\Language{Fortran or Assembler or COMPASS} \Revised{15.11.1995}
\Cernhead{Elementary Matrix Processing}
These subprograms perform elementary matrix operations.
\Structure
{\tt SUBROUTINE} and {\tt FUNCTION} subprograms \\
User Entry Names:
\begin{htmlonly}
\begin{tabular}{llllllll}
\Rdef{RMADD},  & \Rdef{RMBIL},  & \Rdef{RMCPY}, & \Rdef{RMDMP}, &
\Rdef{RMMNA},  & \Rdef{RMMNS},  & \Rdef{RMMPA}, & \Rdef{RMMPS}, \\
\Rdef{RMMPY},  & \Rdef{RMRAN},  & \Rdef{RMSCL}, & \Rdef{RMSET}, &
\Rdef{RMSUB},  & \Rdef{RMUTL},  & \Rdef{RUMNA}, & \Rdef{RUMNS},  \\
\Rdef{RUMPA},  & \Rdef{RUMPS},  & \Rdef{RUMPY}, \\
\Rdef{DMADD},  & \Rdef{DMBIL},  & \Rdef{DMCPY}, & \Rdef{DMDMP}, &
\Rdef{DMMNA},  & \Rdef{DMMNS},  & \Rdef{DMMPA}, & \Rdef{DMMPS}, \\
\Rdef{DMMPY},  & \Rdef{DMRAN},  & \Rdef{DMSCL}, & \Rdef{DMSET}, &
\Rdef{DMSUB},  & \Rdef{DMUTL},  & \Rdef{DUMNA}, & \Rdef{DUMNS},  \\
\Rdef{DUMPA},  & \Rdef{DUMPS},  & \Rdef{DUMPY}, \\
\Rdef{CMADD},  & \Rdef{CMBIL},  & \Rdef{CMCPY}, & \Rdef{CMDMP}, &
\Rdef{CMMNA},  & \Rdef{CMMNS},  & \Rdef{CMMPA}, & \Rdef{CMMPS}, \\
\Rdef{CMMPY},  & \Rdef{CMRAN},  & \Rdef{CMSCL}, & \Rdef{CMSET}, &
\Rdef{CMSUB},  & \Rdef{CMUTL},  & \Rdef{CUMNA}, & \Rdef{CUMNS},  \\
\Rdef{CUMPA},  & \Rdef{CUMPS},  & \Rdef{CUMPY}, & \Rdef{CMMPYC}, &
\Rdef{CCMMPY}, & \Rdef{CUMPYC}, & \Rdef{CCUMPY}
\end{tabular} \\
\end{htmlonly}
%\begin{latexonly}
\begin{tabular}[t]{l*{7}{@@{\hspace{4pt}}l}}
\Rdef{RMADD},  & \Rdef{RMBIL},  & \Rdef{RMCPY}, & \Rdef{RMDMP}, &
\Rdef{RMMNA},  & \Rdef{RMMNS},  & \Rdef{RMMPA}, & \Rdef{RMMPS}, \\
\Rdef{RMMPY},  & \Rdef{RMRAN},  & \Rdef{RMSCL}, & \Rdef{RMSET}, &
\Rdef{RMSUB},  & \Rdef{RMUTL},  & \Rdef{RUMNA}, & \Rdef{RUMNS},  \\
\Rdef{RUMPA},  & \Rdef{RUMPS},  & \Rdef{RUMPY}, \\
\Rdef{DMADD},  & \Rdef{DMBIL},  & \Rdef{DMCPY}, & \Rdef{DMDMP}, &
\Rdef{DMMNA},  & \Rdef{DMMNS},  & \Rdef{DMMPA}, & \Rdef{DMMPS}, \\
\Rdef{DMMPY},  & \Rdef{DMRAN},  & \Rdef{DMSCL}, & \Rdef{DMSET}, &
\Rdef{DMSUB},  & \Rdef{DMUTL},  & \Rdef{DUMNA}, & \Rdef{DUMNS},  \\
\Rdef{DUMPA},  & \Rdef{DUMPS},  & \Rdef{DUMPY}, \\
\Rdef{CMADD},  & \Rdef{CMBIL},  & \Rdef{CMCPY}, & \Rdef{CMDMP}, &
\Rdef{CMMNA},  & \Rdef{CMMNS},  & \Rdef{CMMPA}, & \Rdef{CMMPS}, \\
\Rdef{CMMPY},  & \Rdef{CMRAN},  & \Rdef{CMSCL}, & \Rdef{CMSET}, &
\Rdef{CMSUB},  & \Rdef{CMUTL},  & \Rdef{CUMNA}, & \Rdef{CUMNS},  \\
\Rdef{CUMPA},  & \Rdef{CUMPS},  & \Rdef{CUMPY}, & \Rdef{CMMPYC}, &
\Rdef{CCMMPY}, & \Rdef{CUMPYC}, & \Rdef{CCUMPY}
\end{tabular} \\
%\end{latexonly}
External References: \Rind{LOCF}{N100}, \Rind{RANF}{G900}, \Rind{DRANF}{G900}
(some Fortran versions only).
\Usage
For $\mathtt{t=R}$ (type {\tt REAL}), $\mathtt{t=D}$ (type
{\tt DOUBLE PRECISION}), $\mathtt{t=C}$ (type {\tt COMPLEX}):
\begin{center}
\begin{htmlonly}
\begin{tabular}{ll}
{\tt CALL tMSET (M,N,S,Z11,Z12,Z21)} & $z_{ij}=s$ \\
{\tt CALL tMRAN (M,N,A,B,Z11,Z12,Z21)} & $z_{ij} =$ random
(see {\bf Note} 2)\\
{\tt CALL tMCPY (M,N,X11,X12,X21,Z11,Z12,Z21)} & $z_{ij}=x_{ij}$ \\
{\tt CALL tMUTL (N,X11,X12,X21)} &
$x_{jk} = x_{kj} \ (j>k)$ (see {\bf Note} 3) \\
{\tt CALL tMSCL (M,N,S,X11,X12,X21,Z11,Z12,Z21)} & $z_{ij}=sx_{ij}$ \\
{\tt CALL tMDMP (M,N,D1,D2,X11,X12,X21,Z11,Z12,Z21)} &
$z_{ij}=d_ix_{ij}$ \\
{\tt CALL tMADD (M,N,X11,X12,X21,Y11,Y12,Y21,Z11,Z12,Z21)} &
$z_{ij}=x_{ij}+y_{ij}$ \\
{\tt CALL tMSUB (M,N,X11,X12,X21,Y11,Y12,Y21,Z11,Z12,Z21)} &
$z_{ij}=x_{ij}-y_{ij}$ \\
{\tt CALL tMMPY (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=x_{i1}y_1+\cdots+x_{in}y_n$ \\
{\tt CALL tMMPA (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=x_{i1}y_1+\cdots+x_{in}y_n+z_i$ \\
{\tt CALL tMMPS (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=x_{i1}y_1+\cdots+x_{in}y_n-z_i$ \\
{\tt CALL tMMNA (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=-x_{i1}y_1-\cdots-x_{in}y_n+z_i$ \\
{\tt CALL tMMNS (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=-x_{i1}y_1-\cdots-x_{in}y_n-z_i$ \\
{\tt CALL tUMPY (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=u_{jj}y_j+\cdots+u_{jn}y_n$ \\
{\tt CALL tUMPA (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=u_{jj}y_j+\cdots+u_{jn}y_n+z_j$ \\
{\tt CALL tUMPS (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=u_{jj}y_j+\cdots+u_{jn}y_n-z_j$ \\
{\tt CALL tUMNA (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=-u_{jj}y_j-\cdots-u_{jn}y_n+z_j$ \\
{\tt CALL tUMNS (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=-u_{jj}y_j-\cdots-u_{jn}y_n-z_j$ \\
{\tt F =  tMBIL (N,V1,V2,X11,X12,X21,Y1,Y2)} &
$f = \sum_{k,j = 1}^n v_kx_{kj}y_j$ \\
{\tt CALL CMMPYC(M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=x_{i1}\bar{y}_i+\cdots+x_{in}\bar{y}_n$ \\
{\tt CALL CCMMPY(M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=\bar{x}_{i1}y_i+\cdots+\bar{x}_{in}y_n$ \\
{\tt CALL CUMPYC(N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=u_{jj}\bar{y}_j+\cdots+u_{jn}\bar{y}_n$ \\
{\tt CALL CCUMPY(N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=\bar{u}_{jj}y_j+\cdots+\bar{u}_{jn}y_n$ \\
\end{tabular}
\end{htmlonly}
%\begin{latexonly}
\begin{tabular}{@@{}l@@{\qquad}l@@{}}
{\tt CALL tMSET (M,N,S,Z11,Z12,Z21)} & $z_{ij}=s$ \\
{\tt CALL tMRAN (M,N,A,B,Z11,Z12,Z21)} & $z_{ij} =$ random
(see {\bf Note} 2)\\
{\tt CALL tMCPY (M,N,X11,X12,X21,Z11,Z12,Z21)} & $z_{ij}=x_{ij}$ \\
{\tt CALL tMUTL (N,X11,X12,X21)} &
$x_{jk} = x_{kj} \ (j>k)$ (see {\bf Note} 3) \\
{\tt CALL tMSCL (M,N,S,X11,X12,X21,Z11,Z12,Z21)} & $z_{ij}=sx_{ij}$ \\
{\tt CALL tMDMP (M,N,D1,D2,X11,X12,X21,Z11,Z12,Z21)} &
$z_{ij}=d_ix_{ij}$ \\
{\tt CALL tMADD (M,N,X11,X12,X21,Y11,Y12,Y21,Z11,Z12,Z21)} &
$z_{ij}=x_{ij}+y_{ij}$ \\
{\tt CALL tMSUB (M,N,X11,X12,X21,Y11,Y12,Y21,Z11,Z12,Z21)} &
$z_{ij}=x_{ij}-y_{ij}$ \\
{\tt CALL tMMPY (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=x_{i1}y_1+\cdots+x_{in}y_n$ \\
{\tt CALL tMMPA (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=x_{i1}y_1+\cdots+x_{in}y_n+z_i$ \\
{\tt CALL tMMPS (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=x_{i1}y_1+\cdots+x_{in}y_n-z_i$ \\
{\tt CALL tMMNA (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=-x_{i1}y_1-\cdots-x_{in}y_n+z_i$ \\
{\tt CALL tMMNS (M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=-x_{i1}y_1-\cdots-x_{in}y_n-z_i$ \\
{\tt CALL tUMPY (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=u_{jj}y_j+\cdots+u_{jn}y_n$ \\
{\tt CALL tUMPA (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=u_{jj}y_j+\cdots+u_{jn}y_n+z_j$ \\
{\tt CALL tUMPS (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=u_{jj}y_j+\cdots+u_{jn}y_n-z_j$ \\
{\tt CALL tUMNA (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=-u_{jj}y_j-\cdots-u_{jn}y_n+z_j$ \\
{\tt CALL tUMNS (N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=-u_{jj}y_j-\cdots-u_{jn}y_n-z_j$ \\
{\tt F =  tMBIL (N,V1,V2,X11,X12,X21,Y1,Y2)} &
$f = \sum_{k,j = 1}^n v_kx_{kj}y_j$ \\
{\tt CALL CMMPYC(M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=x_{i1}\bar{y}_i+\cdots+x_{in}\bar{y}_n$ \\
{\tt CALL CCMMPY(M,N,X11,X12,X21,Y1,Y2,Z1,Z2)} &
$z_i=\bar{x}_{i1}y_i+\cdots+\bar{x}_{in}y_n$ \\
{\tt CALL CUMPYC(N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=u_{jj}\bar{y}_j+\cdots+u_{jn}\bar{y}_n$ \\
{\tt CALL CCUMPY(N,U11,U12,U22,Y1,Y2,Z1,Z2)} &
$z_j=\bar{u}_{jj}y_j+\cdots+\bar{u}_{jn}y_n$ \\
\end{tabular}
%\end{latexonly}
\end{center}
where $\bar{x}_{ij}, \bar{u}_{jk}, \bar{y}_j$
are the complex conjugates of $x_{ij}, u_{jk}, y_j$, respectively.
\begin{DLtt}{123456789012}
\item[M,N] ({\tt INTEGER}) The mathematical dimensions of the matrices
and vectors $(i = 1,2,\ldots,\mathtt{M}$;
$j,k = 1,2,\ldots,\mathtt{N})$.
\item[S,A,B] (Type according to {\tt t}) The scalar values $s$, $a$,
and $b$, respectively.
\item[X11,X12,X21] (Type according to {\tt t}) Array elements. They must
contain the elements $x_{11},x_{12},x_{21}$ of the matrix $(x_{ij})$.
\item[Y11,Y12,Y21] (Type according to {\tt t}) Array elements. They must
contain the elements $y_{11},y_{12},y_{21}$ of the matrix $(y_{ij})$.
\item[Y1,Y2] (Type according to {\tt t}) Array elements. They
must contain the elements $y_1,y_2$ of the vector $(y_j)$.
\item[D1,D2] (Type according to {\tt t}) Array elements. They
must contain the elements $d_1,d_2$ of the vector $(d_i)$.
\item[V1,V2] (Type according to {\tt t}) Array elements. They
must contain the elements $v_1,v_2$ of the vector $(v_k)$.
\item[U11,U12,U22] (Type according to {\tt t}) Array elements. They must
contain the elements $u_{11},u_{12},u_{22}$ of the
upper-triangular matrix $(u_{jk})$.
\item[Z11,Z12,Z21] (Type according to {\tt t}) Array elements.
On exit, they will contain the elements $z_{11},z_{12},z_{21}$
of the result matrix $(z_{ij})$.
\item[Z1,Z2] (Type according to {\tt t}) Array elements. On exit, they
will contain the elements $z_1,z_2$ of the result vector $(z_j)$.
\end{DLtt}
For $\mathtt{M<1}$ or $\mathtt{N<1}$ all subroutines return control
without action and all functions assume the value zero.
\Accuracy
On computers with IBM 370 architecture, all routines that
accumulate the inner product of type {\tt REAL} or {\tt COMPLEX} use
double-precision arithmetic internally;
the final result is then rounded to single precision.
\Notes
\begin{enumerate}
\item The vectors $(y_j)$ etc. need not be packed: any equidistant
spacing of their elements is permitted. The subprograms determine the
location of the vector element $y_j$ from the actual arguments
{\tt Y1} and {\tt Y2}. \\
Similarly, the matrices $(x_{ij})$ etc. need not be stored according
to the Fortran convention; any equidistant spacing of their rows
and columns is permitted. In particular, matrices may be stored row-wise.
The subprograms determine the location of the matrix element $x_{ij}$
from the actual arguments {\tt X11}, {\tt X12}, and {\tt X21}.
\item {\tt tMRAN} sets $z_{ij}$ to a random value of type {\tt t} that is
uniformly distributed in the interval {\tt (A,B)}. For {\tt CMRAN}, the
real and imaginary parts of $z_{ij}$ are distributed uniformly and
independently in {\tt (REAL(A),REAL(B))} and in
{\tt (AIMAG(A),AIMAG(B))}.
\item {\tt tMUTL} copies the upper triangle of the square matrix
$(x_{jk})$ of order {\tt N} to the lower triangle of this matrix, thus
creating a symmetric matrix.
\item The use of in-line {\tt DO} loops will be more efficient than
calling the equivalent matrix processing subprogram when the matrix
dimensions are sufficiently small, due to the overhead of the
subprogram call.
\end{enumerate}
$\bullet$
@


1.3
log
@Optimized version (KSK)
@
text
@d1 1
a1 1
%  08 nov 95  ksk
d4 1
a4 1
\Authors {H. Lipps}                      \Library{KERNLIB}
d12 21
d51 1
d58 2
a59 1
\begin{tabular}{l@@{\qquad}l}
d69 1
a69 1
{\tt CALL tMADD (M,N,X11,X12,X21,Y11,Y12,Y21,Z11,Z12)} &
d71 1
a71 1
{\tt CALL tMSUB (M,N,X11,X12,X21,Y11,Y12,Y21,Z11,Z12)} &
d104 48
@


1.2
log
@new version ksk Nov. 15th
@
text
@d30 1
a30 1
External References: \Rind{LOCF} (N100), \Rind{RANF}, \Rind{DRANF} (G900)
@


1.1
log
@Initial revision
@
text
@d1 1
d6 1
a6 1
\Language{Fortran or Assembler or COMPASS} \Revised{27.05.1987}
d13 4
a16 4
\Rdef{RMADD},  & \Rdef{RMBIL},  & \Rdef{RMCPY}, & \Rdef{RMMNA},  &
\Rdef{RMMNS},  & \Rdef{RMMPA},  & \Rdef{RMMPS}, & \Rdef{RMMPY},  \\
\Rdef{RMRAN},  & \Rdef{RMSCL},  & \Rdef{RMSET}, & \Rdef{RMSUB},  &
\Rdef{RMUTL},  & \Rdef{RRSCL},  & \Rdef{RUMNA}, & \Rdef{RUMNS},  \\
d18 4
a21 4
\Rdef{DMADD},  & \Rdef{DMBIL},  & \Rdef{DMCPY}, & \Rdef{DMMNA},  &
\Rdef{DMMNS},  & \Rdef{DMMPA},  & \Rdef{DMMPS}, & \Rdef{DMMPY},  \\
\Rdef{DMRAN},  & \Rdef{DMSCL},  & \Rdef{DMSET}, & \Rdef{DMSUB},  &
\Rdef{DMUTL},  & \Rdef{DRSCL},  & \Rdef{DUMNA}, & \Rdef{DUMNS},  \\
d23 4
a26 4
\Rdef{CMADD},  & \Rdef{CMBIL},  & \Rdef{CMCPY}, & \Rdef{CMMNA},  &
\Rdef{CMMNS},  & \Rdef{CMMPA},  & \Rdef{CMMPS}, & \Rdef{CMMPY},  \\
\Rdef{CMRAN},  & \Rdef{CMSCL},  & \Rdef{CMSET}, & \Rdef{CMSUB},  &
\Rdef{CMUTL},  & \Rdef{CRSCL},  & \Rdef{CUMNA}, & \Rdef{CUMNS},  \\
d44 1
a44 1
{\tt CALL tRSCL (M,N,D1,D2,X11,X12,X21,Z11,Z12,Z21)} &
@
