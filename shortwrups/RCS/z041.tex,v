head	1.3;
access;
symbols;
locks;


1.3
date	96.05.14.08.07.29;	author goossens;	state Exp;
branches;
next	1.2;

1.2
date	95.01.04.13.18.56;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	94.04.02.16.47.20;	author goossens;	state Exp;
branches;
next	;


desc
@Initial entry
@


1.3
log
@Optimized version (KSK)
@
text
@%  20 dec 94   ksk
\Version {QNEXTE}                          \Routid{Z041}
\Keywords{EVENT QNEXTE RESTART QNEXT}
\Author{W. Jank, D. Lellouch, R. Matthews, E. Pagiola, J. Zoll}
                                              \Library{KERNLIB}
\Submitter{}                                   \Submitted{28.08.1984}
\Language{Assembler or C}                            %\Revised{}
\Cernhead {Restart of Next Event}
This interface routine allows the user to restart
his program at the entry point {\tt QNEXTE}, provided he has initiated
it at this same entry point.
\par
For first entry, {\tt QNEXTE} remembers all necessary internal
Fortran parameters, such as registers, trace-back, stack pointers,
signal mask, whatever is needed on a given machine, and then calls a
user-supplied routine {\tt QNEXT}.
\par
On any subsequent entry, {\tt QNEXTE} resets all internal parameters so
as to cancel all open {\tt CALL}s below its own level, and then
transfers again control to  {\tt QNEXT}. If in {\tt QNEXT} a {\tt RETURN}
statement is reached this will lead back to the routine which did the
first call to {\tt QNEXTE}, usually the {\tt MAIN} program.
\Structure
(Pseudo) {\tt SUBROUTINE} subprogram \\
User Entry Names: \Rdef{QNEXTE}\\
Internal Entry Names: {\tt QNEXTD} (on Vax) \\
External References: User-supplied {\tt SUBROUTINE} subprogram
\Rind{QNEXT}{Z041}
\Usage
\begin{verbatim}
    CALL QNEXTE
\end{verbatim}
will transfer control to the routine {\tt QNEXT} supplied by the user,
via a {\tt CALL QNEXT} (no parameter list).
\Notes
{\tt QNEXT} is a user routine which cannot be loaded implicitly from a
library. If to be used at all, it has to be loaded explicitly, either
from a load file (such as produced by the compiler) or by some form of
{\tt INCLUDE} from a user library.
\par
Because {\tt QNEXTE} is referenced by some general packages, whose
user may not want to supply a {\tt QNEXT}, the reference from
{\tt QNEXTE} to {\tt QNEXT} has been made 'weak' (to avoid the 'missing
external' message from the loader) on the Vax (and probably also on some
other machines in the future). In this case {\tt QNEXTE} has a call to a
Fortran dummy routine {\tt QNEXTD} to print a message if it is
reached without the user having supplied a routine {\tt QNEXT}.
\par
On most UNIX machines the loader is not able to start a module with
missing externals; in this case, the user is obliged to provide a
routine {\tt QNEXT}, to stop the run, for example.
%\newpage
\Examples
Schema of Fortran {\tt CALL} levels :
\begin{verbatim}
    MAIN     CALL QNEXTE       ...       EVLOOP   CALL MATCH
    QNEXTE   CALL QNEXT        .         MATCH    CALL TEST
    QNEXT    CALL EVLOOP     ...         TEST     CALL QNEXTE
\end{verbatim}
The last {\tt CALL QNEXTE} abandons the current event.
\\ $\bullet$
@


1.2
log
@ New version KSK Jan 4 1995
@
text
@d28 1
a28 1
\Rind{QNEXT}
@


1.1
log
@Initial revision
@
text
@d1 1
d52 1
a52 1
\newpage
d56 3
a58 6
    MAIN     CALL QNEXTE
    QNEXTE   CALL QNEXT
    QNEXT    CALL EVLOOP
    EVLOOP   CALL MATCH
    MATCH    CALL TEST
    TEST     CALL QNEXTE
@
