head	1.2;
access;
symbols;
locks;
comment	@% @;


1.2
date	96.05.14.08.07.29;	author goossens;	state Exp;
branches;
next	1.1;

1.1
date	96.05.08.07.21.32;	author goossens;	state Exp;
branches;
next	;


desc
@new version May 1996 ksk
@


1.2
log
@Optimized version (KSK)
@
text
@%  16 apr 1996 ksk
\Version{CFSTFT}                                 \Routid{D706}
\Keywords{COMPLEX FAST FOURIER TRANSFORM}
\Author{K.S. K\"olbig, H.-H. Umst\"atter}  \Library{MATHLIB}
\Submitter{}                                    \Submitted{22.04.1996}
\Language{Fortran}                       %\Revised{}
\Cernhead{Complex Fast Fourier Transform}
Subroutine {\tt CFSTFT} calculates the finite Fourier transform of a
complex periodic sequence $a_0,a_1,\ldots,a_{n-1}$,
whose period $n$ must be a power of two. Either the direct transform
\begin{equation}
A_j \ = \ \sum_{k=0}^{n-1} a_k \exp \left( \frac{-i 2\pi jk}{n} \right),
\qquad (j=0,1,\ldots,n-1),
\end{equation}
or the unscaled inverse transform
\begin{equation}
\alpha_k \ = \
\sum_{j=0}^{n-1} A_j \exp \left( \frac{i 2\pi jk}{n} \right),
\qquad (k=0,1,\ldots,n-1),
\end{equation}
where $a_k,\,\alpha_k$ and $A_j$ are complex numbers, may be calculated.
\par
If the $A_j$ in (2) have the values defined by (1), then
$a_k=\alpha_k/n, (k=0,1,\ldots,n-1)$.
To ensure optimum use of storage, the same array is used for input and
output, and all intermediate calculations are carried out in this array.
\Structure
{\tt SUBROUTINE} subprogram \\
User Entry Names: \Rdef{CFSTFT}
\Usage
\begin{verbatim}
    CALL CFSTFT(M,A)
\end{verbatim}
\begin{DLtt}{1234}
\item[M] ({\tt INTEGER}) On entry, $n$ is determined by the absolute
value of {\tt M} via $n=2^{\mathtt{|M|}}$. \\
$\mathtt{M<0:}$ The direct transform (1) is calculated. \\
$\mathtt{M \ge 0:}$ The inverse transform (2) is calculated. \\
Unchanged on exit.
\item[A] ({\tt COMPLEX}) One dimensional array of dimension {\tt (0:d)},
where $\mathtt{d \ge n-1}$. \\
$\mathtt{M<0:}$ \\
On entry, $\mathtt{A}(k)=a_k,\,(k=0,1,\ldots,n-1)$.\\
On exit, $\mathtt{A}(j)=A_j,\,(j=0,1,\ldots,n-1)$,
as defined by (1). \\
$\mathtt{M \ge 0:}$ \\
On entry, $\mathtt{A}(j)=A_j,\,(j=0,1,\ldots,n-1)$. \\
On exit, $\mathtt{A}(k)=a_k,\,(k=0,1,\ldots,n-1)$,
as defined by (2).
\end{DLtt}
\Method
The method is based on an algorithm of Cooley, Lewis and Welch
(see {\bf References}), with the following modifications
which increase speed for small values of {\tt M}: multiplications by
$\exp(ip\pi)$ are replaced by addition or subtraction, and terms of
the form $\exp(i2\pi/q),(q=2,4,\ldots,n)$ are calculated recursively
using only square roots and divisions.
\newpage
\Refer
\begin{enumerate}
\item  G. Dahlquist and \AA. Bj\"orck, Numerical methods
(Prentice-Hall, Englewood Cliffs, 1974) 416.
\item  L.R. Rabiner and B. Gold, Theory and application of
digital signal processing (Prentice-Hall, Englewood Cliffs, 1975) 332.
\end{enumerate}
$\bullet$
@


1.1
log
@Initial revision
@
text
@d58 1
@
